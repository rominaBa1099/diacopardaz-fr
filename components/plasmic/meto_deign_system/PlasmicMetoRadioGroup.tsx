/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2X77A6CrJVTC8zJTD8qsTc
// Component: NsmwdTv6Wctf

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Radio from "../../Radio"; // plasmic-import: d47V2dv8lVsn/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import sty from "./PlasmicMetoRadioGroup.module.css"; // plasmic-import: NsmwdTv6Wctf/css

createPlasmicElementProxy;

export type PlasmicMetoRadioGroup__VariantMembers = {
  style2: "purple";
};
export type PlasmicMetoRadioGroup__VariantsArgs = {
  style2?: SingleChoiceArg<"purple">;
};
type VariantPropType = keyof PlasmicMetoRadioGroup__VariantsArgs;
export const PlasmicMetoRadioGroup__VariantProps = new Array<VariantPropType>(
  "style2"
);

export type PlasmicMetoRadioGroup__ArgsType = {
  radio?: any;
  value?: any;
  onValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicMetoRadioGroup__ArgsType;
export const PlasmicMetoRadioGroup__ArgProps = new Array<ArgPropType>(
  "radio",
  "value",
  "onValueChange"
);

export type PlasmicMetoRadioGroup__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  radio?: Flex__<typeof Radio>;
};

export interface DefaultMetoRadioGroupProps {
  radio?: any;
  value?: any;
  onValueChange?: (val: string) => void;
  style2?: SingleChoiceArg<"purple">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMetoRadioGroup__RenderFunc(props: {
  variants: PlasmicMetoRadioGroup__VariantsArgs;
  args: PlasmicMetoRadioGroup__ArgsType;
  overrides: PlasmicMetoRadioGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          radio: [
            { label: "\u06af\u0632\u06cc\u0646\u0647 \u06f1", value: 1 },
            { label: "\u06af\u0632\u06cc\u0646\u0647 \u06f2", value: 2 },
            { label: "\u06af\u0632\u06cc\u0646\u0647 \u06f3", value: 3 },
            { label: "\u06af\u0632\u06cc\u0646\u0647 \u06f4", value: 4 }
          ]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "value",
        type: "writable",
        variableType: "object",

        valueProp: "value",
        onChangeProp: "onValueChange"
      },
      {
        path: "style2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.style2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootstyle2_purple]: hasVariant($state, "style2", "purple") }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxstyle2_purple]: hasVariant($state, "style2", "purple")
        })}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.radio;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Radio
              data-plasmic-name={"radio"}
              data-plasmic-override={overrides.radio}
              className={classNames("__wab_instance", sty.radio, {
                [sty.radiostyle2_purple]: hasVariant($state, "style2", "purple")
              })}
              currentItem={currentItem}
              key={currentIndex}
              onClick={async event => {
                const $steps = {};

                $steps["updateValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["value"]
                        },
                        operation: 0,
                        value: currentItem
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateValue"] != null &&
                  typeof $steps["updateValue"] === "object" &&
                  typeof $steps["updateValue"].then === "function"
                ) {
                  $steps["updateValue"] = await $steps["updateValue"];
                }
              }}
              select={(() => {
                try {
                  return currentItem.value == $state.value.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              style2={(() => {
                try {
                  return $state.style2;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "radio"],
  freeBox: ["freeBox", "radio"],
  radio: ["radio"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  radio: typeof Radio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMetoRadioGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMetoRadioGroup__VariantsArgs;
    args?: PlasmicMetoRadioGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMetoRadioGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMetoRadioGroup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMetoRadioGroup__ArgProps,
          internalVariantPropNames: PlasmicMetoRadioGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMetoRadioGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMetoRadioGroup";
  } else {
    func.displayName = `PlasmicMetoRadioGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicMetoRadioGroup = Object.assign(
  // Top-level PlasmicMetoRadioGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    radio: makeNodeComponent("radio"),

    // Metadata about props expected for PlasmicMetoRadioGroup
    internalVariantProps: PlasmicMetoRadioGroup__VariantProps,
    internalArgProps: PlasmicMetoRadioGroup__ArgProps
  }
);

export default PlasmicMetoRadioGroup;
/* prettier-ignore-end */
