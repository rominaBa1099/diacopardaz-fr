/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: I_HeW-rGK62W

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import { SwiperSlider } from "@/components/SwiperSlider"; // plasmic-import: 1MaU8rw9HIJe/codeComponent

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicProfile.module.css"; // plasmic-import: I_HeW-rGK62W/css

import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon

createPlasmicElementProxy;

export type PlasmicProfile__VariantMembers = {};
export type PlasmicProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicProfile__VariantsArgs;
export const PlasmicProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicProfile__ArgsType = {
  onClick?: (event: any) => void;
  shop?: any;
  onShopChange2?: (val: string) => void;
  userInfo?: any;
};
type ArgPropType = keyof PlasmicProfile__ArgsType;
export const PlasmicProfile__ArgProps = new Array<ArgPropType>(
  "onClick",
  "shop",
  "onShopChange2",
  "userInfo"
);

export type PlasmicProfile__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  metoButton?: Flex__<typeof MetoButton>;
  section?: Flex__<"section">;
  swiperSlider?: Flex__<typeof SwiperSlider>;
};

export interface DefaultProfileProps {
  onClick?: (event: any) => void;
  shop?: any;
  onShopChange2?: (val: string) => void;
  userInfo?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfile__RenderFunc(props: {
  variants: PlasmicProfile__VariantsArgs;
  args: PlasmicProfile__ArgsType;
  overrides: PlasmicProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "slide",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            title:
              "\u067e\u06cc\u0627\u0645 \u062f\u0627\u062f\u0646 \u0646\u0627 \u0645\u062d\u062f\u0648\u062f",
            text: "\u0647\u0645 \u062a\u0648 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647 \u0647\u0645 \u0645\u06cc\u062a\u0648\u0646\u0646 \u0628\u0647\u062a \u062c\u0648\u0627\u0628 \u0628\u062f\u0646",
            gradient: "linear-gradient(to bottom, #232526, #414345)"
          },
          {
            title:
              "\u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646",
            text: "\u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0633\u0631\u06cc\u0639 \u062a\u0631 \u062f\u0648\u0633\u062a \u067e\u06cc\u062f\u0627 \u0645\u06cc\u06a9\u0646\u06cc",
            gradient: "linear-gradient(to bottom, #141E30, #243B55)"
          },
          {
            title:
              "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644",
            text: "\u0647\u0645\u0647 \u0645\u06cc\u0634\u0646\u0627\u0633\u0646\u062a \u0648 \u062e\u0648\u062f\u0634\u0648\u0646 \u0628\u0647\u062a \u067e\u06cc\u0627\u0645 \u0645\u06cc\u062f\u0646",
            gradient: "linear-gradient(to bottom, #0f2027, #203a43, #2c5364)"
          },
          {
            title:
              "\u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647",
            text: "\u0628\u0628\u06cc\u0646 \u06a9\u06cc\u0627 \u0627\u0632\u062a \u06cc\u0648\u0627\u0634\u06a9\u06cc \u062e\u0648\u0634\u0634\u0648\u0646 \u0627\u0648\u0645\u062f\u0647",
            gradient: "linear-gradient(to bottom, #434343, #000000)"
          },
          {
            title:
              "\u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc",
            text: "\u0645\u06cc\u062a\u0648\u0646\u06cc \u062f\u0631 \u0686\u062a \u0639\u06a9\u0633 \u0628\u0641\u0631\u0633\u062a\u06cc \u0628\u0631\u0627\u06cc \u0628\u0642\u06cc\u0647",
            gradient: "linear-gradient(to bottom, #1f1c2c, #928dab)"
          },
          {
            title:
              "\u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647",
            text: "\u062f\u0642\u06cc\u0642\u0627 \u06a9\u06cc\u0627 \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0646\u061f \u06a9\u0646\u062c\u06a9\u0627\u0648\u0647\u0627",
            gradient: "linear-gradient(to bottom, #2c3e50, #4ca1af)"
          },
          {
            title:
              "\u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647",
            text: "\u06a9\u06cc\u0627 \u0627\u0632\u062a \u0628\u062f\u0634\u0648\u0646 \u0645\u06cc\u0627\u062f \u061f\u06a9\u06cc \u0627\u0646\u061f",
            gradient: "linear-gradient(to bottom, #000428, #004e92)"
          }
        ]
      },
      {
        path: "shop",
        type: "writable",
        variableType: "object",

        valueProp: "shop",
        onChangeProp: "onShopChange2"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___6O20D)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hpprH)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"7rem"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"7rem"}
            loading={"lazy"}
            src={(() => {
              try {
                return (() => {
                  if (!/\.[^/.]+$/.test($props.userInfo.userInfo.profilePic)) {
                    return ($props.userInfo.userInfo.profilePic += ".jpg");
                  } else {
                    return $props.userInfo.userInfo.profilePic;
                  }
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/metoo/images/image.png",
                    fullWidth: 255,
                    fullHeight: 327,
                    aspectRatio: undefined
                  };
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__gz3Y2)}>
            <MetoLabel
              className={classNames("__wab_instance", sty.metoLabel__fmiiJ)}
              size={"lg"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__d0Y0M
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  "\u0646\u0627\u0646\u0627\u0646\u062a\u0627\u0646\u0627\u0646\u062a\u0627\u062a\u0646\u0627"
                ) : (
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.userInfo.userInfo.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u0628\u0631\u0627\u06cc \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0647\u062a\u0631 \u0628\u0627 \u062f\u06cc\u06af\u0631\u0627\u0646 \u0644\u0637\u0641\u0627 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0639\u06a9\u0633\u062a \u0631\u0648 \u0622\u067e\u0644\u0648\u062f \u06a9\u0646";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                )}
              </div>
            </MetoLabel>
            <div className={classNames(projectcss.all, sty.freeBox__fk3QF)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0AqRu
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `مجموعه بازدید: ${$props.userInfo.userInfo.cView}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0645\u062c\u0645\u0648\u0639\u0647 \u0628\u0627\u0632\u062f\u06cc\u062f";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rDjiw
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return `مجموعه لایک: ${$props.userInfo.userInfo.cLike}`;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </div>
        </Stack__>
        <MetoButton
          data-plasmic-name={"metoButton"}
          data-plasmic-override={overrides.metoButton}
          className={classNames("__wab_instance", sty.metoButton)}
          color={"neutral"}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zhQe9
              )}
            >
              {
                "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
              }
            </div>
          }
          onClick={args.onClick}
          size={"extraLarge"}
        />
      </Stack__>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <SwiperSlider
          data-plasmic-name={"swiperSlider"}
          data-plasmic-override={overrides.swiperSlider}
          activeBulletColor={true ? "var(--antd-colorInfoText)" : undefined}
          autoplay={true}
          autoplayDelay={2000}
          bulletColor={true ? "var(--antd-colorWhite)" : undefined}
          className={
            classNames({ [sty["pcls_i9guygSzTzmk"]]: true }) +
            " " +
            classNames("__wab_instance", sty.swiperSlider)
          }
          loop={true}
          showPagination={true}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.shop.info;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0RpmT)}
                key={currentIndex}
                style={(() => {
                  try {
                    return {
                      background: `linear-gradient(to bottom, ${currentItem.bgColor1}, ${currentItem.bgColor2})`
                    };
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel___81Nuy
                  )}
                  size={"lg"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sp9Y6
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </MetoLabel>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aSqXo
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            );
          })}
        </SwiperSlider>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "metoButton", "section", "swiperSlider"],
  img: ["img"],
  metoButton: ["metoButton"],
  section: ["section", "swiperSlider"],
  swiperSlider: ["swiperSlider"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  metoButton: typeof MetoButton;
  section: "section";
  swiperSlider: typeof SwiperSlider;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfile__VariantsArgs;
    args?: PlasmicProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfile__ArgProps,
          internalVariantPropNames: PlasmicProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfile";
  } else {
    func.displayName = `PlasmicProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicProfile = Object.assign(
  // Top-level PlasmicProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    metoButton: makeNodeComponent("metoButton"),
    section: makeNodeComponent("section"),
    swiperSlider: makeNodeComponent("swiperSlider"),

    // Metadata about props expected for PlasmicProfile
    internalVariantProps: PlasmicProfile__VariantProps,
    internalArgProps: PlasmicProfile__ArgProps
  }
);

export default PlasmicProfile;
/* prettier-ignore-end */
