/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: HULKK0Icu5E3

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoRadioGroup from "../../MetoRadioGroup"; // plasmic-import: vflzMD0cEG1j/component
import MetoRadioGroup2 from "../../MetoRadioGroup"; // plasmic-import: NsmwdTv6Wctf/component
import MetoTextInput from "../../MetoTextInput"; // plasmic-import: 5qyh6D0EGyhW/component
import List from "../../List"; // plasmic-import: zTdODAOAgstb/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import SearchPost from "../../SearchPost"; // plasmic-import: Q5aLBQV7Zpaw/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: SjBUwY_Y_i3-/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicSearch.module.css"; // plasmic-import: HULKK0Icu5E3/css

import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: DQwOsaFY71Mq/icon

createPlasmicElementProxy;

export type PlasmicSearch__VariantMembers = {
  post: "post";
};
export type PlasmicSearch__VariantsArgs = {
  post?: SingleBooleanChoiceArg<"post">;
};
type VariantPropType = keyof PlasmicSearch__VariantsArgs;
export const PlasmicSearch__VariantProps = new Array<VariantPropType>("post");

export type PlasmicSearch__ArgsType = {
  data?: any;
  stateId?: number;
  onStateIdChange?: (val: string) => void;
  city?: any;
  onCityChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicSearch__ArgsType;
export const PlasmicSearch__ArgProps = new Array<ArgPropType>(
  "data",
  "stateId",
  "onStateIdChange",
  "city",
  "onCityChange"
);

export type PlasmicSearch__OverridesType = {
  root?: Flex__<"div">;
  slide2?: Flex__<typeof Reveal>;
  sex?: Flex__<typeof MetoRadioGroup>;
  age?: Flex__<typeof MetoRadioGroup2>;
  stateInput?: Flex__<typeof MetoTextInput>;
  stateList?: Flex__<typeof List>;
  cityInput?: Flex__<typeof MetoTextInput>;
  cityList?: Flex__<typeof List>;
  svg?: Flex__<"svg">;
  slide22?: Flex__<typeof Reveal>;
  searchPost?: Flex__<typeof SearchPost>;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultSearchProps {
  data?: any;
  stateId?: number;
  onStateIdChange?: (val: string) => void;
  city?: any;
  onCityChange?: (val: string) => void;
  post?: SingleBooleanChoiceArg<"post">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearch__RenderFunc(props: {
  variants: PlasmicSearch__VariantsArgs;
  args: PlasmicSearch__ArgsType;
  overrides: PlasmicSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            list: [
              {
                id: 1,
                title:
                  "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
              },
              {
                id: 2,
                title:
                  "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
              },
              { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
              { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
              { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
              { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
              { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
              { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
              {
                id: 9,
                title:
                  "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
              },
              {
                id: 10,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
              },
              {
                id: 11,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
              },
              {
                id: 12,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
              },
              { id: 13, title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646" },
              { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
              { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
              {
                id: 16,
                title:
                  "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
              },
              { id: 17, title: "\u0641\u0627\u0631\u0633" },
              { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
              { id: 19, title: "\u0642\u0645" },
              { id: 20, title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646" },
              { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
              {
                id: 22,
                title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
              },
              {
                id: 23,
                title:
                  "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
              },
              { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
              { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
              { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
              {
                id: 27,
                title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
              },
              { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
              { id: 29, title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646" },
              { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
              { id: 31, title: "\u06cc\u0632\u062f" }
            ]
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "show",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.show
      },
      {
        path: "url",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "stateList.openList",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "stateList.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "cityList.openList",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cityList.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["data"]
      },
      {
        path: "cityList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.city;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  list: [
                    {
                      id: 1,
                      title:
                        "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                    },
                    {
                      id: 2,
                      title:
                        "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                    },
                    { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
                    { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
                    { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                    { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                    { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                    { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                    {
                      id: 9,
                      title:
                        "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                    },
                    {
                      id: 10,
                      title:
                        "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                    },
                    {
                      id: 11,
                      title:
                        "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                    },
                    {
                      id: 12,
                      title:
                        "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                    },
                    {
                      id: 13,
                      title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                    },
                    { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                    { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                    {
                      id: 16,
                      title:
                        "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                    },
                    { id: 17, title: "\u0641\u0627\u0631\u0633" },
                    { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                    { id: 19, title: "\u0642\u0645" },
                    {
                      id: 20,
                      title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                    },
                    { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                    {
                      id: 22,
                      title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                    },
                    {
                      id: 23,
                      title:
                        "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                    },
                    { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
                    { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                    { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
                    {
                      id: 27,
                      title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                    },
                    { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                    {
                      id: 29,
                      title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                    },
                    { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                    { id: 31, title: "\u06cc\u0632\u062f" }
                  ]
                };
              }
              throw e;
            }
          })()
      },
      {
        path: "birthday2",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "age.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "post",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.post
      },
      {
        path: "sex.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "searchPost.filter",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          label:
            "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646",
          value: "online"
        })
      },
      {
        path: "stateId",
        type: "writable",
        variableType: "number",

        valueProp: "stateId",
        onChangeProp: "onStateIdChange"
      },
      {
        path: "stateInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cityInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "city",
        type: "writable",
        variableType: "object",

        valueProp: "city",
        onChangeProp: "onCityChange"
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "searchPost.body",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "post", "post")
            ? (() => {
                try {
                  return $state.body;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {};
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return { type: $state.filter.value };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {};
                  }
                  throw e;
                }
              })()
      },
      {
        path: "body",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "searchPost.chat",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "searchPost.counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "searchPost.currentuser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootpost]: hasVariant($state, "post", "post") }
      )}
    >
      <Reveal
        data-plasmic-name={"slide2"}
        data-plasmic-override={overrides.slide2}
        className={classNames("__wab_instance", sty.slide2, {
          [sty.slide2post]: hasVariant($state, "post", "post")
        })}
        damping={hasVariant($state, "post", "post") ? 0.1 : 0.1}
        duration={500}
        effect={"fade"}
        reverse={false}
        triggerOnce={true}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ycl8G)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jhrvg)}
          >
            <MetoLabel
              className={classNames("__wab_instance", sty.metoLabel__z20Oi)}
              size={"lg"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___5PA9
                )}
              >
                {
                  "\u062f\u0646\u0628\u0627\u0644 \u06a9\u06cc \u0645\u06cc\u06af\u0631\u062f\u06cc\u061f"
                }
              </div>
            </MetoLabel>
            <MetoRadioGroup
              data-plasmic-name={"sex"}
              data-plasmic-override={overrides.sex}
              className={classNames("__wab_instance", sty.sex)}
              onValueChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["sex", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              radio={[
                { label: "\u062f\u062e\u062a\u0631", value: "female" },
                { label: "\u067e\u0633\u0631", value: "male" }
              ]}
              style2={"_2Radio"}
              value={generateStateValueProp($state, ["sex", "value"])}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nq9Ye)}
          >
            <MetoLabel
              className={classNames("__wab_instance", sty.metoLabel__yJyUh)}
              size={"lg"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r2PCt
                )}
              >
                {
                  "\u062d\u062f\u0648\u062f\u0627 \u0686\u0646\u062f \u0633\u0627\u0644\u0647\u061f"
                }
              </div>
            </MetoLabel>
            <MetoRadioGroup2
              data-plasmic-name={"age"}
              data-plasmic-override={overrides.age}
              className={classNames("__wab_instance", sty.age)}
              onValueChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["age", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              radio={[
                { label: "15-17", value: "min:15,max:17", min: 15, max: 17 },
                { label: "18-22", value: "min:18,max:22", min: 18, max: 22 },
                { label: "22-28", value: "min:22,max:28", min: 22, max: 28 },
                {
                  label: "\u0628\u0627\u0644\u0627\u06cc 28",
                  value: "min:28,max:Infinity",
                  min: 28,
                  max: "Infinity"
                }
              ]}
              value={generateStateValueProp($state, ["age", "value"])}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hT5TW)}
          >
            <MetoLabel
              className={classNames("__wab_instance", sty.metoLabel__lHQnV)}
              size={"lg"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zfkex
                )}
              >
                {
                  "\u0627\u0647\u0644 \u06a9\u062f\u0648\u0645 \u0627\u0633\u062a\u0627\u0646 \u0628\u0627\u0634\u0647\u061f"
                }
              </div>
            </MetoLabel>
            <MetoTextInput
              data-plasmic-name={"stateInput"}
              data-plasmic-override={overrides.stateInput}
              className={classNames("__wab_instance", sty.stateInput)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "stateInput",
                  "value"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onFocus={async focusEvent => {
                const $steps = {};

                $steps["updateStateListOpenList"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateList", "openList"]
                        },
                        operation: 4,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateListOpenList"] != null &&
                  typeof $steps["updateStateListOpenList"] === "object" &&
                  typeof $steps["updateStateListOpenList"].then === "function"
                ) {
                  $steps["updateStateListOpenList"] = await $steps[
                    "updateStateListOpenList"
                  ];
                }
              }}
              readOnly={true}
              value={generateStateValueProp($state, ["stateInput", "value"])}
            />

            <List
              data-plasmic-name={"stateList"}
              data-plasmic-override={overrides.stateList}
              className={classNames("__wab_instance", sty.stateList)}
              data={generateStateValueProp($state, ["stateList", "data"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateStateId"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateId"]
                        },
                        operation: 0,
                        value: $state.stateList.select.id
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateId"] != null &&
                  typeof $steps["updateStateId"] === "object" &&
                  typeof $steps["updateStateId"].then === "function"
                ) {
                  $steps["updateStateId"] = await $steps["updateStateId"];
                }

                $steps["updateStateInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["stateInput", "value"]
                        },
                        operation: 0,
                        value: $state.stateList.select.title
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateStateInputValue"] != null &&
                  typeof $steps["updateStateInputValue"] === "object" &&
                  typeof $steps["updateStateInputValue"].then === "function"
                ) {
                  $steps["updateStateInputValue"] = await $steps[
                    "updateStateInputValue"
                  ];
                }

                $steps["updateCityInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["cityInput", "value"]
                        },
                        operation: 0,
                        value: ""
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCityInputValue"] != null &&
                  typeof $steps["updateCityInputValue"] === "object" &&
                  typeof $steps["updateCityInputValue"].then === "function"
                ) {
                  $steps["updateCityInputValue"] = await $steps[
                    "updateCityInputValue"
                  ];
                }
              }}
              onDataChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["stateList", "data"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onOpenListChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "stateList",
                  "openList"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onSelectChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "stateList",
                  "select"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              openList={generateStateValueProp($state, [
                "stateList",
                "openList"
              ])}
              select={generateStateValueProp($state, ["stateList", "select"])}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z5FkN)}
          >
            <MetoLabel
              className={classNames("__wab_instance", sty.metoLabel__tQx6E)}
              size={"lg"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wP59X
                )}
              >
                {
                  "\u0634\u0647\u0631 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0648 \u0647\u0645 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                }
              </div>
            </MetoLabel>
            <MetoTextInput
              data-plasmic-name={"cityInput"}
              data-plasmic-override={overrides.cityInput}
              className={classNames("__wab_instance", sty.cityInput)}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["cityInput", "value"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onFocus={async focusEvent => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.stateInput.value) {
                              return ($state.cityList.openList =
                                !$state.cityList.openList);
                            } else {
                              return ($state.stateList.openList =
                                !$state.stateList.openList);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              readOnly={true}
              value={generateStateValueProp($state, ["cityInput", "value"])}
            />

            <List
              data-plasmic-name={"cityList"}
              data-plasmic-override={overrides.cityList}
              className={classNames("__wab_instance", sty.cityList)}
              data={generateStateValueProp($state, ["cityList", "data"])}
              onClick={async event => {
                const $steps = {};

                $steps["updateCityInputValue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["cityInput", "value"]
                        },
                        operation: 0,
                        value: $state.cityList.select.title
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCityInputValue"] != null &&
                  typeof $steps["updateCityInputValue"] === "object" &&
                  typeof $steps["updateCityInputValue"].then === "function"
                ) {
                  $steps["updateCityInputValue"] = await $steps[
                    "updateCityInputValue"
                  ];
                }
              }}
              onDataChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["cityList", "data"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onOpenListChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "cityList",
                  "openList"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onSelectChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["cityList", "select"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              openList={generateStateValueProp($state, [
                "cityList",
                "openList"
              ])}
              select={generateStateValueProp($state, ["cityList", "select"])}
            />
          </Stack__>
          <section className={classNames(projectcss.all, sty.section__mvg4O)}>
            <MetoButton
              className={classNames("__wab_instance", sty.metoButton__zdqZz)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jXvj
                  )}
                >
                  {"\u062c\u0633\u062a\u062c\u0648"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.error = "";
                            if (!$state.stateInput.value) {
                              return ($state.error =
                                "لطفا استان مورد نظرت رو انتخاب کن");
                            } else if (!$state.cityInput.value) {
                              return ($state.error =
                                "لطفا شهر مورد نظرت رو انتخاب کن");
                            } else if (!$state.age.value.value) {
                              return ($state.error =
                                "لطفا بازه سنی مورد نظرت رو انتخاب کن");
                            } else if (!$state.sex.value.value) {
                              return ($state.error =
                                "لطفا جنسیت مورد نظرت رو انتخاب کن");
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateBody"] =
                  $state.error == ""
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["body"]
                          },
                          operation: 0,
                          value: {
                            state: $state.stateInput.value,
                            city: $state.cityInput.value,
                            sex: $state.sex.value.value,
                            minAge: $state.age.value.min.toString(),
                            maxAge: $state.age.value.max.toString()
                          }
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateBody"] != null &&
                  typeof $steps["updateBody"] === "object" &&
                  typeof $steps["updateBody"].then === "function"
                ) {
                  $steps["updateBody"] = await $steps["updateBody"];
                }

                $steps["invokeGlobalAction"] =
                  $state.error != ""
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            (() => {
                              try {
                                return $state.error;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            "bottom-center"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["updatePost"] =
                  $state.error == ""
                    ? (() => {
                        const actionArgs = {
                          vgroup: "post",
                          operation: 4,
                          value: "post"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updatePost"] != null &&
                  typeof $steps["updatePost"] === "object" &&
                  typeof $steps["updatePost"].then === "function"
                ) {
                  $steps["updatePost"] = await $steps["updatePost"];
                }
              }}
              size={"extraLarge"}
            />
          </section>
        </Stack__>
      </Reveal>
      <section
        className={classNames(projectcss.all, sty.section__zZgKl, {
          [sty.sectionpost__zZgKLdxBzg]: hasVariant($state, "post", "post")
        })}
      >
        <MetoButton
          className={classNames("__wab_instance", sty.metoButton__sHkMk, {
            [sty.metoButtonpost__sHkMKdxBzg]: hasVariant($state, "post", "post")
          })}
          iconStart={hasVariant($state, "post", "post") ? true : undefined}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ddN0,
                {
                  [sty.textpost__ddN0DxBzg]: hasVariant($state, "post", "post")
                }
              )}
            >
              {hasVariant($state, "post", "post")
                ? "\u062c\u0633\u062a\u062c\u0648 \u0645\u062c\u062f\u062f"
                : "Text"}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["updatePost"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "post",
                    operation: 6,
                    value: "post"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updatePost"] != null &&
              typeof $steps["updatePost"] === "object" &&
              typeof $steps["updatePost"].then === "function"
            ) {
              $steps["updatePost"] = await $steps["updatePost"];
            }
          }}
          roundedFull={hasVariant($state, "post", "post") ? true : undefined}
          size={hasVariant($state, "post", "post") ? "extraLarge" : undefined}
          start={
            <PlasmicIcon__
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              PlasmicIconType={
                hasVariant($state, "post", "post") ? Icon30Icon : CircleIcon
              }
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgpost]: hasVariant($state, "post", "post")
              })}
              role={"img"}
            />
          }
        />
      </section>
      <Reveal
        data-plasmic-name={"slide22"}
        data-plasmic-override={overrides.slide22}
        className={classNames("__wab_instance", sty.slide22, {
          [sty.slide22post]: hasVariant($state, "post", "post")
        })}
        damping={0.1}
        duration={500}
        effect={"fade"}
        reverse={false}
        triggerOnce={true}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nYepY, {
            [sty.freeBoxpost__nYepYdxBzg]: hasVariant($state, "post", "post")
          })}
        >
          <SearchPost
            data-plasmic-name={"searchPost"}
            data-plasmic-override={overrides.searchPost}
            action={"findUser"}
            body={generateStateValueProp($state, ["searchPost", "body"])}
            chat={generateStateValueProp($state, ["searchPost", "chat"])}
            className={classNames("__wab_instance", sty.searchPost, {
              [sty.searchPostpost]: hasVariant($state, "post", "post")
            })}
            controller={"chat"}
            counter={generateStateValueProp($state, ["searchPost", "counter"])}
            filter={generateStateValueProp($state, ["searchPost", "filter"])}
            onBodyChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["searchPost", "body"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onChatChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["searchPost", "chat"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onCounterChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "searchPost",
                "counter"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onCurrentuserChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "searchPost",
                "currentuser"
              ]).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            onFilterChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["searchPost", "filter"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />
        </Stack__>
        <BackHandler
          data-plasmic-name={"backHandler"}
          data-plasmic-override={overrides.backHandler}
          active={hasVariant($state, "post", "post") ? true : false}
          className={classNames("__wab_instance", sty.backHandler, {
            [sty.backHandlerpost]: hasVariant($state, "post", "post")
          })}
          onBack={async () => {
            const $steps = {};

            $steps["updatePost"] = true
              ? (() => {
                  const actionArgs = { vgroup: "post", operation: 6 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }

                    $stateSet($state, vgroup, false);
                    return false;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updatePost"] != null &&
              typeof $steps["updatePost"] === "object" &&
              typeof $steps["updatePost"].then === "function"
            ) {
              $steps["updatePost"] = await $steps["updatePost"];
            }
          }}
        />
      </Reveal>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "slide2",
    "sex",
    "age",
    "stateInput",
    "stateList",
    "cityInput",
    "cityList",
    "svg",
    "slide22",
    "searchPost",
    "backHandler"
  ],
  slide2: [
    "slide2",
    "sex",
    "age",
    "stateInput",
    "stateList",
    "cityInput",
    "cityList"
  ],
  sex: ["sex"],
  age: ["age"],
  stateInput: ["stateInput"],
  stateList: ["stateList"],
  cityInput: ["cityInput"],
  cityList: ["cityList"],
  svg: ["svg"],
  slide22: ["slide22", "searchPost", "backHandler"],
  searchPost: ["searchPost"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  slide2: typeof Reveal;
  sex: typeof MetoRadioGroup;
  age: typeof MetoRadioGroup2;
  stateInput: typeof MetoTextInput;
  stateList: typeof List;
  cityInput: typeof MetoTextInput;
  cityList: typeof List;
  svg: "svg";
  slide22: typeof Reveal;
  searchPost: typeof SearchPost;
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearch__VariantsArgs;
    args?: PlasmicSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearch__ArgProps,
          internalVariantPropNames: PlasmicSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    slide2: makeNodeComponent("slide2"),
    sex: makeNodeComponent("sex"),
    age: makeNodeComponent("age"),
    stateInput: makeNodeComponent("stateInput"),
    stateList: makeNodeComponent("stateList"),
    cityInput: makeNodeComponent("cityInput"),
    cityList: makeNodeComponent("cityList"),
    svg: makeNodeComponent("svg"),
    slide22: makeNodeComponent("slide22"),
    searchPost: makeNodeComponent("searchPost"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
