/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: eklDzLBBF2Fs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicShopItem.module.css"; // plasmic-import: eklDzLBBF2Fs/css

createPlasmicElementProxy;

export type PlasmicShopItem__VariantMembers = {
  select: "select";
};
export type PlasmicShopItem__VariantsArgs = {
  select?: SingleBooleanChoiceArg<"select">;
};
type VariantPropType = keyof PlasmicShopItem__VariantsArgs;
export const PlasmicShopItem__VariantProps = new Array<VariantPropType>(
  "select"
);

export type PlasmicShopItem__ArgsType = {
  currentItem?: any;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicShopItem__ArgsType;
export const PlasmicShopItem__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "onClick"
);

export type PlasmicShopItem__OverridesType = {
  root?: Flex__<"div">;
  metoLabel?: Flex__<typeof MetoLabel>;
  freeBox?: Flex__<"div">;
};

export interface DefaultShopItemProps {
  currentItem?: any;
  onClick?: (event: any) => void;
  select?: SingleBooleanChoiceArg<"select">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopItem__RenderFunc(props: {
  variants: PlasmicShopItem__VariantsArgs;
  args: PlasmicShopItem__ArgsType;
  overrides: PlasmicShopItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          currentItem: {
            id: 48,
            offer: 35,
            text: "\u0645\u0627\u0647\u0627\u0646\u0647: \u06f3\u06f7\u06f9 \u062a\u0648\u0645\u0646",
            selected: 1,
            badge:
              "\u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u062e\u0631\u06cc\u062f",
            bgColor1: "",
            bgColor2: "",
            name: "2 \u0645\u0627\u0647\u0647",
            descc:
              "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
            dialog_descc:
              "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
            type: "sub",
            quantity: 2,
            price: 379000,
            fullPrice: 500000,
            icon: "https://liom.storage.c2.liara.space/ff/v1.png"
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.select
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [sty.rootselect]: hasVariant($state, "select", "select")
        }
      )}
      onClick={args.onClick}
    >
      <MetoLabel
        data-plasmic-name={"metoLabel"}
        data-plasmic-override={overrides.metoLabel}
        className={classNames("__wab_instance", sty.metoLabel, {
          [sty.metoLabelselect]: hasVariant($state, "select", "select")
        })}
        size={"lg"}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jSdGu,
            {
              [sty.textselect__jSdGuvwrVh]: hasVariant(
                $state,
                "select",
                "select"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.currentItem.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Label";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </MetoLabel>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__jknh
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.currentItem.text;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      {(
        hasVariant($state, "select", "select")
          ? (() => {
              try {
                return $props.currentItem?.offer;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wRgHv,
            {
              [sty.textselect__wRgHVvwrVh]: hasVariant(
                $state,
                "select",
                "select"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return `${$props.currentItem.offer}%  تخفیف`;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      ) : null}
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxselect]: hasVariant($state, "select", "select")
        })}
      >
        {(
          hasVariant($state, "select", "select")
            ? (() => {
                try {
                  return $props.currentItem?.badge ? true : false;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : true
        ) ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lZcF7,
              {
                [sty.textselect__lZcF7VwrVh]: hasVariant(
                  $state,
                  "select",
                  "select"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.badge;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "saxasaxsax";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "metoLabel", "freeBox"],
  metoLabel: ["metoLabel"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metoLabel: typeof MetoLabel;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopItem__VariantsArgs;
    args?: PlasmicShopItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopItem__ArgProps,
          internalVariantPropNames: PlasmicShopItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopItem";
  } else {
    func.displayName = `PlasmicShopItem.${nodeName}`;
  }
  return func;
}

export const PlasmicShopItem = Object.assign(
  // Top-level PlasmicShopItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metoLabel: makeNodeComponent("metoLabel"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicShopItem
    internalVariantProps: PlasmicShopItem__VariantProps,
    internalArgProps: PlasmicShopItem__ArgProps
  }
);

export default PlasmicShopItem;
/* prettier-ignore-end */
