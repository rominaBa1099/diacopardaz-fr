/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: kWTQGqg2Dx4y

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoAvatar from "../../MetoAvatar"; // plasmic-import: _gMBtmcmMLtW/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: HXH7JR-ZP-iD/component
import { AntdPopover } from "@plasmicpkgs/antd5/skinny/registerPopover";
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicMetoHeader.module.css"; // plasmic-import: kWTQGqg2Dx4y/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: y8dKN7f6cAcg/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: lJCBcApDldfA/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: VVeQgijoWczy/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: -VPFWWv7xijb/icon

createPlasmicElementProxy;

export type PlasmicMetoHeader__VariantMembers = {
  chat: "chat";
  profile: "profile";
};
export type PlasmicMetoHeader__VariantsArgs = {
  chat?: SingleBooleanChoiceArg<"chat">;
  profile?: SingleBooleanChoiceArg<"profile">;
};
type VariantPropType = keyof PlasmicMetoHeader__VariantsArgs;
export const PlasmicMetoHeader__VariantProps = new Array<VariantPropType>(
  "chat",
  "profile"
);

export type PlasmicMetoHeader__ArgsType = {
  children?: React.ReactNode;
  onClick?: (event: any) => void;
  image?: string;
  block?: (event: any) => void;
  danger?: (event: any) => void;
};
type ArgPropType = keyof PlasmicMetoHeader__ArgsType;
export const PlasmicMetoHeader__ArgProps = new Array<ArgPropType>(
  "children",
  "onClick",
  "image",
  "block",
  "danger"
);

export type PlasmicMetoHeader__OverridesType = {
  root?: Flex__<"div">;
  metoAvatar?: Flex__<typeof MetoAvatar>;
  popover?: Flex__<typeof AntdPopover>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultMetoHeaderProps {
  children?: React.ReactNode;
  onClick?: (event: any) => void;
  image?: string;
  block?: (event: any) => void;
  danger?: (event: any) => void;
  chat?: SingleBooleanChoiceArg<"chat">;
  profile?: SingleBooleanChoiceArg<"profile">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMetoHeader__RenderFunc(props: {
  variants: PlasmicMetoHeader__VariantsArgs;
  args: PlasmicMetoHeader__ArgsType;
  overrides: PlasmicMetoHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "chat",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.chat
      },
      {
        path: "popover.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "chat", "chat") ? false : false
      },
      {
        path: "profile",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.profile
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootchat]: hasVariant($state, "chat", "chat"),
          [sty.rootprofile]: hasVariant($state, "profile", "profile")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___4K8Uy, {
          [sty.freeBoxchat___4K8UyCahcx]: hasVariant($state, "chat", "chat")
        })}
      >
        <ChevronRightIcon
          className={classNames(projectcss.all, sty.svg___1H33C, {
            [sty.svgchat___1H33CCahcx]: hasVariant($state, "chat", "chat"),
            [sty.svgprofile___1H33CxbHW]: hasVariant(
              $state,
              "profile",
              "profile"
            )
          })}
          onClick={args.onClick}
          role={"img"}
        />

        <MetoAvatar
          data-plasmic-name={"metoAvatar"}
          data-plasmic-override={overrides.metoAvatar}
          className={classNames("__wab_instance", sty.metoAvatar, {
            [sty.metoAvatarchat]: hasVariant($state, "chat", "chat")
          })}
          src={(() => {
            try {
              return (() => {
                if (!/\.[^/.]+$/.test($props.image)) {
                  return ($props.image += ".jpg");
                } else {
                  return $props.image;
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        {renderPlasmicSlot({
          defaultContents: (
            <MetoLabel
              className={classNames("__wab_instance", sty.metoLabel__p4SKs)}
              size={"lg"}
            />
          ),

          value: args.children
        })}
      </Stack__>
      <AntdPopover
        data-plasmic-name={"popover"}
        data-plasmic-override={overrides.popover}
        arrow={true}
        className={classNames("__wab_instance", sty.popover, {
          [sty.popoverchat]: hasVariant($state, "chat", "chat")
        })}
        color={
          hasVariant($state, "chat", "chat")
            ? true
              ? "#405380"
              : undefined
            : undefined
        }
        content={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rKxIh, {
              [sty.freeBoxchat__rKxIhCahcx]: hasVariant($state, "chat", "chat")
            })}
          >
            <MetoButton
              className={classNames("__wab_instance", sty.metoButton__zIvdB, {
                [sty.metoButtonchat__zIvdBCahcx]: hasVariant(
                  $state,
                  "chat",
                  "chat"
                )
              })}
              iconStart={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jReFi
                  )}
                >
                  {"\u0628\u0644\u0627\u06a9 \u06a9\u0631\u062f\u0646"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["updatePopoverOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["popover", "open"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePopoverOpen"] != null &&
                  typeof $steps["updatePopoverOpen"] === "object" &&
                  typeof $steps["updatePopoverOpen"].then === "function"
                ) {
                  $steps["updatePopoverOpen"] = await $steps[
                    "updatePopoverOpen"
                  ];
                }

                $steps["updatePopoverOpen2"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["block"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updatePopoverOpen2"] != null &&
                  typeof $steps["updatePopoverOpen2"] === "object" &&
                  typeof $steps["updatePopoverOpen2"].then === "function"
                ) {
                  $steps["updatePopoverOpen2"] = await $steps[
                    "updatePopoverOpen2"
                  ];
                }
              }}
              size={"small"}
              start={
                <Icon33Icon
                  className={classNames(projectcss.all, sty.svg__ooBg9)}
                  role={"img"}
                />
              }
            />

            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml, {
                [sty.embedHtmlchat]: hasVariant($state, "chat", "chat")
              })}
              code={""}
            />

            {(hasVariant($state, "chat", "chat") ? true : false) ? (
              <MetoButton
                className={classNames("__wab_instance", sty.metoButton__eMz0X, {
                  [sty.metoButtonchat__eMz0XCahcx]: hasVariant(
                    $state,
                    "chat",
                    "chat"
                  )
                })}
                iconStart={true}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__riHyB
                    )}
                  >
                    {
                      "\u06af\u0632\u0627\u0631\u0634 \u062f\u0627\u062f\u0646              "
                    }
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updatePopoverOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["popover", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePopoverOpen"] != null &&
                    typeof $steps["updatePopoverOpen"] === "object" &&
                    typeof $steps["updatePopoverOpen"].then === "function"
                  ) {
                    $steps["updatePopoverOpen"] = await $steps[
                      "updatePopoverOpen"
                    ];
                  }

                  $steps["updatePopoverOpen2"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["danger"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updatePopoverOpen2"] != null &&
                    typeof $steps["updatePopoverOpen2"] === "object" &&
                    typeof $steps["updatePopoverOpen2"].then === "function"
                  ) {
                    $steps["updatePopoverOpen2"] = await $steps[
                      "updatePopoverOpen2"
                    ];
                  }
                }}
                size={"small"}
                start={
                  <Icon21Icon
                    className={classNames(projectcss.all, sty.svg___6RYpH)}
                    role={"img"}
                  />
                }
              />
            ) : null}
          </Stack__>
        }
        contentText={"Popover contents"}
        defaultOpen={hasVariant($state, "chat", "chat") ? false : false}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_meto_deign_system_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
        mouseEnterDelay={0}
        mouseLeaveDelay={0}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["popover", "open"]).apply(
            null,
            eventArgs
          );
        }}
        open={generateStateValueProp($state, ["popover", "open"])}
        placement={hasVariant($state, "chat", "chat") ? "bottom" : undefined}
        popoverScopeClassName={sty["popover__popover"]}
        title={null}
        trigger={hasVariant($state, "chat", "chat") ? "click" : undefined}
      >
        {(hasVariant($state, "chat", "chat") ? true : false) ? (
          <Icon8Icon
            className={classNames(projectcss.all, sty.svg__lcu1X, {
              [sty.svgchat__lcu1XCahcx]: hasVariant($state, "chat", "chat")
            })}
            onClick={args.onClick}
            role={"img"}
          />
        ) : null}
      </AntdPopover>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "metoAvatar", "popover", "embedHtml"],
  metoAvatar: ["metoAvatar"],
  popover: ["popover", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metoAvatar: typeof MetoAvatar;
  popover: typeof AntdPopover;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMetoHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMetoHeader__VariantsArgs;
    args?: PlasmicMetoHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMetoHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMetoHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMetoHeader__ArgProps,
          internalVariantPropNames: PlasmicMetoHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMetoHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMetoHeader";
  } else {
    func.displayName = `PlasmicMetoHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicMetoHeader = Object.assign(
  // Top-level PlasmicMetoHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metoAvatar: makeNodeComponent("metoAvatar"),
    popover: makeNodeComponent("popover"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicMetoHeader
    internalVariantProps: PlasmicMetoHeader__VariantProps,
    internalArgProps: PlasmicMetoHeader__ArgProps
  }
);

export default PlasmicMetoHeader;
/* prettier-ignore-end */
