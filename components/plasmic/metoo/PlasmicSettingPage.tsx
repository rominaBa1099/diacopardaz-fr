/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: -uRlja6eTV8U

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: mSKar170aYTo/codeComponent
import MetoHeader from "../../MetoHeader"; // plasmic-import: kWTQGqg2Dx4y/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicSettingPage.module.css"; // plasmic-import: -uRlja6eTV8U/css

createPlasmicElementProxy;

export type PlasmicSettingPage__VariantMembers = {};
export type PlasmicSettingPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSettingPage__VariantsArgs;
export const PlasmicSettingPage__VariantProps = new Array<VariantPropType>();

export type PlasmicSettingPage__ArgsType = {
  selectSetting?: any;
  token?: string;
};
type ArgPropType = keyof PlasmicSettingPage__ArgsType;
export const PlasmicSettingPage__ArgProps = new Array<ArgPropType>(
  "selectSetting",
  "token"
);

export type PlasmicSettingPage__OverridesType = {
  root?: Flex__<"div">;
  apiRequest?: Flex__<typeof ApiRequest>;
  section?: Flex__<"section">;
  metoHeader?: Flex__<typeof MetoHeader>;
  metoLabel?: Flex__<typeof MetoLabel>;
};

export interface DefaultSettingPageProps {
  selectSetting?: any;
  token?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettingPage__RenderFunc(props: {
  variants: PlasmicSettingPage__VariantsArgs;
  args: PlasmicSettingPage__ArgsType;
  overrides: PlasmicSettingPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          selectSetting: {
            text: "\u06a9\u06cc \u0628\u0644\u0627\u06a9\u0645 \u06a9\u0631\u062f\u061f",
            type: "text",
            action: "myBlock",
            premium: true
          },
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiRequest.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "apiRequest.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiRequest"}
        data-plasmic-override={overrides.apiRequest}
        className={classNames("__wab_instance", sty.apiRequest)}
        config={(() => {
          try {
            return {
              headers: {
                appid: "your-app-id",
                Authorization: $props.token,
                "Content-Type": "application/json",
                Version: "1.0"
              }
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                headers: {
                  appid: "your-app-id",
                  Authorization: "Bearer your-token",
                  "Content-Type": "application/json",
                  Version: "1.0"
                }
              };
            }
            throw e;
          }
        })()}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiRequest", "data"]).apply(
            null,
            eventArgs
          );
        }}
        shouldFetch={true}
        url={`https://api.friendschat.ir/chat/${$props.selectSetting.action}`}
      />

      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <MetoHeader
          data-plasmic-name={"metoHeader"}
          data-plasmic-override={overrides.metoHeader}
          className={classNames("__wab_instance", sty.metoHeader)}
        >
          <MetoLabel
            data-plasmic-name={"metoLabel"}
            data-plasmic-override={overrides.metoLabel}
            className={classNames("__wab_instance", sty.metoLabel)}
          />
        </MetoHeader>
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "apiRequest", "section", "metoHeader", "metoLabel"],
  apiRequest: ["apiRequest"],
  section: ["section", "metoHeader", "metoLabel"],
  metoHeader: ["metoHeader", "metoLabel"],
  metoLabel: ["metoLabel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiRequest: typeof ApiRequest;
  section: "section";
  metoHeader: typeof MetoHeader;
  metoLabel: typeof MetoLabel;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettingPage__VariantsArgs;
    args?: PlasmicSettingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettingPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettingPage__ArgProps,
          internalVariantPropNames: PlasmicSettingPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettingPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettingPage";
  } else {
    func.displayName = `PlasmicSettingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSettingPage = Object.assign(
  // Top-level PlasmicSettingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiRequest: makeNodeComponent("apiRequest"),
    section: makeNodeComponent("section"),
    metoHeader: makeNodeComponent("metoHeader"),
    metoLabel: makeNodeComponent("metoLabel"),

    // Metadata about props expected for PlasmicSettingPage
    internalVariantProps: PlasmicSettingPage__VariantProps,
    internalArgProps: PlasmicSettingPage__ArgProps
  }
);

export default PlasmicSettingPage;
/* prettier-ignore-end */
