/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: H2AdtkVzvCjM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import MetoTextInput from "../../MetoTextInput"; // plasmic-import: 5qyh6D0EGyhW/component
import MetoRadioGroup from "../../MetoRadioGroup"; // plasmic-import: vflzMD0cEG1j/component
import List from "../../List"; // plasmic-import: zTdODAOAgstb/component
import MetoButton2 from "../../MetoButton"; // plasmic-import: Cz1go1zIfhZZ/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: SjBUwY_Y_i3-/codeComponent
import MetoHeader from "../../MetoHeader"; // plasmic-import: kWTQGqg2Dx4y/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import UserProfile from "../../UserProfile"; // plasmic-import: 6bHlyAAYDDD1/component
import ChatPage from "../../ChatPage"; // plasmic-import: yuSY12BxVzUt/component
import Footer from "../../Footer"; // plasmic-import: DMJTnGkZeMiz/component
import Main from "../../Main"; // plasmic-import: rrP9wmPRaIEY/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: mSKar170aYTo/codeComponent
import Modal2 from "../../Modal2"; // plasmic-import: b0WRwkBcq6Fa/component
import { DatePickers } from "@/components/DatePickers"; // plasmic-import: iVNUV-RuUt9A/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import ShopModal from "../../ShopModal"; // plasmic-import: -kGhM5VnTq5-/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant
import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicHomePage.module.css"; // plasmic-import: H2AdtkVzvCjM/css

import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import CircleIcon2 from "./icons/PlasmicIcon__Circle"; // plasmic-import: RJhoy2uXebLi/icon
import ChevronDownIcon2 from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: N5pcwqnXvyIA/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: PNl4g-HAg44L/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: dBMGk_1G9adU/icon

createPlasmicElementProxy;

export type PlasmicHomePage__VariantMembers = {
  show: "slide1" | "slide2" | "main";
  selectImage2: "selectImage2";
  editPage: "editPage";
  chatViow: "chatViow";
  shop2: "shop2";
  profile2: "profile2";
};
export type PlasmicHomePage__VariantsArgs = {
  show?: SingleChoiceArg<"slide1" | "slide2" | "main">;
  selectImage2?: SingleBooleanChoiceArg<"selectImage2">;
  editPage?: SingleBooleanChoiceArg<"editPage">;
  chatViow?: SingleBooleanChoiceArg<"chatViow">;
  shop2?: SingleBooleanChoiceArg<"shop2">;
  profile2?: SingleBooleanChoiceArg<"profile2">;
};
type VariantPropType = keyof PlasmicHomePage__VariantsArgs;
export const PlasmicHomePage__VariantProps = new Array<VariantPropType>(
  "show",
  "selectImage2",
  "editPage",
  "chatViow",
  "shop2",
  "profile2"
);

export type PlasmicHomePage__ArgsType = {};
type ArgPropType = keyof PlasmicHomePage__ArgsType;
export const PlasmicHomePage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomePage__OverridesType = {
  root?: Flex__<"div">;
  slide1?: Flex__<typeof Reveal>;
  login1?: Flex__<"div">;
  name?: Flex__<typeof MetoTextInput>;
  birthday?: Flex__<typeof MetoTextInput>;
  gender3?: Flex__<typeof MetoRadioGroup>;
  slide2?: Flex__<typeof Reveal>;
  login12?: Flex__<"div">;
  stateInput?: Flex__<typeof MetoTextInput>;
  stateList?: Flex__<typeof List>;
  cityInput?: Flex__<typeof MetoTextInput>;
  cityList?: Flex__<typeof List>;
  addres?: Flex__<typeof MetoTextInput>;
  next?: Flex__<typeof MetoButton2>;
  selectImage?: Flex__<typeof Reveal>;
  img?: Flex__<typeof PlasmicImg__>;
  sendImage?: Flex__<typeof MetoButton2>;
  embedHtml?: Flex__<typeof Embed>;
  profile?: Flex__<typeof Reveal>;
  userProfile?: Flex__<typeof UserProfile>;
  edit?: Flex__<typeof Reveal>;
  editName?: Flex__<typeof MetoTextInput>;
  bio?: Flex__<typeof MetoTextInput>;
  birthday3?: Flex__<typeof MetoTextInput>;
  radioGroup?: Flex__<typeof MetoRadioGroup>;
  stateInput2?: Flex__<typeof MetoTextInput>;
  stateList2?: Flex__<typeof List>;
  cityInput2?: Flex__<typeof MetoTextInput>;
  cityList2?: Flex__<typeof List>;
  addres2?: Flex__<typeof MetoTextInput>;
  editProfile?: Flex__<typeof MetoButton2>;
  chatViow2?: Flex__<typeof Reveal>;
  chatPage?: Flex__<typeof ChatPage>;
  footer?: Flex__<typeof Footer>;
  main?: Flex__<typeof Main>;
  stateApi?: Flex__<typeof ApiRequest>;
  cityApi?: Flex__<typeof ApiRequest>;
  modal?: Flex__<typeof Modal2>;
  datePickers?: Flex__<typeof DatePickers>;
  sideEffect?: Flex__<typeof SideEffect>;
  shop?: Flex__<typeof ApiRequest>;
  shopModal?: Flex__<typeof ShopModal>;
  splash2?: Flex__<"div">;
  noNet?: Flex__<"div">;
  lottie?: Flex__<typeof LottieWrapper>;
  button?: Flex__<typeof MetoButton2>;
};

export interface DefaultHomePageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomePage__RenderFunc(props: {
  variants: PlasmicHomePage__VariantsArgs;
  args: PlasmicHomePage__ArgsType;
  overrides: PlasmicHomePage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "show",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.show
      },
      {
        path: "url",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "footer.selectFooter",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => "dating"
      },
      {
        path: "stateList.openList",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? false
            : hasVariant($state, "show", "slide2")
            ? false
            : true
      },
      {
        path: "stateList.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "stateApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cityApi.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cityApi.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cityApi.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cityList.openList",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? false
            : hasVariant($state, "show", "slide2")
            ? false
            : true
      },
      {
        path: "cityList.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.stateApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 1,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                        },
                        {
                          id: 2,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                        },
                        {
                          id: 3,
                          title: "\u0627\u0631\u062f\u0628\u06cc\u0644"
                        },
                        {
                          id: 4,
                          title: "\u0627\u0635\u0641\u0647\u0627\u0646"
                        },
                        { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                        { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                        { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                        { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                        {
                          id: 9,
                          title:
                            "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                        },
                        {
                          id: 10,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                        },
                        {
                          id: 11,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                        },
                        {
                          id: 12,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                        },
                        {
                          id: 13,
                          title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                        },
                        { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                        { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                        {
                          id: 16,
                          title:
                            "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                        },
                        { id: 17, title: "\u0641\u0627\u0631\u0633" },
                        { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                        { id: 19, title: "\u0642\u0645" },
                        {
                          id: 20,
                          title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                        },
                        { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                        {
                          id: 22,
                          title:
                            "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                        },
                        {
                          id: 23,
                          title:
                            "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 24,
                          title: "\u06af\u0644\u0633\u062a\u0627\u0646"
                        },
                        { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                        {
                          id: 26,
                          title: "\u0644\u0631\u0633\u062a\u0627\u0646"
                        },
                        {
                          id: 27,
                          title:
                            "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                        },
                        { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                        {
                          id: 29,
                          title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                        },
                        { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                        { id: 31, title: "\u06cc\u0632\u062f" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "show", "slide2")
            ? (() => {
                try {
                  return $state.stateApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 1,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                        },
                        {
                          id: 2,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                        },
                        {
                          id: 3,
                          title: "\u0627\u0631\u062f\u0628\u06cc\u0644"
                        },
                        {
                          id: 4,
                          title: "\u0627\u0635\u0641\u0647\u0627\u0646"
                        },
                        { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                        { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                        { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                        { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                        {
                          id: 9,
                          title:
                            "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                        },
                        {
                          id: 10,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                        },
                        {
                          id: 11,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                        },
                        {
                          id: 12,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                        },
                        {
                          id: 13,
                          title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                        },
                        { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                        { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                        {
                          id: 16,
                          title:
                            "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                        },
                        { id: 17, title: "\u0641\u0627\u0631\u0633" },
                        { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                        { id: 19, title: "\u0642\u0645" },
                        {
                          id: 20,
                          title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                        },
                        { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                        {
                          id: 22,
                          title:
                            "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                        },
                        {
                          id: 23,
                          title:
                            "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 24,
                          title: "\u06af\u0644\u0633\u062a\u0627\u0646"
                        },
                        { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                        {
                          id: 26,
                          title: "\u0644\u0631\u0633\u062a\u0627\u0646"
                        },
                        {
                          id: 27,
                          title:
                            "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                        },
                        { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                        {
                          id: 29,
                          title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                        },
                        { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                        { id: 31, title: "\u06cc\u0632\u062f" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : {
                list: [
                  {
                    id: 1,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                  },
                  {
                    id: 2,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                  },
                  { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
                  { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
                  { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                  { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                  { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                  { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                  {
                    id: 9,
                    title:
                      "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                  },
                  {
                    id: 10,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                  },
                  {
                    id: 11,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                  },
                  {
                    id: 12,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                  },
                  {
                    id: 13,
                    title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                  },
                  { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                  { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                  {
                    id: 16,
                    title:
                      "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                  },
                  { id: 17, title: "\u0641\u0627\u0631\u0633" },
                  { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                  { id: 19, title: "\u0642\u0645" },
                  {
                    id: 20,
                    title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                  },
                  { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                  {
                    id: 22,
                    title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                  },
                  {
                    id: 23,
                    title:
                      "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                  },
                  { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
                  { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                  { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
                  {
                    id: 27,
                    title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                  },
                  { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                  {
                    id: 29,
                    title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                  },
                  { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                  { id: 31, title: "\u06cc\u0632\u062f" }
                ]
              }
      },
      {
        path: "cityList.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.cityApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 68,
                          title: "\u0622\u0628\u0634 \u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 32,
                          title: "\u0622\u0630\u0631\u0634\u0647\u0631"
                        },
                        { id: 80, title: "\u0622\u0642\u06a9\u0646\u062f" },
                        { id: 81, title: "\u0627\u0686\u0627\u0686\u06cc" },
                        { id: 36, title: "\u0627\u0633\u06a9\u0648" },
                        { id: 39, title: "\u0627\u0647\u0631" },
                        {
                          id: 37,
                          title: "\u0627\u06cc\u0644\u062e\u0686\u06cc"
                        },
                        {
                          id: 44,
                          title: "\u0628\u0627\u0633\u0645\u0646\u062c"
                        },
                        {
                          id: 87,
                          title: "\u0628\u062e\u0634\u0627\u06cc\u0634"
                        },
                        {
                          id: 41,
                          title:
                            "\u0628\u0633\u062a\u0627\u0646 \u0622\u0628\u0627\u062f"
                        },
                        { id: 43, title: "\u0628\u0646\u0627\u0628" },
                        {
                          id: 72,
                          title:
                            "\u0628\u0646\u0627\u0628 \u0645\u0631\u0646\u062f"
                        },
                        { id: 45, title: "\u062a\u0628\u0631\u06cc\u0632" },
                        { id: 82, title: "\u062a\u0631\u06a9" },
                        {
                          id: 83,
                          title:
                            "\u062a\u0631\u06a9\u0645\u0627\u0646\u0686\u0627\u06cc"
                        },
                        { id: 57, title: "\u062a\u0633\u0648\u062c" },
                        {
                          id: 42,
                          title:
                            "\u062a\u06cc\u06a9\u0645\u0647 \u062f\u0627\u0634"
                        },
                        {
                          id: 33,
                          title: "\u062a\u06cc\u0645\u0648\u0631\u0644\u0648"
                        },
                        { id: 48, title: "\u062c\u0644\u0641\u0627" },
                        {
                          id: 66,
                          title:
                            "\u062c\u0648\u0627\u0646 \u0642\u0644\u0639\u0647"
                        },
                        {
                          id: 85,
                          title: "\u062e\u0627\u0631\u0648\u0627\u0646\u0627"
                        },
                        { id: 58, title: "\u062e\u0627\u0645\u0646\u0647" },
                        {
                          id: 70,
                          title:
                            "\u062e\u062f\u0627\u062c\u0648(\u062e\u0631\u0627\u062c\u0648)"
                        },
                        {
                          id: 46,
                          title: "\u062e\u0633\u0631\u0648\u0634\u0627\u0647"
                        },
                        {
                          id: 52,
                          title: "\u062e\u0645\u0627\u0631\u0644\u0648"
                        },
                        { id: 88, title: "\u062e\u0648\u0627\u062c\u0647" },
                        {
                          id: 53,
                          title:
                            "\u062f\u0648\u0632\u062f\u0648\u0632\u0627\u0646"
                        },
                        { id: 89, title: "\u0632\u0631\u0646\u0642" },
                        { id: 73, title: "\u0632\u0646\u0648\u0632" },
                        { id: 54, title: "\u0633\u0631\u0627\u0628" },
                        {
                          id: 47,
                          title: "\u0633\u0631\u062f\u0631\u0648\u062f"
                        },
                        { id: 38, title: "\u0633\u0647\u0646\u062f" },
                        { id: 59, title: "\u0633\u06cc\u0633" },
                        {
                          id: 49,
                          title: "\u0633\u06cc\u0647 \u0631\u0648\u062f"
                        },
                        { id: 60, title: "\u0634\u0628\u0633\u062a\u0631" },
                        {
                          id: 55,
                          title: "\u0634\u0631\u0628\u06cc\u0627\u0646"
                        },
                        {
                          id: 61,
                          title: "\u0634\u0631\u0641\u062e\u0627\u0646\u0647"
                        },
                        {
                          id: 62,
                          title: "\u0634\u0646\u062f\u0622\u0628\u0627\u062f"
                        },
                        {
                          id: 63,
                          title: "\u0635\u0648\u0641\u06cc\u0627\u0646"
                        },
                        {
                          id: 67,
                          title: "\u0639\u062c\u0628 \u0634\u06cc\u0631"
                        },
                        {
                          id: 51,
                          title: "\u0642\u0631\u0647 \u0622\u063a\u0627\u062c"
                        },
                        {
                          id: 74,
                          title: "\u06a9\u0634\u06a9\u0633\u0631\u0627\u06cc"
                        },
                        {
                          id: 90,
                          title: "\u06a9\u0644\u0648\u0627\u0646\u0642"
                        },
                        { id: 69, title: "\u06a9\u0644\u06cc\u0628\u0631" },
                        {
                          id: 64,
                          title:
                            "\u06a9\u0648\u0632\u0647 \u06a9\u0646\u0627\u0646"
                        },
                        { id: 34, title: "\u06af\u0648\u06af\u0627\u0646" },
                        { id: 77, title: "\u0644\u06cc\u0644\u0627\u0646" },
                        {
                          id: 78,
                          title:
                            "\u0645\u0628\u0627\u0631\u06a9 \u0634\u0647\u0631"
                        },
                        { id: 71, title: "\u0645\u0631\u0627\u063a\u0647" },
                        { id: 75, title: "\u0645\u0631\u0646\u062f" },
                        { id: 79, title: "\u0645\u0644\u06a9\u0627\u0646" },
                        { id: 35, title: "\u0645\u0645\u0642\u0627\u0646" },
                        {
                          id: 56,
                          title: "\u0645\u0647\u0631\u0628\u0627\u0646"
                        },
                        { id: 84, title: "\u0645\u06cc\u0627\u0646\u0647" },
                        {
                          id: 92,
                          title:
                            "\u0646\u0638\u0631\u06a9\u0647\u0631\u06cc\u0632\u06cc"
                        },
                        {
                          id: 50,
                          title: "\u0647\u0627\u062f\u06cc\u0634\u0647\u0631"
                        },
                        { id: 91, title: "\u0647\u0631\u06cc\u0633" },
                        {
                          id: 93,
                          title: "\u0647\u0634\u062a\u0631\u0648\u062f"
                        },
                        {
                          id: 40,
                          title: "\u0647\u0648\u0631\u0627\u0646\u062f"
                        },
                        {
                          id: 65,
                          title: "\u0648\u0627\u06cc\u0642\u0627\u0646"
                        },
                        {
                          id: 86,
                          title: "\u0648\u0631\u0632\u0642\u0627\u0646"
                        },
                        { id: 76, title: "\u06cc\u0627\u0645\u0686\u06cc" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "show", "slide2")
            ? (() => {
                try {
                  return $state.cityApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 68,
                          title: "\u0622\u0628\u0634 \u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 32,
                          title: "\u0622\u0630\u0631\u0634\u0647\u0631"
                        },
                        { id: 80, title: "\u0622\u0642\u06a9\u0646\u062f" },
                        { id: 81, title: "\u0627\u0686\u0627\u0686\u06cc" },
                        { id: 36, title: "\u0627\u0633\u06a9\u0648" },
                        { id: 39, title: "\u0627\u0647\u0631" },
                        {
                          id: 37,
                          title: "\u0627\u06cc\u0644\u062e\u0686\u06cc"
                        },
                        {
                          id: 44,
                          title: "\u0628\u0627\u0633\u0645\u0646\u062c"
                        },
                        {
                          id: 87,
                          title: "\u0628\u062e\u0634\u0627\u06cc\u0634"
                        },
                        {
                          id: 41,
                          title:
                            "\u0628\u0633\u062a\u0627\u0646 \u0622\u0628\u0627\u062f"
                        },
                        { id: 43, title: "\u0628\u0646\u0627\u0628" },
                        {
                          id: 72,
                          title:
                            "\u0628\u0646\u0627\u0628 \u0645\u0631\u0646\u062f"
                        },
                        { id: 45, title: "\u062a\u0628\u0631\u06cc\u0632" },
                        { id: 82, title: "\u062a\u0631\u06a9" },
                        {
                          id: 83,
                          title:
                            "\u062a\u0631\u06a9\u0645\u0627\u0646\u0686\u0627\u06cc"
                        },
                        { id: 57, title: "\u062a\u0633\u0648\u062c" },
                        {
                          id: 42,
                          title:
                            "\u062a\u06cc\u06a9\u0645\u0647 \u062f\u0627\u0634"
                        },
                        {
                          id: 33,
                          title: "\u062a\u06cc\u0645\u0648\u0631\u0644\u0648"
                        },
                        { id: 48, title: "\u062c\u0644\u0641\u0627" },
                        {
                          id: 66,
                          title:
                            "\u062c\u0648\u0627\u0646 \u0642\u0644\u0639\u0647"
                        },
                        {
                          id: 85,
                          title: "\u062e\u0627\u0631\u0648\u0627\u0646\u0627"
                        },
                        { id: 58, title: "\u062e\u0627\u0645\u0646\u0647" },
                        {
                          id: 70,
                          title:
                            "\u062e\u062f\u0627\u062c\u0648(\u062e\u0631\u0627\u062c\u0648)"
                        },
                        {
                          id: 46,
                          title: "\u062e\u0633\u0631\u0648\u0634\u0627\u0647"
                        },
                        {
                          id: 52,
                          title: "\u062e\u0645\u0627\u0631\u0644\u0648"
                        },
                        { id: 88, title: "\u062e\u0648\u0627\u062c\u0647" },
                        {
                          id: 53,
                          title:
                            "\u062f\u0648\u0632\u062f\u0648\u0632\u0627\u0646"
                        },
                        { id: 89, title: "\u0632\u0631\u0646\u0642" },
                        { id: 73, title: "\u0632\u0646\u0648\u0632" },
                        { id: 54, title: "\u0633\u0631\u0627\u0628" },
                        {
                          id: 47,
                          title: "\u0633\u0631\u062f\u0631\u0648\u062f"
                        },
                        { id: 38, title: "\u0633\u0647\u0646\u062f" },
                        { id: 59, title: "\u0633\u06cc\u0633" },
                        {
                          id: 49,
                          title: "\u0633\u06cc\u0647 \u0631\u0648\u062f"
                        },
                        { id: 60, title: "\u0634\u0628\u0633\u062a\u0631" },
                        {
                          id: 55,
                          title: "\u0634\u0631\u0628\u06cc\u0627\u0646"
                        },
                        {
                          id: 61,
                          title: "\u0634\u0631\u0641\u062e\u0627\u0646\u0647"
                        },
                        {
                          id: 62,
                          title: "\u0634\u0646\u062f\u0622\u0628\u0627\u062f"
                        },
                        {
                          id: 63,
                          title: "\u0635\u0648\u0641\u06cc\u0627\u0646"
                        },
                        {
                          id: 67,
                          title: "\u0639\u062c\u0628 \u0634\u06cc\u0631"
                        },
                        {
                          id: 51,
                          title: "\u0642\u0631\u0647 \u0622\u063a\u0627\u062c"
                        },
                        {
                          id: 74,
                          title: "\u06a9\u0634\u06a9\u0633\u0631\u0627\u06cc"
                        },
                        {
                          id: 90,
                          title: "\u06a9\u0644\u0648\u0627\u0646\u0642"
                        },
                        { id: 69, title: "\u06a9\u0644\u06cc\u0628\u0631" },
                        {
                          id: 64,
                          title:
                            "\u06a9\u0648\u0632\u0647 \u06a9\u0646\u0627\u0646"
                        },
                        { id: 34, title: "\u06af\u0648\u06af\u0627\u0646" },
                        { id: 77, title: "\u0644\u06cc\u0644\u0627\u0646" },
                        {
                          id: 78,
                          title:
                            "\u0645\u0628\u0627\u0631\u06a9 \u0634\u0647\u0631"
                        },
                        { id: 71, title: "\u0645\u0631\u0627\u063a\u0647" },
                        { id: 75, title: "\u0645\u0631\u0646\u062f" },
                        { id: 79, title: "\u0645\u0644\u06a9\u0627\u0646" },
                        { id: 35, title: "\u0645\u0645\u0642\u0627\u0646" },
                        {
                          id: 56,
                          title: "\u0645\u0647\u0631\u0628\u0627\u0646"
                        },
                        { id: 84, title: "\u0645\u06cc\u0627\u0646\u0647" },
                        {
                          id: 92,
                          title:
                            "\u0646\u0638\u0631\u06a9\u0647\u0631\u06cc\u0632\u06cc"
                        },
                        {
                          id: 50,
                          title: "\u0647\u0627\u062f\u06cc\u0634\u0647\u0631"
                        },
                        { id: 91, title: "\u0647\u0631\u06cc\u0633" },
                        {
                          id: 93,
                          title: "\u0647\u0634\u062a\u0631\u0648\u062f"
                        },
                        {
                          id: 40,
                          title: "\u0647\u0648\u0631\u0627\u0646\u062f"
                        },
                        {
                          id: 65,
                          title: "\u0648\u0627\u06cc\u0642\u0627\u0646"
                        },
                        {
                          id: 86,
                          title: "\u0648\u0631\u0632\u0642\u0627\u0646"
                        },
                        { id: 76, title: "\u06cc\u0627\u0645\u0686\u06cc" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : {
                list: [
                  {
                    id: 1,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                  },
                  {
                    id: 2,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                  },
                  { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
                  { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
                  { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                  { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                  { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                  { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                  {
                    id: 9,
                    title:
                      "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                  },
                  {
                    id: 10,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                  },
                  {
                    id: 11,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                  },
                  {
                    id: 12,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                  },
                  {
                    id: 13,
                    title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                  },
                  { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                  { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                  {
                    id: 16,
                    title:
                      "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                  },
                  { id: 17, title: "\u0641\u0627\u0631\u0633" },
                  { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                  { id: 19, title: "\u0642\u0645" },
                  {
                    id: 20,
                    title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                  },
                  { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                  {
                    id: 22,
                    title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                  },
                  {
                    id: 23,
                    title:
                      "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                  },
                  { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
                  { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                  { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
                  {
                    id: 27,
                    title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                  },
                  { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                  {
                    id: 29,
                    title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                  },
                  { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                  { id: 31, title: "\u06cc\u0632\u062f" }
                ]
              }
      },
      {
        path: "birthday2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userInfo.userInfo.birthdayDate;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "selectImage2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selectImage2
      },
      {
        path: "imageurl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userInfo?.userInfo.profilePic || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "birthday.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "modal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "datePickers.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "stateInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "cityInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "addres.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "age",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userInfo.userInfo.age || 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "token",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "editName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.userInfo.userInfo.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "birthday3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return (() => {
                    if ($state.birthday2) {
                      const date = new Date($state.birthday2);
                      const options = {
                        year: "numeric",
                        month: "long",
                        day: "numeric"
                      };
                      return date.toLocaleDateString(
                        "fa-IR-u-ca-persian",
                        options
                      );
                    }
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ``
      },
      {
        path: "stateInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.userInfo.userInfo.state;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined
      },
      {
        path: "stateList2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.stateApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 1,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                        },
                        {
                          id: 2,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                        },
                        {
                          id: 3,
                          title: "\u0627\u0631\u062f\u0628\u06cc\u0644"
                        },
                        {
                          id: 4,
                          title: "\u0627\u0635\u0641\u0647\u0627\u0646"
                        },
                        { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                        { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                        { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                        { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                        {
                          id: 9,
                          title:
                            "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                        },
                        {
                          id: 10,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                        },
                        {
                          id: 11,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                        },
                        {
                          id: 12,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                        },
                        {
                          id: 13,
                          title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                        },
                        { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                        { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                        {
                          id: 16,
                          title:
                            "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                        },
                        { id: 17, title: "\u0641\u0627\u0631\u0633" },
                        { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                        { id: 19, title: "\u0642\u0645" },
                        {
                          id: 20,
                          title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                        },
                        { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                        {
                          id: 22,
                          title:
                            "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                        },
                        {
                          id: 23,
                          title:
                            "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 24,
                          title: "\u06af\u0644\u0633\u062a\u0627\u0646"
                        },
                        { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                        {
                          id: 26,
                          title: "\u0644\u0631\u0633\u062a\u0627\u0646"
                        },
                        {
                          id: 27,
                          title:
                            "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                        },
                        { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                        {
                          id: 29,
                          title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                        },
                        { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                        { id: 31, title: "\u06cc\u0632\u062f" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "show", "slide2")
            ? (() => {
                try {
                  return $state.stateApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 1,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                        },
                        {
                          id: 2,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                        },
                        {
                          id: 3,
                          title: "\u0627\u0631\u062f\u0628\u06cc\u0644"
                        },
                        {
                          id: 4,
                          title: "\u0627\u0635\u0641\u0647\u0627\u0646"
                        },
                        { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                        { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                        { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                        { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                        {
                          id: 9,
                          title:
                            "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                        },
                        {
                          id: 10,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                        },
                        {
                          id: 11,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                        },
                        {
                          id: 12,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                        },
                        {
                          id: 13,
                          title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                        },
                        { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                        { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                        {
                          id: 16,
                          title:
                            "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                        },
                        { id: 17, title: "\u0641\u0627\u0631\u0633" },
                        { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                        { id: 19, title: "\u0642\u0645" },
                        {
                          id: 20,
                          title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                        },
                        { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                        {
                          id: 22,
                          title:
                            "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                        },
                        {
                          id: 23,
                          title:
                            "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 24,
                          title: "\u06af\u0644\u0633\u062a\u0627\u0646"
                        },
                        { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                        {
                          id: 26,
                          title: "\u0644\u0631\u0633\u062a\u0627\u0646"
                        },
                        {
                          id: 27,
                          title:
                            "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                        },
                        { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                        {
                          id: 29,
                          title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                        },
                        { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                        { id: 31, title: "\u06cc\u0632\u062f" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : {
                list: [
                  {
                    id: 1,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                  },
                  {
                    id: 2,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                  },
                  { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
                  { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
                  { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                  { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                  { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                  { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                  {
                    id: 9,
                    title:
                      "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                  },
                  {
                    id: 10,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                  },
                  {
                    id: 11,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                  },
                  {
                    id: 12,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                  },
                  {
                    id: 13,
                    title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                  },
                  { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                  { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                  {
                    id: 16,
                    title:
                      "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                  },
                  { id: 17, title: "\u0641\u0627\u0631\u0633" },
                  { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                  { id: 19, title: "\u0642\u0645" },
                  {
                    id: 20,
                    title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                  },
                  { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                  {
                    id: 22,
                    title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                  },
                  {
                    id: 23,
                    title:
                      "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                  },
                  { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
                  { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                  { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
                  {
                    id: 27,
                    title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                  },
                  { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                  {
                    id: 29,
                    title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                  },
                  { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                  { id: 31, title: "\u06cc\u0632\u062f" }
                ]
              }
      },
      {
        path: "stateList2.openList",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? false
            : hasVariant($state, "show", "slide2")
            ? false
            : true
      },
      {
        path: "stateList2.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "cityInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.userInfo.userInfo.city;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ``
      },
      {
        path: "cityList2.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.cityApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 68,
                          title: "\u0622\u0628\u0634 \u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 32,
                          title: "\u0622\u0630\u0631\u0634\u0647\u0631"
                        },
                        { id: 80, title: "\u0622\u0642\u06a9\u0646\u062f" },
                        { id: 81, title: "\u0627\u0686\u0627\u0686\u06cc" },
                        { id: 36, title: "\u0627\u0633\u06a9\u0648" },
                        { id: 39, title: "\u0627\u0647\u0631" },
                        {
                          id: 37,
                          title: "\u0627\u06cc\u0644\u062e\u0686\u06cc"
                        },
                        {
                          id: 44,
                          title: "\u0628\u0627\u0633\u0645\u0646\u062c"
                        },
                        {
                          id: 87,
                          title: "\u0628\u062e\u0634\u0627\u06cc\u0634"
                        },
                        {
                          id: 41,
                          title:
                            "\u0628\u0633\u062a\u0627\u0646 \u0622\u0628\u0627\u062f"
                        },
                        { id: 43, title: "\u0628\u0646\u0627\u0628" },
                        {
                          id: 72,
                          title:
                            "\u0628\u0646\u0627\u0628 \u0645\u0631\u0646\u062f"
                        },
                        { id: 45, title: "\u062a\u0628\u0631\u06cc\u0632" },
                        { id: 82, title: "\u062a\u0631\u06a9" },
                        {
                          id: 83,
                          title:
                            "\u062a\u0631\u06a9\u0645\u0627\u0646\u0686\u0627\u06cc"
                        },
                        { id: 57, title: "\u062a\u0633\u0648\u062c" },
                        {
                          id: 42,
                          title:
                            "\u062a\u06cc\u06a9\u0645\u0647 \u062f\u0627\u0634"
                        },
                        {
                          id: 33,
                          title: "\u062a\u06cc\u0645\u0648\u0631\u0644\u0648"
                        },
                        { id: 48, title: "\u062c\u0644\u0641\u0627" },
                        {
                          id: 66,
                          title:
                            "\u062c\u0648\u0627\u0646 \u0642\u0644\u0639\u0647"
                        },
                        {
                          id: 85,
                          title: "\u062e\u0627\u0631\u0648\u0627\u0646\u0627"
                        },
                        { id: 58, title: "\u062e\u0627\u0645\u0646\u0647" },
                        {
                          id: 70,
                          title:
                            "\u062e\u062f\u0627\u062c\u0648(\u062e\u0631\u0627\u062c\u0648)"
                        },
                        {
                          id: 46,
                          title: "\u062e\u0633\u0631\u0648\u0634\u0627\u0647"
                        },
                        {
                          id: 52,
                          title: "\u062e\u0645\u0627\u0631\u0644\u0648"
                        },
                        { id: 88, title: "\u062e\u0648\u0627\u062c\u0647" },
                        {
                          id: 53,
                          title:
                            "\u062f\u0648\u0632\u062f\u0648\u0632\u0627\u0646"
                        },
                        { id: 89, title: "\u0632\u0631\u0646\u0642" },
                        { id: 73, title: "\u0632\u0646\u0648\u0632" },
                        { id: 54, title: "\u0633\u0631\u0627\u0628" },
                        {
                          id: 47,
                          title: "\u0633\u0631\u062f\u0631\u0648\u062f"
                        },
                        { id: 38, title: "\u0633\u0647\u0646\u062f" },
                        { id: 59, title: "\u0633\u06cc\u0633" },
                        {
                          id: 49,
                          title: "\u0633\u06cc\u0647 \u0631\u0648\u062f"
                        },
                        { id: 60, title: "\u0634\u0628\u0633\u062a\u0631" },
                        {
                          id: 55,
                          title: "\u0634\u0631\u0628\u06cc\u0627\u0646"
                        },
                        {
                          id: 61,
                          title: "\u0634\u0631\u0641\u062e\u0627\u0646\u0647"
                        },
                        {
                          id: 62,
                          title: "\u0634\u0646\u062f\u0622\u0628\u0627\u062f"
                        },
                        {
                          id: 63,
                          title: "\u0635\u0648\u0641\u06cc\u0627\u0646"
                        },
                        {
                          id: 67,
                          title: "\u0639\u062c\u0628 \u0634\u06cc\u0631"
                        },
                        {
                          id: 51,
                          title: "\u0642\u0631\u0647 \u0622\u063a\u0627\u062c"
                        },
                        {
                          id: 74,
                          title: "\u06a9\u0634\u06a9\u0633\u0631\u0627\u06cc"
                        },
                        {
                          id: 90,
                          title: "\u06a9\u0644\u0648\u0627\u0646\u0642"
                        },
                        { id: 69, title: "\u06a9\u0644\u06cc\u0628\u0631" },
                        {
                          id: 64,
                          title:
                            "\u06a9\u0648\u0632\u0647 \u06a9\u0646\u0627\u0646"
                        },
                        { id: 34, title: "\u06af\u0648\u06af\u0627\u0646" },
                        { id: 77, title: "\u0644\u06cc\u0644\u0627\u0646" },
                        {
                          id: 78,
                          title:
                            "\u0645\u0628\u0627\u0631\u06a9 \u0634\u0647\u0631"
                        },
                        { id: 71, title: "\u0645\u0631\u0627\u063a\u0647" },
                        { id: 75, title: "\u0645\u0631\u0646\u062f" },
                        { id: 79, title: "\u0645\u0644\u06a9\u0627\u0646" },
                        { id: 35, title: "\u0645\u0645\u0642\u0627\u0646" },
                        {
                          id: 56,
                          title: "\u0645\u0647\u0631\u0628\u0627\u0646"
                        },
                        { id: 84, title: "\u0645\u06cc\u0627\u0646\u0647" },
                        {
                          id: 92,
                          title:
                            "\u0646\u0638\u0631\u06a9\u0647\u0631\u06cc\u0632\u06cc"
                        },
                        {
                          id: 50,
                          title: "\u0647\u0627\u062f\u06cc\u0634\u0647\u0631"
                        },
                        { id: 91, title: "\u0647\u0631\u06cc\u0633" },
                        {
                          id: 93,
                          title: "\u0647\u0634\u062a\u0631\u0648\u062f"
                        },
                        {
                          id: 40,
                          title: "\u0647\u0648\u0631\u0627\u0646\u062f"
                        },
                        {
                          id: 65,
                          title: "\u0648\u0627\u06cc\u0642\u0627\u0646"
                        },
                        {
                          id: 86,
                          title: "\u0648\u0631\u0632\u0642\u0627\u0646"
                        },
                        { id: 76, title: "\u06cc\u0627\u0645\u0686\u06cc" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "show", "slide2")
            ? (() => {
                try {
                  return $state.cityApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 68,
                          title: "\u0622\u0628\u0634 \u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 32,
                          title: "\u0622\u0630\u0631\u0634\u0647\u0631"
                        },
                        { id: 80, title: "\u0622\u0642\u06a9\u0646\u062f" },
                        { id: 81, title: "\u0627\u0686\u0627\u0686\u06cc" },
                        { id: 36, title: "\u0627\u0633\u06a9\u0648" },
                        { id: 39, title: "\u0627\u0647\u0631" },
                        {
                          id: 37,
                          title: "\u0627\u06cc\u0644\u062e\u0686\u06cc"
                        },
                        {
                          id: 44,
                          title: "\u0628\u0627\u0633\u0645\u0646\u062c"
                        },
                        {
                          id: 87,
                          title: "\u0628\u062e\u0634\u0627\u06cc\u0634"
                        },
                        {
                          id: 41,
                          title:
                            "\u0628\u0633\u062a\u0627\u0646 \u0622\u0628\u0627\u062f"
                        },
                        { id: 43, title: "\u0628\u0646\u0627\u0628" },
                        {
                          id: 72,
                          title:
                            "\u0628\u0646\u0627\u0628 \u0645\u0631\u0646\u062f"
                        },
                        { id: 45, title: "\u062a\u0628\u0631\u06cc\u0632" },
                        { id: 82, title: "\u062a\u0631\u06a9" },
                        {
                          id: 83,
                          title:
                            "\u062a\u0631\u06a9\u0645\u0627\u0646\u0686\u0627\u06cc"
                        },
                        { id: 57, title: "\u062a\u0633\u0648\u062c" },
                        {
                          id: 42,
                          title:
                            "\u062a\u06cc\u06a9\u0645\u0647 \u062f\u0627\u0634"
                        },
                        {
                          id: 33,
                          title: "\u062a\u06cc\u0645\u0648\u0631\u0644\u0648"
                        },
                        { id: 48, title: "\u062c\u0644\u0641\u0627" },
                        {
                          id: 66,
                          title:
                            "\u062c\u0648\u0627\u0646 \u0642\u0644\u0639\u0647"
                        },
                        {
                          id: 85,
                          title: "\u062e\u0627\u0631\u0648\u0627\u0646\u0627"
                        },
                        { id: 58, title: "\u062e\u0627\u0645\u0646\u0647" },
                        {
                          id: 70,
                          title:
                            "\u062e\u062f\u0627\u062c\u0648(\u062e\u0631\u0627\u062c\u0648)"
                        },
                        {
                          id: 46,
                          title: "\u062e\u0633\u0631\u0648\u0634\u0627\u0647"
                        },
                        {
                          id: 52,
                          title: "\u062e\u0645\u0627\u0631\u0644\u0648"
                        },
                        { id: 88, title: "\u062e\u0648\u0627\u062c\u0647" },
                        {
                          id: 53,
                          title:
                            "\u062f\u0648\u0632\u062f\u0648\u0632\u0627\u0646"
                        },
                        { id: 89, title: "\u0632\u0631\u0646\u0642" },
                        { id: 73, title: "\u0632\u0646\u0648\u0632" },
                        { id: 54, title: "\u0633\u0631\u0627\u0628" },
                        {
                          id: 47,
                          title: "\u0633\u0631\u062f\u0631\u0648\u062f"
                        },
                        { id: 38, title: "\u0633\u0647\u0646\u062f" },
                        { id: 59, title: "\u0633\u06cc\u0633" },
                        {
                          id: 49,
                          title: "\u0633\u06cc\u0647 \u0631\u0648\u062f"
                        },
                        { id: 60, title: "\u0634\u0628\u0633\u062a\u0631" },
                        {
                          id: 55,
                          title: "\u0634\u0631\u0628\u06cc\u0627\u0646"
                        },
                        {
                          id: 61,
                          title: "\u0634\u0631\u0641\u062e\u0627\u0646\u0647"
                        },
                        {
                          id: 62,
                          title: "\u0634\u0646\u062f\u0622\u0628\u0627\u062f"
                        },
                        {
                          id: 63,
                          title: "\u0635\u0648\u0641\u06cc\u0627\u0646"
                        },
                        {
                          id: 67,
                          title: "\u0639\u062c\u0628 \u0634\u06cc\u0631"
                        },
                        {
                          id: 51,
                          title: "\u0642\u0631\u0647 \u0622\u063a\u0627\u062c"
                        },
                        {
                          id: 74,
                          title: "\u06a9\u0634\u06a9\u0633\u0631\u0627\u06cc"
                        },
                        {
                          id: 90,
                          title: "\u06a9\u0644\u0648\u0627\u0646\u0642"
                        },
                        { id: 69, title: "\u06a9\u0644\u06cc\u0628\u0631" },
                        {
                          id: 64,
                          title:
                            "\u06a9\u0648\u0632\u0647 \u06a9\u0646\u0627\u0646"
                        },
                        { id: 34, title: "\u06af\u0648\u06af\u0627\u0646" },
                        { id: 77, title: "\u0644\u06cc\u0644\u0627\u0646" },
                        {
                          id: 78,
                          title:
                            "\u0645\u0628\u0627\u0631\u06a9 \u0634\u0647\u0631"
                        },
                        { id: 71, title: "\u0645\u0631\u0627\u063a\u0647" },
                        { id: 75, title: "\u0645\u0631\u0646\u062f" },
                        { id: 79, title: "\u0645\u0644\u06a9\u0627\u0646" },
                        { id: 35, title: "\u0645\u0645\u0642\u0627\u0646" },
                        {
                          id: 56,
                          title: "\u0645\u0647\u0631\u0628\u0627\u0646"
                        },
                        { id: 84, title: "\u0645\u06cc\u0627\u0646\u0647" },
                        {
                          id: 92,
                          title:
                            "\u0646\u0638\u0631\u06a9\u0647\u0631\u06cc\u0632\u06cc"
                        },
                        {
                          id: 50,
                          title: "\u0647\u0627\u062f\u06cc\u0634\u0647\u0631"
                        },
                        { id: 91, title: "\u0647\u0631\u06cc\u0633" },
                        {
                          id: 93,
                          title: "\u0647\u0634\u062a\u0631\u0648\u062f"
                        },
                        {
                          id: 40,
                          title: "\u0647\u0648\u0631\u0627\u0646\u062f"
                        },
                        {
                          id: 65,
                          title: "\u0648\u0627\u06cc\u0642\u0627\u0646"
                        },
                        {
                          id: 86,
                          title: "\u0648\u0631\u0632\u0642\u0627\u0646"
                        },
                        { id: 76, title: "\u06cc\u0627\u0645\u0686\u06cc" }
                      ]
                    };
                  }
                  throw e;
                }
              })()
            : {
                list: [
                  {
                    id: 1,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                  },
                  {
                    id: 2,
                    title:
                      "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                  },
                  { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
                  { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
                  { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                  { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                  { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                  { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                  {
                    id: 9,
                    title:
                      "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                  },
                  {
                    id: 10,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                  },
                  {
                    id: 11,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                  },
                  {
                    id: 12,
                    title:
                      "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                  },
                  {
                    id: 13,
                    title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                  },
                  { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                  { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                  {
                    id: 16,
                    title:
                      "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                  },
                  { id: 17, title: "\u0641\u0627\u0631\u0633" },
                  { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                  { id: 19, title: "\u0642\u0645" },
                  {
                    id: 20,
                    title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                  },
                  { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                  {
                    id: 22,
                    title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                  },
                  {
                    id: 23,
                    title:
                      "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                  },
                  { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
                  { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                  { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
                  {
                    id: 27,
                    title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                  },
                  { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                  {
                    id: 29,
                    title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                  },
                  { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                  { id: 31, title: "\u06cc\u0632\u062f" }
                ]
              }
      },
      {
        path: "cityList2.openList",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? false
            : hasVariant($state, "show", "slide2")
            ? false
            : true
      },
      {
        path: "cityList2.select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "addres2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.userInfo.userInfo.address;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : ``
      },
      {
        path: "editPage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.editPage
      },
      {
        path: "bio.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return $state.userInfo.userInfo.bio;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            : undefined
      },
      {
        path: "sendImage.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "selectImage2", "selectImage2") ? false : false
      },
      {
        path: "gender3.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "next.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "show", "slide2") ? false : false
      },
      {
        path: "main.stateId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "selectId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.userInfo?.userInfo?.state
                ? $state.stateApi.data.list.find(
                    state => state.title === $state.userInfo.userInfo.state
                  )?.id ?? -1
                : -1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return -1;
              }
              throw e;
            }
          })()
      },
      {
        path: "chatViow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.chatViow
      },
      {
        path: "main.currentuser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "currentuser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "shop.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shop.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "shopModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "shop2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shopModal.open;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })() ?? $props.shop2
      },
      {
        path: "main.back",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "show", "main") &&
          hasVariant($state, "profile2", "profile2")
            ? false
            : hasVariant($state, "show", "main") &&
              hasVariant($state, "shop2", "shop2")
            ? false
            : hasVariant($state, "show", "main") &&
              hasVariant($state, "chatViow", "chatViow")
            ? false
            : hasVariant($state, "show", "main")
            ? true
            : false
      },
      {
        path: "main.shop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "editPage", "editPage")
            ? (() => {
                try {
                  return { value: $state.userInfo.userInfo.sex };
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {};
                  }
                  throw e;
                }
              })()
            : {}
      },
      {
        path: "userInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "editProfile.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "selectImage2", "selectImage2") ? false : false
      },
      {
        path: "profile2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.profile2
      },
      {
        path: "userProfile.currenteUser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.currentuser;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "splash",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "userProfile.goToChat",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant($state, "chatViow", "chatViow")
            ? (() => {
                try {
                  return $state.chatViow ? false : true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $state.chatViow ? false : true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
      },
      {
        path: "main.selectSetting",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "noInternet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariantsmqI86KQCt1()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_meto_deign_system_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_theme_light]: hasVariant(
                globalVariants,
                "theme",
                "light"
              ),
              [projectcss.global_theme_light]: hasVariant(
                globalVariants,
                "theme",
                "light"
              ),
              [sty.rootchatViow]: hasVariant($state, "chatViow", "chatViow"),
              [sty.rootchatViow_show_main]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "show", "main"),
              [sty.rooteditPage]: hasVariant($state, "editPage", "editPage"),
              [sty.rooteditPage_selectImage2]:
                hasVariant($state, "selectImage2", "selectImage2") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.rooteditPage_selectImage2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.rooteditPage_show_main]:
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "show", "main"),
              [sty.rootglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.rootglobal_theme_light]: hasVariant(
                globalVariants,
                "theme",
                "light"
              ),
              [sty.rootprofile2]: hasVariant($state, "profile2", "profile2"),
              [sty.rootprofile2_show_main]:
                hasVariant($state, "profile2", "profile2") &&
                hasVariant($state, "show", "main"),
              [sty.rootselectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.rootselectImage2_show_slide1]:
                hasVariant($state, "show", "slide1") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.rootselectImage2_show_slide2]:
                hasVariant($state, "show", "slide2") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.rootshop2]: hasVariant($state, "shop2", "shop2"),
              [sty.rootshop2_chatViow]:
                hasVariant($state, "shop2", "shop2") &&
                hasVariant($state, "chatViow", "chatViow"),
              [sty.rootshop2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "shop2", "shop2"),
              [sty.rootshow_main]: hasVariant($state, "show", "main"),
              [sty.rootshow_slide1]: hasVariant($state, "show", "slide1"),
              [sty.rootshow_slide2]: hasVariant($state, "show", "slide2")
            }
          )}
        >
          <Reveal
            data-plasmic-name={"slide1"}
            data-plasmic-override={overrides.slide1}
            className={classNames("__wab_instance", sty.slide1, {
              [sty.slide1editPage]: hasVariant($state, "editPage", "editPage"),
              [sty.slide1global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.slide1selectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.slide1selectImage2_show_slide1]:
                hasVariant($state, "show", "slide1") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.slide1show_slide1]: hasVariant($state, "show", "slide1"),
              [sty.slide1show_slide2]: hasVariant($state, "show", "slide2")
            })}
            damping={0.3}
            effect={"fade"}
            reverse={false}
            triggerOnce={true}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"login1"}
              data-plasmic-override={overrides.login1}
              hasGap={true}
              className={classNames(projectcss.all, sty.login1, {
                [sty.login1editPage]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.login1show_slide1]: hasVariant($state, "show", "slide1"),
                [sty.login1show_slide2]: hasVariant($state, "show", "slide2")
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ziXm, {
                  [sty.freeBoxshow_slide2__ziXmtKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rv2Cr)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cg7Zk, {
                      [sty.imgshow_slide1__cg7ZKcApvt]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "show", "slide1") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "140px"
                        : "150px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant($state, "show", "slide1") &&
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "140px"
                        : "150px"
                    }
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $state.imageurl;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/metoo/images/image.png",
                            fullWidth: 255,
                            fullHeight: 327,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__zBut)}
                  >
                    <MetoLabel
                      className={classNames(
                        "__wab_instance",
                        sty.metoLabel__zx1Gq,
                        {
                          [sty.metoLabeleditPage__zx1GqCCwlh]: hasVariant(
                            $state,
                            "editPage",
                            "editPage"
                          ),
                          [sty.metoLabelselectImage2__zx1GqbApSq]: hasVariant(
                            $state,
                            "selectImage2",
                            "selectImage2"
                          ),
                          [sty.metoLabelshow_slide1__zx1GqcApvt]: hasVariant(
                            $state,
                            "show",
                            "slide1"
                          ),
                          [sty.metoLabelshow_slide2__zx1GqtKbpy]: hasVariant(
                            $state,
                            "show",
                            "slide2"
                          )
                        }
                      )}
                      size={"lg"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__icCfI,
                          {
                            [sty.textshow_slide1__icCfIcApvt]: hasVariant(
                              $state,
                              "show",
                              "slide1"
                            )
                          }
                        )}
                      >
                        {
                          "\u0628\u0631\u0627\u06cc \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0647\u062a\u0631 \u0628\u0627 \u062f\u06cc\u06af\u0631\u0627\u0646 \u0644\u0637\u0641\u0627 \u0628\u0647\u062a\u0631\u06cc\u0646 \u0639\u06a9\u0633\u062a \u0631\u0648 \u0622\u067e\u0644\u0648\u062f \u06a9\u0646"
                        }
                      </div>
                    </MetoLabel>
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <MetoButton
                        className={classNames(
                          "__wab_instance",
                          sty.metoButton__gwNjT,
                          {
                            [sty.metoButtonselectImage2__gwNjTbApSq]:
                              hasVariant($state, "selectImage2", "selectImage2")
                          }
                        )}
                        flatSide={["bottom"]}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___26L0V
                            )}
                          >
                            {
                              "\u0627\u0646\u062a\u062e\u0627\u0628 \u0639\u06a9\u0633"
                            }
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectImage2"] = true
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "selectImage2",
                                  operation: 2
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  const oldValue = $stateGet($state, vgroup);
                                  $stateSet($state, vgroup, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectImage2"] != null &&
                            typeof $steps["updateSelectImage2"] === "object" &&
                            typeof $steps["updateSelectImage2"].then ===
                              "function"
                          ) {
                            $steps["updateSelectImage2"] = await $steps[
                              "updateSelectImage2"
                            ];
                          }
                        }}
                        size={"large"}
                      />
                    ) : null}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cVItL)}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel__sIZiw,
                      {
                        [sty.metoLabelshow_slide1__sIZiwcApvt]: hasVariant(
                          $state,
                          "show",
                          "slide1"
                        )
                      }
                    )}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mgXy7,
                        {
                          [sty.textshow_slide1__mgXy7CApvt]: hasVariant(
                            $state,
                            "show",
                            "slide1"
                          )
                        }
                      )}
                    >
                      {
                        "\u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"
                      }
                    </div>
                  </MetoLabel>
                  <MetoTextInput
                    data-plasmic-name={"name"}
                    data-plasmic-override={overrides.name}
                    autoFocus={
                      hasVariant($state, "show", "slide1") ? false : undefined
                    }
                    className={classNames("__wab_instance", sty.name, {
                      [sty.nameshow_slide1]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    })}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "name",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      "\u062f\u0631 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0627\u0633\u0645\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                    }
                    value={generateStateValueProp($state, ["name", "value"])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aCzYm, {
                    [sty.freeBoxeditPage__aCzYmcCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    )
                  })}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel__no6PQ
                    )}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hiBa
                      )}
                    >
                      {
                        "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f\u062a \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0647 \u0631\u0627\u062d\u062a \u062a\u0631 \u067e\u06cc\u062f\u0627\u062a \u06a9\u0646\u0646\u062f \u0648\u0627\u0631\u062f \u06a9\u0646"
                      }
                    </div>
                  </MetoLabel>
                  <MetoTextInput
                    data-plasmic-name={"birthday"}
                    data-plasmic-override={overrides.birthday}
                    className={classNames("__wab_instance", sty.birthday, {
                      [sty.birthdayshow_slide1]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    })}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "birthday",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onFocus={async focusEvent => {
                      const $steps = {};

                      $steps["updateDataPickerOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["modal", "open"]
                              },
                              operation: 4,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateDataPickerOpen"] != null &&
                        typeof $steps["updateDataPickerOpen"] === "object" &&
                        typeof $steps["updateDataPickerOpen"].then ===
                          "function"
                      ) {
                        $steps["updateDataPickerOpen"] = await $steps[
                          "updateDataPickerOpen"
                        ];
                      }
                    }}
                    placeholder={
                      hasVariant($state, "show", "slide1")
                        ? "1  \u0641\u0631\u0648\u0631\u062f\u06cc\u0646  1379 "
                        : " 1371 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1"
                    }
                    readOnly={true}
                    value={generateStateValueProp($state, [
                      "birthday",
                      "value"
                    ])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yoP3V, {
                    [sty.freeBoxeditPage__yoP3VCCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.freeBoxshow_slide1__yoP3VcApvt]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    )
                  })}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel___6CJMt
                    )}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___676Lv
                      )}
                    >
                      {
                        "\u062f\u062e\u062a\u0631 \u06cc\u0627 \u067e\u0633\u0631\u061f"
                      }
                    </div>
                  </MetoLabel>
                  <MetoRadioGroup
                    data-plasmic-name={"gender3"}
                    data-plasmic-override={overrides.gender3}
                    className={classNames("__wab_instance", sty.gender3, {
                      [sty.gender3editPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.gender3show_slide1]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    })}
                    onValueChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "gender3",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    radio={
                      hasVariant($state, "show", "slide1")
                        ? [
                            {
                              label: "\u062f\u062e\u062a\u0631",
                              value: "female"
                            },
                            { label: "\u067e\u0633\u0631", value: "male" }
                          ]
                        : undefined
                    }
                    style2={
                      hasVariant($state, "show", "slide1")
                        ? "_2Radio"
                        : undefined
                    }
                    value={generateStateValueProp($state, ["gender3", "value"])}
                  />
                </Stack__>
              </Stack__>
              <MetoButton
                className={classNames("__wab_instance", sty.metoButton__nSdCs, {
                  [sty.metoButtoneditPage__nSdCscCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.metoButtonshow_slide1__nSdCScApvt]: hasVariant(
                    $state,
                    "show",
                    "slide1"
                  ),
                  [sty.metoButtonshow_slide2__nSdCStKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
                color={"unnamedVariant"}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0Ysx
                    )}
                  >
                    {"\u0628\u0639\u062f\u06cc"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              $state.error = "";
                              if (!$state.name.value) {
                                return ($state.error = "لطفا اسمت رو وارد کن");
                              } else if (!$state.birthday.value) {
                                return ($state.error =
                                  "لطفا تاریخ تولدت رو وارد کن");
                              } else if (!$state.gender3.value.value) {
                                return ($state.error =
                                  "لطفا جنسیتت رو انتخاب کن");
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateShow"] =
                    $state.error == ""
                      ? (() => {
                          const actionArgs = {
                            vgroup: "show",
                            operation: 0,
                            value: "slide2"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                  if (
                    $steps["updateShow"] != null &&
                    typeof $steps["updateShow"] === "object" &&
                    typeof $steps["updateShow"].then === "function"
                  ) {
                    $steps["updateShow"] = await $steps["updateShow"];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.error != ""
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "error",
                              (() => {
                                try {
                                  return $state.error;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }
                }}
                size={"extraLarge"}
              />
            </Stack__>
          </Reveal>
          <Reveal
            data-plasmic-name={"slide2"}
            data-plasmic-override={overrides.slide2}
            className={classNames("__wab_instance", sty.slide2, {
              [sty.slide2editPage]: hasVariant($state, "editPage", "editPage"),
              [sty.slide2editPage_selectImage2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.slide2editPage_show_main]:
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "show", "main"),
              [sty.slide2selectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.slide2selectImage2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.slide2selectImage2_show_slide2]:
                hasVariant($state, "show", "slide2") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.slide2show_main]: hasVariant($state, "show", "main"),
              [sty.slide2show_slide1]: hasVariant($state, "show", "slide1"),
              [sty.slide2show_slide2]: hasVariant($state, "show", "slide2")
            })}
            damping={0.3}
            effect={"fade"}
            reverse={false}
            triggerOnce={true}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"login12"}
              data-plasmic-override={overrides.login12}
              hasGap={true}
              className={classNames(projectcss.all, sty.login12, {
                [sty.login12editPage]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.login12show_slide1]: hasVariant($state, "show", "slide1"),
                [sty.login12show_slide2]: hasVariant($state, "show", "slide2")
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iyZa5, {
                  [sty.freeBoxeditPage__iyZa5CCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxshow_slide2__iyZa5TKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__i8I6H, {
                    [sty.freeBoxeditPage__i8I6HCCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.freeBoxshow_slide2__i8I6HtKbpy]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel__k4A59,
                      {
                        [sty.metoLabeleditPage__k4A59CCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        ),
                        [sty.metoLabelshow_slide1__k4A59CApvt]: hasVariant(
                          $state,
                          "show",
                          "slide1"
                        ),
                        [sty.metoLabelshow_slide2__k4A59TKbpy]: hasVariant(
                          $state,
                          "show",
                          "slide2"
                        )
                      }
                    )}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Ac3Y,
                        {
                          [sty.texteditPage___2Ac3YCCwlh]: hasVariant(
                            $state,
                            "editPage",
                            "editPage"
                          ),
                          [sty.textshow_slide2___2Ac3YtKbpy]: hasVariant(
                            $state,
                            "show",
                            "slide2"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "editPage", "editPage")
                        ? "\u0627\u0633\u062a\u0627\u0646 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                        : hasVariant($state, "show", "slide2")
                        ? "\u0627\u0633\u062a\u0627\u0646 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                        : "\u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"}
                    </div>
                  </MetoLabel>
                  <MetoTextInput
                    data-plasmic-name={"stateInput"}
                    data-plasmic-override={overrides.stateInput}
                    className={classNames("__wab_instance", sty.stateInput, {
                      [sty.stateInputeditPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.stateInputshow_slide2]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    })}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "stateInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    onFocus={async focusEvent => {
                      const $steps = {};

                      $steps["updateListOpenList"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["stateList", "openList"]
                              },
                              operation: 4,
                              value: $state.stateList.select.title
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, !oldValue);
                              return !oldValue;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateListOpenList"] != null &&
                        typeof $steps["updateListOpenList"] === "object" &&
                        typeof $steps["updateListOpenList"].then === "function"
                      ) {
                        $steps["updateListOpenList"] = await $steps[
                          "updateListOpenList"
                        ];
                      }
                    }}
                    placeholder={
                      hasVariant($state, "editPage", "editPage")
                        ? ``
                        : hasVariant($state, "show", "slide2")
                        ? ``
                        : "\u062f\u0631 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0627\u0633\u0645\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                    }
                    readOnly={
                      hasVariant($state, "editPage", "editPage")
                        ? true
                        : hasVariant($state, "show", "slide2")
                        ? true
                        : undefined
                    }
                    value={generateStateValueProp($state, [
                      "stateInput",
                      "value"
                    ])}
                  />

                  <List
                    data-plasmic-name={"stateList"}
                    data-plasmic-override={overrides.stateList}
                    className={classNames("__wab_instance", sty.stateList, {
                      [sty.stateListeditPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.stateListeditPage_show_slide2]:
                        hasVariant($state, "editPage", "editPage") &&
                        hasVariant($state, "show", "slide2"),
                      [sty.stateListshow_slide2]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    })}
                    data={generateStateValueProp($state, ["stateList", "data"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateStateInputValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["stateInput", "value"]
                              },
                              operation: 0,
                              value: $state.stateList.select.title
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateStateInputValue"] != null &&
                        typeof $steps["updateStateInputValue"] === "object" &&
                        typeof $steps["updateStateInputValue"].then ===
                          "function"
                      ) {
                        $steps["updateStateInputValue"] = await $steps[
                          "updateStateInputValue"
                        ];
                      }

                      $steps["updateCityInputValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["cityInput", "value"]
                              },
                              operation: 0,
                              value: ""
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCityInputValue"] != null &&
                        typeof $steps["updateCityInputValue"] === "object" &&
                        typeof $steps["updateCityInputValue"].then ===
                          "function"
                      ) {
                        $steps["updateCityInputValue"] = await $steps[
                          "updateCityInputValue"
                        ];
                      }

                      $steps["updateSelectId"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectId"]
                              },
                              operation: 0,
                              value: $state.stateList.select.id
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectId"] != null &&
                        typeof $steps["updateSelectId"] === "object" &&
                        typeof $steps["updateSelectId"].then === "function"
                      ) {
                        $steps["updateSelectId"] = await $steps[
                          "updateSelectId"
                        ];
                      }
                    }}
                    onDataChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "stateList",
                        "data"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "stateList",
                        "openList"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "stateList",
                        "select"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    openList={generateStateValueProp($state, [
                      "stateList",
                      "openList"
                    ])}
                    select={generateStateValueProp($state, [
                      "stateList",
                      "select"
                    ])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__icxYp, {
                    [sty.freeBoxeditPage__icxYpCCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.freeBoxshow_slide2__icxYptKbpy]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel__jRyd,
                      {
                        [sty.metoLabeleditPage__jRydCCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        ),
                        [sty.metoLabelshow_slide2__jRydTKbpy]: hasVariant(
                          $state,
                          "show",
                          "slide2"
                        )
                      }
                    )}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iqiC,
                        {
                          [sty.texteditPage__iqiCcCwlh]: hasVariant(
                            $state,
                            "editPage",
                            "editPage"
                          ),
                          [sty.textshow_slide2__iqiCtKbpy]: hasVariant(
                            $state,
                            "show",
                            "slide2"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "editPage", "editPage")
                        ? "\u0634\u0647\u0631 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                        : hasVariant($state, "show", "slide2")
                        ? "\u0634\u0647\u0631 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                        : "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f\u062a \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0647 \u0631\u0627\u062d\u062a \u062a\u0631 \u067e\u06cc\u062f\u0627\u062a \u06a9\u0646\u0646\u062f \u0648\u0627\u0631\u062f \u06a9\u0646"}
                    </div>
                  </MetoLabel>
                  <MetoTextInput
                    data-plasmic-name={"cityInput"}
                    data-plasmic-override={overrides.cityInput}
                    className={classNames("__wab_instance", sty.cityInput, {
                      [sty.cityInputeditPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.cityInputshow_slide2]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    })}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cityInput",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onFocus={async focusEvent => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  if ($state.stateInput.value) {
                                    return ($state.cityList.openList =
                                      !$state.cityList.openList);
                                  } else {
                                    return ($state.stateList.openList =
                                      !$state.stateList.openList);
                                  }
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                    placeholder={
                      hasVariant($state, "editPage", "editPage")
                        ? ``
                        : hasVariant($state, "show", "slide2")
                        ? ``
                        : " 1371 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1"
                    }
                    readOnly={
                      hasVariant($state, "editPage", "editPage")
                        ? true
                        : hasVariant($state, "show", "slide2")
                        ? true
                        : undefined
                    }
                    value={generateStateValueProp($state, [
                      "cityInput",
                      "value"
                    ])}
                  />

                  <List
                    data-plasmic-name={"cityList"}
                    data-plasmic-override={overrides.cityList}
                    className={classNames("__wab_instance", sty.cityList, {
                      [sty.cityListeditPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.cityListshow_slide2]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    })}
                    data={generateStateValueProp($state, ["cityList", "data"])}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateCityInputValue"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["cityInput", "value"]
                              },
                              operation: 0,
                              value: $state.cityList.select.title
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateCityInputValue"] != null &&
                        typeof $steps["updateCityInputValue"] === "object" &&
                        typeof $steps["updateCityInputValue"].then ===
                          "function"
                      ) {
                        $steps["updateCityInputValue"] = await $steps[
                          "updateCityInputValue"
                        ];
                      }
                    }}
                    onDataChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cityList",
                        "data"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenListChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cityList",
                        "openList"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onSelectChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "cityList",
                        "select"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    openList={generateStateValueProp($state, [
                      "cityList",
                      "openList"
                    ])}
                    select={generateStateValueProp($state, [
                      "cityList",
                      "select"
                    ])}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___8Fs5V, {
                    [sty.freeBoxeditPage___8Fs5VCCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.freeBoxshow_slide2___8Fs5VtKbpy]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel__kmdqu,
                      {
                        [sty.metoLabeleditPage__kmdqucCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        ),
                        [sty.metoLabelshow_slide2__kmdqUtKbpy]: hasVariant(
                          $state,
                          "show",
                          "slide2"
                        )
                      }
                    )}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Pm00,
                        {
                          [sty.texteditPage___8Pm00CCwlh]: hasVariant(
                            $state,
                            "editPage",
                            "editPage"
                          ),
                          [sty.textshow_slide2___8Pm00TKbpy]: hasVariant(
                            $state,
                            "show",
                            "slide2"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "editPage", "editPage")
                        ? "\u0628\u0631\u0627\u06cc \u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0647\u062a\u0631\u060c \u0622\u062f\u0631\u0633 \u062f\u0642\u06cc\u0642\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                        : hasVariant($state, "show", "slide2")
                        ? "\u0628\u0631\u0627\u06cc \u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0647\u062a\u0631\u060c \u0622\u062f\u0631\u0633 \u062f\u0642\u06cc\u0642\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                        : "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f\u062a \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0647 \u0631\u0627\u062d\u062a \u062a\u0631 \u067e\u06cc\u062f\u0627\u062a \u06a9\u0646\u0646\u062f \u0648\u0627\u0631\u062f \u06a9\u0646"}
                    </div>
                  </MetoLabel>
                  <MetoTextInput
                    data-plasmic-name={"addres"}
                    data-plasmic-override={overrides.addres}
                    className={classNames("__wab_instance", sty.addres, {
                      [sty.addreseditPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.addresshow_slide1]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      ),
                      [sty.addresshow_slide2]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    })}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "addres",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={
                      hasVariant($state, "editPage", "editPage")
                        ? "..."
                        : hasVariant($state, "show", "slide2")
                        ? "..."
                        : " 1371 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1"
                    }
                    value={generateStateValueProp($state, ["addres", "value"])}
                  />
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kSqlc, {
                  [sty.freeBoxeditPage__kSqlcCCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxselectImage2__kSqlcbApSq]: hasVariant(
                    $state,
                    "selectImage2",
                    "selectImage2"
                  ),
                  [sty.freeBoxshow_slide2__kSqlctKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <MetoButton2
                  data-plasmic-name={"next"}
                  data-plasmic-override={overrides.next}
                  className={classNames("__wab_instance", sty.next, {
                    [sty.nexteditPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.nexteditPage_show_slide2]:
                      hasVariant($state, "show", "slide2") &&
                      hasVariant($state, "editPage", "editPage"),
                    [sty.nextshow_main]: hasVariant($state, "show", "main"),
                    [sty.nextshow_slide2]: hasVariant($state, "show", "slide2")
                  })}
                  disabled={
                    hasVariant($state, "show", "slide2")
                      ? (() => {
                          try {
                            return $state.next.load;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Q9XY,
                        {
                          [sty.texteditPage___2Q9XYcCwlh]: hasVariant(
                            $state,
                            "editPage",
                            "editPage"
                          ),
                          [sty.textshow_slide2___2Q9XYtKbpy]: hasVariant(
                            $state,
                            "show",
                            "slide2"
                          )
                        }
                      )}
                    >
                      {"\u0628\u0639\u062f\u06cc"}
                    </div>
                  }
                  load={generateStateValueProp($state, ["next", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateNextLoad"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["next", "load"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNextLoad"] != null &&
                      typeof $steps["updateNextLoad"] === "object" &&
                      typeof $steps["updateNextLoad"].then === "function"
                    ) {
                      $steps["updateNextLoad"] = await $steps["updateNextLoad"];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.error = "";
                                if (!$state.stateInput.value) {
                                  return ($state.error =
                                    "لطفا استان محل زندگیت رو انتخاب کن");
                                } else if (!$state.cityInput.value) {
                                  return ($state.error =
                                    "لطفا شهر محل زندگیت رو انتخاب کن");
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["newV2"] =
                      $state.error == ""
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.friendschat.ir/users/newV2",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      sex: $state.gender3.value.value,
                                      name: $state.name.value,
                                      profilePic: $state.imageurl,
                                      birthday: $state.birthday2,
                                      bio: "",
                                      state: $state.stateInput.value,
                                      city: $state.cityInput.value,
                                      address: $state.addres.value,
                                      age: $state.age
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["newV2"] != null &&
                      typeof $steps["newV2"] === "object" &&
                      typeof $steps["newV2"].then === "function"
                    ) {
                      $steps["newV2"] = await $steps["newV2"];
                    }

                    $steps["invokeGlobalAction2"] = (
                      $steps.newV2?.data?.data ? true : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                var setCookie = (name, value, days) => {
                                  const expires = new Date(
                                    Date.now() + days * 86400000
                                  ).toUTCString();
                                  document.cookie = `${name}=${value}; expires=${expires}; path=/; secure; SameSite=Lax`;
                                };
                                setCookie(
                                  "token",
                                  $steps.newV2.data.data.token,
                                  3650
                                );
                                return ($state.token =
                                  $steps.newV2.data.data.token);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["updateNextLoad2"] = (
                      $steps.newV2?.data?.data ? true : false
                    )
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return ($state.userInfo =
                                $steps.newV2?.data?.data);
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNextLoad2"] != null &&
                      typeof $steps["updateNextLoad2"] === "object" &&
                      typeof $steps["updateNextLoad2"].then === "function"
                    ) {
                      $steps["updateNextLoad2"] = await $steps[
                        "updateNextLoad2"
                      ];
                    }

                    $steps["invokeGlobalAction"] =
                      $state.error != ""
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.error;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateNextLoad3"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["next", "load"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateNextLoad3"] != null &&
                      typeof $steps["updateNextLoad3"] === "object" &&
                      typeof $steps["updateNextLoad3"].then === "function"
                    ) {
                      $steps["updateNextLoad3"] = await $steps[
                        "updateNextLoad3"
                      ];
                    }

                    $steps["updateShow"] = (
                      $steps.newV2.data?.data ? true : false
                    )
                      ? (() => {
                          const actionArgs = {
                            vgroup: "show",
                            operation: 0,
                            value: "main"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShow"] != null &&
                      typeof $steps["updateShow"] === "object" &&
                      typeof $steps["updateShow"].then === "function"
                    ) {
                      $steps["updateShow"] = await $steps["updateShow"];
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["next", "load"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant($state, "show", "slide2")
                      ? "extraLarge"
                      : undefined
                  }
                />

                <MetoButton
                  className={classNames(
                    "__wab_instance",
                    sty.metoButton__syKxa,
                    {
                      [sty.metoButtoneditPage__syKxacCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.metoButtonshow_slide2__syKxAtKbpy]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    }
                  )}
                  color={"unnamedVariant"}
                  disabled={
                    hasVariant($state, "editPage", "editPage")
                      ? false
                      : hasVariant($state, "show", "slide2")
                      ? false
                      : undefined
                  }
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__euFd,
                        {
                          [sty.texteditPage__euFdCCwlh]: hasVariant(
                            $state,
                            "editPage",
                            "editPage"
                          ),
                          [sty.textshow_slide2__euFdTKbpy]: hasVariant(
                            $state,
                            "show",
                            "slide2"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "editPage", "editPage")
                        ? "\u0642\u0628\u0644\u06cc"
                        : hasVariant($state, "show", "slide2")
                        ? "\u0642\u0628\u0644\u06cc"
                        : "\u0628\u0639\u062f\u06cc"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateShow"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "show",
                            operation: 0,
                            value: "slide1"
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShow"] != null &&
                      typeof $steps["updateShow"] === "object" &&
                      typeof $steps["updateShow"].then === "function"
                    ) {
                      $steps["updateShow"] = await $steps["updateShow"];
                    }
                  }}
                  size={"extraLarge"}
                />
              </Stack__>
            </Stack__>
            <BackHandler
              active={
                hasVariant($state, "selectImage2", "selectImage2") &&
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "show", "slide2")
                  ? false
                  : hasVariant($state, "show", "main") &&
                    hasVariant($state, "editPage", "editPage")
                  ? false
                  : hasVariant($state, "editPage", "editPage")
                  ? true
                  : hasVariant($state, "show", "slide2")
                  ? true
                  : false
              }
              className={classNames("__wab_instance", sty.backHandler__oJEm, {
                [sty.backHandlereditPage__oJEmCCwlh]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.backHandlereditPage_selectImage2_show_main__oJEmCCwlhBApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlereditPage_selectImage2_show_slide1__oJEmCCwlhBApSqCApvt]:
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "show", "slide1"),
                [sty.backHandlereditPage_selectImage2_show_slide2__oJEmCCwlhBApSqTKbpy]:
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "show", "slide2"),
                [sty.backHandlereditPage_show_main__oJEmCCwlhDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlerselectImage2_show_main__oJEmBApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlerselectImage2_show_slide1__oJEmBApSqCApvt]:
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "show", "slide1"),
                [sty.backHandlershow_main__oJEmDtd1A]: hasVariant(
                  $state,
                  "show",
                  "main"
                ),
                [sty.backHandlershow_slide1__oJEmCApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                ),
                [sty.backHandlershow_slide2__oJEmTKbpy]: hasVariant(
                  $state,
                  "show",
                  "slide2"
                )
              })}
              onBack={async () => {
                const $steps = {};

                $steps["updateShow"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "show",
                        operation: 0,
                        value: "slide1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateShow"] != null &&
                  typeof $steps["updateShow"] === "object" &&
                  typeof $steps["updateShow"].then === "function"
                ) {
                  $steps["updateShow"] = await $steps["updateShow"];
                }
              }}
            />
          </Reveal>
          <Reveal
            data-plasmic-name={"selectImage"}
            data-plasmic-override={overrides.selectImage}
            className={classNames("__wab_instance", sty.selectImage, {
              [sty.selectImageeditPage_selectImage2]:
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.selectImageeditPage_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.selectImageglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.selectImageselectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.selectImageshow_slide1]: hasVariant($state, "show", "slide1")
            })}
            damping={0.3}
            duration={500}
            effect={"fade"}
            reverse={false}
            triggerOnce={true}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___4Ys2G, {
                [sty.freeBoxselectImage2___4Ys2GbApSq]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                ),
                [sty.freeBoxshow_slide1___4Ys2GcApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                )
              })}
            >
              <section
                className={classNames(projectcss.all, sty.section___30Kx, {
                  [sty.sectionselectImage2___30KxbApSq]: hasVariant(
                    $state,
                    "selectImage2",
                    "selectImage2"
                  )
                })}
              >
                <MetoHeader
                  className={classNames(
                    "__wab_instance",
                    sty.metoHeader__iwMe,
                    {
                      [sty.metoHeaderselectImage2__iwMeBApSq]: hasVariant(
                        $state,
                        "selectImage2",
                        "selectImage2"
                      ),
                      [sty.metoHeadershow_slide1__iwMeCApvt]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    }
                  )}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSelectImage2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "selectImage2",
                            operation: 6
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectImage2"] != null &&
                      typeof $steps["updateSelectImage2"] === "object" &&
                      typeof $steps["updateSelectImage2"].then === "function"
                    ) {
                      $steps["updateSelectImage2"] = await $steps[
                        "updateSelectImage2"
                      ];
                    }
                  }}
                >
                  <MetoLabel
                    className={classNames(
                      "__wab_instance",
                      sty.metoLabel__m7Nx,
                      {
                        [sty.metoLabelselectImage2__m7NxBApSq]: hasVariant(
                          $state,
                          "selectImage2",
                          "selectImage2"
                        )
                      }
                    )}
                    size={
                      hasVariant($state, "selectImage2", "selectImage2")
                        ? "lg"
                        : undefined
                    }
                  >
                    {hasVariant($state, "selectImage2", "selectImage2")
                      ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0639\u06a9\u0633"
                      : "Label"}
                  </MetoLabel>
                </MetoHeader>
              </section>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wmXTq, {
                  [sty.freeBoxselectImage2__wmXTqbApSq]: hasVariant(
                    $state,
                    "selectImage2",
                    "selectImage2"
                  ),
                  [sty.freeBoxshow_slide1__wmXTqcApvt]: hasVariant(
                    $state,
                    "show",
                    "slide1"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__yskjA, {
                    [sty.freeBoxselectImage2__yskjAbApSq]: hasVariant(
                      $state,
                      "selectImage2",
                      "selectImage2"
                    )
                  })}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img, {
                      [sty.imgeditPage]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.imgeditPage_selectImage2]:
                        hasVariant($state, "selectImage2", "selectImage2") &&
                        hasVariant($state, "editPage", "editPage"),
                      [sty.imgselectImage2]: hasVariant(
                        $state,
                        "selectImage2",
                        "selectImage2"
                      ),
                      [sty.imgshow_slide1]: hasVariant($state, "show", "slide1")
                    })}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    id={"preview"}
                    loading={"lazy"}
                    src={
                      hasVariant($state, "selectImage2", "selectImage2")
                        ? (() => {
                            try {
                              return $state.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        : undefined
                    }
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox__pfu6Q, {
                    [sty.freeBoxselectImage2__pfu6QbApSq]: hasVariant(
                      $state,
                      "selectImage2",
                      "selectImage2"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? (() => {
                          try {
                            return $state.url == "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <MetoButton
                      className={classNames(
                        "__wab_instance",
                        sty.metoButton___4YVyW,
                        {
                          [sty.metoButtonselectImage2___4YVyWbApSq]: hasVariant(
                            $state,
                            "selectImage2",
                            "selectImage2"
                          ),
                          [sty.metoButtonshow_slide1___4YVyWcApvt]: hasVariant(
                            $state,
                            "show",
                            "slide1"
                          )
                        }
                      )}
                      color={"neutral"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i5KW3,
                            {
                              [sty.textselectImage2__i5KW3BApSq]: hasVariant(
                                $state,
                                "selectImage2",
                                "selectImage2"
                              )
                            }
                          )}
                        >
                          {
                            "\u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0632 \u06af\u0627\u0644\u0631\u06cc(\u0646\u06af\u0627\u0631\u062e\u0627\u0646\u0647)"
                          }
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return fileInput.click();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                      }}
                      size={
                        hasVariant($state, "selectImage2", "selectImage2")
                          ? "extraLarge"
                          : "extraLarge"
                      }
                    />
                  ) : null}
                  {(
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? (() => {
                          try {
                            return $state.url != "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                      : true
                  ) ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4X9FF,
                        {
                          [sty.freeBoxselectImage2___4X9FFbApSq]: hasVariant(
                            $state,
                            "selectImage2",
                            "selectImage2"
                          ),
                          [sty.freeBoxshow_slide1___4X9FFcApvt]: hasVariant(
                            $state,
                            "show",
                            "slide1"
                          )
                        }
                      )}
                    >
                      <MetoButton2
                        data-plasmic-name={"sendImage"}
                        data-plasmic-override={overrides.sendImage}
                        className={classNames("__wab_instance", sty.sendImage, {
                          [sty.sendImageselectImage2]: hasVariant(
                            $state,
                            "selectImage2",
                            "selectImage2"
                          )
                        })}
                        color={
                          hasVariant($state, "selectImage2", "selectImage2")
                            ? "success"
                            : undefined
                        }
                        disabled={
                          hasVariant($state, "selectImage2", "selectImage2")
                            ? (() => {
                                try {
                                  return $state.sendImage.load;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return false;
                                  }
                                  throw e;
                                }
                              })()
                            : undefined
                        }
                        label={
                          <MetoLabel
                            className={classNames(
                              "__wab_instance",
                              sty.metoLabel__hyUqj,
                              {
                                [sty.metoLabelselectImage2__hyUqJbApSq]:
                                  hasVariant(
                                    $state,
                                    "selectImage2",
                                    "selectImage2"
                                  )
                              }
                            )}
                            size={
                              hasVariant($state, "selectImage2", "selectImage2")
                                ? "lg"
                                : undefined
                            }
                          >
                            {hasVariant($state, "selectImage2", "selectImage2")
                              ? "\u062a\u0627\u06cc\u06cc\u062f \u06a9\u0631\u062f\u0646 \u0639\u06a9\u0633"
                              : "Label"}
                          </MetoLabel>
                        }
                        load={generateStateValueProp($state, [
                          "sendImage",
                          "load"
                        ])}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSendImageLoad"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["sendImage", "load"]
                                  },
                                  operation: 4,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSendImageLoad"] != null &&
                            typeof $steps["updateSendImageLoad"] === "object" &&
                            typeof $steps["updateSendImageLoad"].then ===
                              "function"
                          ) {
                            $steps["updateSendImageLoad"] = await $steps[
                              "updateSendImageLoad"
                            ];
                          }

                          $steps["invokeGlobalAction"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://api.liom.app/upload",
                                    undefined,
                                    (() => {
                                      try {
                                        return formData;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["invokeGlobalAction"] != null &&
                            typeof $steps["invokeGlobalAction"] === "object" &&
                            typeof $steps["invokeGlobalAction"].then ===
                              "function"
                          ) {
                            $steps["invokeGlobalAction"] = await $steps[
                              "invokeGlobalAction"
                            ];
                          }

                          $steps["updateImageurl"] = (
                            $steps.invokeGlobalAction?.data?.status
                              ? true
                              : false
                          )
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["imageurl"]
                                  },
                                  operation: 0,
                                  value: $steps.invokeGlobalAction.data.result
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateImageurl"] != null &&
                            typeof $steps["updateImageurl"] === "object" &&
                            typeof $steps["updateImageurl"].then === "function"
                          ) {
                            $steps["updateImageurl"] = await $steps[
                              "updateImageurl"
                            ];
                          }

                          $steps["updateSelectImage2"] = true
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "selectImage2",
                                  operation: 6
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, false);
                                  return false;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectImage2"] != null &&
                            typeof $steps["updateSelectImage2"] === "object" &&
                            typeof $steps["updateSelectImage2"].then ===
                              "function"
                          ) {
                            $steps["updateSelectImage2"] = await $steps[
                              "updateSelectImage2"
                            ];
                          }

                          $steps["updateSendImageLoad2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["sendImage", "load"]
                                  },
                                  operation: 4
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(objRoot, variablePath, !oldValue);
                                  return !oldValue;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSendImageLoad2"] != null &&
                            typeof $steps["updateSendImageLoad2"] ===
                              "object" &&
                            typeof $steps["updateSendImageLoad2"].then ===
                              "function"
                          ) {
                            $steps["updateSendImageLoad2"] = await $steps[
                              "updateSendImageLoad2"
                            ];
                          }
                        }}
                        onLoadChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "sendImage",
                            "load"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        size={
                          hasVariant($state, "selectImage2", "selectImage2")
                            ? "extraLarge"
                            : undefined
                        }
                      />

                      <MetoButton
                        className={classNames(
                          "__wab_instance",
                          sty.metoButton__sGLu,
                          {
                            [sty.metoButtonselectImage2__sGLuBApSq]: hasVariant(
                              $state,
                              "selectImage2",
                              "selectImage2"
                            ),
                            [sty.metoButtonshow_slide1__sGLuCApvt]: hasVariant(
                              $state,
                              "show",
                              "slide1"
                            )
                          }
                        )}
                        color={"neutral"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r04A,
                              {
                                [sty.textselectImage2__r04AbApSq]: hasVariant(
                                  $state,
                                  "selectImage2",
                                  "selectImage2"
                                )
                              }
                            )}
                          >
                            {hasVariant($state, "selectImage2", "selectImage2")
                              ? "\u0627\u0646\u0635\u0631\u0627\u0641"
                              : "\u0627\u0646\u062a\u062e\u0627\u0628 \u0627\u0632 \u06af\u0627\u0644\u0631\u06cc(\u0646\u06af\u0627\u0631\u062e\u0627\u0646\u0647)"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateSelectImage2"] = true
                            ? (() => {
                                const actionArgs = {
                                  vgroup: "selectImage2",
                                  operation: 6
                                };
                                return (({ vgroup, value }) => {
                                  if (typeof value === "string") {
                                    value = [value];
                                  }

                                  $stateSet($state, vgroup, false);
                                  return false;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectImage2"] != null &&
                            typeof $steps["updateSelectImage2"] === "object" &&
                            typeof $steps["updateSelectImage2"].then ===
                              "function"
                          ) {
                            $steps["updateSelectImage2"] = await $steps[
                              "updateSelectImage2"
                            ];
                          }
                        }}
                        size={
                          hasVariant($state, "selectImage2", "selectImage2")
                            ? "extraLarge"
                            : "extraLarge"
                        }
                      />
                    </Stack__>
                  ) : null}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eq5Nd,
                    {
                      [sty.textselectImage2__eq5NdbApSq]: hasVariant(
                        $state,
                        "selectImage2",
                        "selectImage2"
                      ),
                      [sty.textshow_slide1__eq5NdcApvt]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    }
                  )}
                  id={
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? "image"
                      : "image"
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return ($state.url = imageUrl);
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  {hasVariant($state, "selectImage2", "selectImage2")
                    ? ""
                    : "Enter some text"}
                </div>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml, {
                    [sty.embedHtmlselectImage2]: hasVariant(
                      $state,
                      "selectImage2",
                      "selectImage2"
                    ),
                    [sty.embedHtmlshow_slide1]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    )
                  })}
                  code={
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? '<input type="file" id="fileInput" accept="image/*" hidden>\r\n<script>\r\nconst fileInput = document.getElementById(\'fileInput\');\r\nconst image = document.getElementById(\'image\');\r\n\r\nlet imageUrl = null;\r\nlet formData = new FormData();\r\n\r\nfileInput.addEventListener(\'change\', () => {\r\n  const file = fileInput.files[0];\r\n  if (file) {\r\n    // \u0622\u0632\u0627\u062f \u06a9\u0631\u062f\u0646 URL \u0642\u0628\u0644\u06cc \u0627\u06af\u0631 \u0648\u062c\u0648\u062f \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647\r\n    if (imageUrl) {\r\n      URL.revokeObjectURL(imageUrl);\r\n    }\r\n    imageUrl = URL.createObjectURL(file);\r\n    image.click();\r\n    formData.append("file", file); // \u0641\u0627\u06cc\u0644\r\n    formData.append("path", "metoo/"); // \u0645\u0633\u06cc\u0631 \u062f\u0644\u062e\u0648\u0627\u0647 \u06a9\u0647 \u0628\u0647 \u0633\u0631\u0648\u0631 \u0645\u06cc\u200c\u0641\u0631\u0633\u062a\u06cc\r\n  }\r\n});\r\n</script>\r\n'
                      : '<input type="file" id="fileInput" accept="image/*" hidden>\r\n<script>\r\nconst fileInput = document.getElementById(\'fileInput\');\r\nconst image = document.getElementById(\'image\');\r\n\r\nlet imageUrl = null;\r\nlet formData = new FormData();\r\n\r\nfileInput.addEventListener(\'change\', () => {\r\n  const file = fileInput.files[0];\r\n  if (file) {\r\n    // \u0622\u0632\u0627\u062f \u06a9\u0631\u062f\u0646 URL \u0642\u0628\u0644\u06cc \u0627\u06af\u0631 \u0648\u062c\u0648\u062f \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u0647\r\n    if (imageUrl) {\r\n      URL.revokeObjectURL(imageUrl);\r\n    }\r\n    imageUrl = URL.createObjectURL(file);\r\n    image.click();\r\n    formData.append("file", file); // \u0641\u0627\u06cc\u0644\r\n    formData.append("path", "metoo/"); // \u0645\u0633\u06cc\u0631 \u062f\u0644\u062e\u0648\u0627\u0647 \u06a9\u0647 \u0628\u0647 \u0633\u0631\u0648\u0631 \u0645\u06cc\u200c\u0641\u0631\u0633\u062a\u06cc\r\n  }\r\n});\r\n</script>\r\n'
                  }
                />
              </Stack__>
            </div>
            <BackHandler
              active={
                hasVariant($state, "show", "main") &&
                hasVariant($state, "selectImage2", "selectImage2") &&
                hasVariant($state, "editPage", "editPage")
                  ? true
                  : hasVariant($state, "selectImage2", "selectImage2") &&
                    hasVariant($state, "editPage", "editPage") &&
                    hasVariant($state, "show", "slide1")
                  ? false
                  : hasVariant($state, "show", "slide2") &&
                    hasVariant($state, "editPage", "editPage")
                  ? false
                  : hasVariant($state, "show", "slide2") &&
                    hasVariant($state, "selectImage2", "selectImage2")
                  ? false
                  : hasVariant($state, "selectImage2", "selectImage2")
                  ? true
                  : hasVariant($state, "show", "slide2")
                  ? true
                  : false
              }
              className={classNames("__wab_instance", sty.backHandler__gvZa5, {
                [sty.backHandlereditPage_selectImage2__gvZa5CCwlhBApSq]:
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlereditPage_selectImage2_show_main__gvZa5CCwlhBApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlereditPage_selectImage2_show_slide1__gvZa5CCwlhBApSqCApvt]:
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "show", "slide1"),
                [sty.backHandlereditPage_selectImage2_show_slide2__gvZa5CCwlhBApSqTKbpy]:
                  hasVariant($state, "show", "slide2") &&
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlereditPage_show_main__gvZa5CCwlhDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlereditPage_show_slide2__gvZa5CCwlhTKbpy]:
                  hasVariant($state, "show", "slide2") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlerselectImage2__gvZa5BApSq]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                ),
                [sty.backHandlerselectImage2_show_main__gvZa5BApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlerselectImage2_show_slide1__gvZa5BApSqCApvt]:
                  hasVariant($state, "selectImage2", "selectImage2") &&
                  hasVariant($state, "show", "slide1"),
                [sty.backHandlerselectImage2_show_slide2__gvZa5BApSqTKbpy]:
                  hasVariant($state, "show", "slide2") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlershow_main__gvZa5Dtd1A]: hasVariant(
                  $state,
                  "show",
                  "main"
                ),
                [sty.backHandlershow_slide1__gvZa5CApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                ),
                [sty.backHandlershow_slide2__gvZa5TKbpy]: hasVariant(
                  $state,
                  "show",
                  "slide2"
                )
              })}
              onBack={async () => {
                const $steps = {};

                $steps["updateSelectImage2"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "selectImage2",
                        operation: 2
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectImage2"] != null &&
                  typeof $steps["updateSelectImage2"] === "object" &&
                  typeof $steps["updateSelectImage2"].then === "function"
                ) {
                  $steps["updateSelectImage2"] = await $steps[
                    "updateSelectImage2"
                  ];
                }
              }}
            />
          </Reveal>
          <section
            className={classNames(projectcss.all, sty.section__qBwjy, {
              [sty.sectioneditPage__qBwjyCCwlh]: hasVariant(
                $state,
                "editPage",
                "editPage"
              ),
              [sty.sectionglobal_theme_dark__qBwjyBwhTo]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.sectionselectImage2__qBwjybApSq]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              )
            })}
          >
            <MetoHeader
              className={classNames("__wab_instance", sty.metoHeader___7Dz27, {
                [sty.metoHeadereditPage___7Dz27CCwlh]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.metoHeadereditPage_selectImage2___7Dz27CCwlhBApSq]:
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.metoHeaderglobal_theme_dark___7Dz27BwhTo]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.metoHeaderselectImage2___7Dz27BApSq]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                ),
                [sty.metoHeadershow_slide1___7Dz27CApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateEditPage"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "editPage", operation: 6 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditPage"] != null &&
                  typeof $steps["updateEditPage"] === "object" &&
                  typeof $steps["updateEditPage"].then === "function"
                ) {
                  $steps["updateEditPage"] = await $steps["updateEditPage"];
                }
              }}
            >
              <MetoLabel
                className={classNames("__wab_instance", sty.metoLabel__lsFaR, {
                  [sty.metoLabeleditPage__lsFaRcCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.metoLabelglobal_theme_dark__lsFaRbwhTo]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
                size={
                  hasVariant($state, "editPage", "editPage") ? "lg" : undefined
                }
              >
                {hasVariant($state, "editPage", "editPage")
                  ? "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u067e\u0631\u0648\u0641\u0627\u06cc\u0644"
                  : "Label"}
              </MetoLabel>
            </MetoHeader>
          </section>
          <Reveal
            data-plasmic-name={"profile"}
            data-plasmic-override={overrides.profile}
            className={classNames("__wab_instance", sty.profile, {
              [sty.profilechatViow]: hasVariant($state, "chatViow", "chatViow"),
              [sty.profileeditPage]: hasVariant($state, "editPage", "editPage"),
              [sty.profileeditPage_chatViow]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.profileeditPage_profile2]:
                hasVariant($state, "profile2", "profile2") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.profileeditPage_selectImage2]:
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.profileeditPage_selectImage2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.profileeditPage_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.profileglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.profileprofile2]: hasVariant($state, "profile2", "profile2"),
              [sty.profileprofile2_chatViow]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "profile2", "profile2"),
              [sty.profileprofile2_chatViow_show_main]:
                hasVariant($state, "profile2", "profile2") &&
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "show", "main"),
              [sty.profileprofile2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "profile2", "profile2"),
              [sty.profileselectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.profileshow_slide1]: hasVariant($state, "show", "slide1")
            })}
            damping={hasVariant($state, "editPage", "editPage") ? 0.1 : 0.3}
            duration={500}
            effect={
              hasVariant($state, "editPage", "editPage") ? "fade" : "fade"
            }
            reverse={hasVariant($state, "editPage", "editPage") ? false : false}
            triggerOnce={
              hasVariant($state, "editPage", "editPage") ? true : true
            }
          >
            <BackHandler
              active={
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2")
                  ? false
                  : hasVariant($state, "profile2", "profile2")
                  ? true
                  : hasVariant($state, "editPage", "editPage")
                  ? true
                  : hasVariant($state, "selectImage2", "selectImage2")
                  ? true
                  : false
              }
              className={classNames("__wab_instance", sty.backHandler__miJhf, {
                [sty.backHandlerchatViow_show_main__miJhfXbdYDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.backHandlereditPage__miJhfCCwlh]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.backHandlereditPage_selectImage2__miJhfCCwlhBApSq]:
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlereditPage_selectImage2_show_main__miJhfCCwlhBApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlereditPage_show_main__miJhfCCwlhDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlerprofile2__miJhfG4G5L]: hasVariant(
                  $state,
                  "profile2",
                  "profile2"
                ),
                [sty.backHandlerprofile2_chatViow__miJhfG4G5LXbdY]:
                  hasVariant($state, "profile2", "profile2") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.backHandlerprofile2_chatViow_show_main__miJhfG4G5LXbdYDtd1A]:
                  hasVariant($state, "profile2", "profile2") &&
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.backHandlerprofile2_show_main__miJhfG4G5LDtd1A]:
                  hasVariant($state, "profile2", "profile2") &&
                  hasVariant($state, "show", "main"),
                [sty.backHandlerselectImage2__miJhfbApSq]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                ),
                [sty.backHandlerselectImage2_show_main__miJhfbApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlershow_main__miJhfdtd1A]: hasVariant(
                  $state,
                  "show",
                  "main"
                ),
                [sty.backHandlershow_slide1__miJhfcApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                )
              })}
              onBack={async () => {
                const $steps = {};

                $steps["updateProfile2"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "profile2", operation: 6 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateProfile2"] != null &&
                  typeof $steps["updateProfile2"] === "object" &&
                  typeof $steps["updateProfile2"].then === "function"
                ) {
                  $steps["updateProfile2"] = await $steps["updateProfile2"];
                }
              }}
            />

            <UserProfile
              data-plasmic-name={"userProfile"}
              data-plasmic-override={overrides.userProfile}
              back={async event => {
                const $steps = {};

                $steps["updateProfile2"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "profile2", operation: 6 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateProfile2"] != null &&
                  typeof $steps["updateProfile2"] === "object" &&
                  typeof $steps["updateProfile2"].then === "function"
                ) {
                  $steps["updateProfile2"] = await $steps["updateProfile2"];
                }
              }}
              chat={async event => {
                const $steps = {};

                $steps["updateProfile2"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "profile2", operation: 6 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateProfile2"] != null &&
                  typeof $steps["updateProfile2"] === "object" &&
                  typeof $steps["updateProfile2"].then === "function"
                ) {
                  $steps["updateProfile2"] = await $steps["updateProfile2"];
                }

                $steps["updateChatViow"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "chatViow", operation: 4 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateChatViow"] != null &&
                  typeof $steps["updateChatViow"] === "object" &&
                  typeof $steps["updateChatViow"].then === "function"
                ) {
                  $steps["updateChatViow"] = await $steps["updateChatViow"];
                }
              }}
              className={classNames("__wab_instance", sty.userProfile, {
                [sty.userProfilechatViow]: hasVariant(
                  $state,
                  "chatViow",
                  "chatViow"
                ),
                [sty.userProfileglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.userProfileprofile2]: hasVariant(
                  $state,
                  "profile2",
                  "profile2"
                ),
                [sty.userProfileprofile2_chatViow]:
                  hasVariant($state, "chatViow", "chatViow") &&
                  hasVariant($state, "profile2", "profile2")
              })}
              currentUser={(() => {
                try {
                  return $state.currentuser;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              currenteUser={generateStateValueProp($state, [
                "userProfile",
                "currenteUser"
              ])}
              goToChat={generateStateValueProp($state, [
                "userProfile",
                "goToChat"
              ])}
              onCurrenteUserChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "userProfile",
                  "currenteUser"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onGoToChatChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "userProfile",
                  "goToChat"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              shop={async event => {
                const $steps = {};

                $steps["updateShopModalOpen"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["shopModal", "open"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateShopModalOpen"] != null &&
                  typeof $steps["updateShopModalOpen"] === "object" &&
                  typeof $steps["updateShopModalOpen"].then === "function"
                ) {
                  $steps["updateShopModalOpen"] = await $steps[
                    "updateShopModalOpen"
                  ];
                }
              }}
              token={(() => {
                try {
                  return $state.token;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </Reveal>
          <Reveal
            data-plasmic-name={"edit"}
            data-plasmic-override={overrides.edit}
            className={classNames("__wab_instance", sty.edit, {
              [sty.editchatViow]: hasVariant($state, "chatViow", "chatViow"),
              [sty.editeditPage]: hasVariant($state, "editPage", "editPage"),
              [sty.editeditPage_chatViow]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.editeditPage_profile2]:
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "profile2", "profile2"),
              [sty.editeditPage_selectImage2]:
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.editeditPage_selectImage2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2"),
              [sty.editeditPage_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.editglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.editprofile2]: hasVariant($state, "profile2", "profile2"),
              [sty.editselectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.editshow_slide1]: hasVariant($state, "show", "slide1")
            })}
            damping={hasVariant($state, "editPage", "editPage") ? 0.1 : 0.3}
            duration={500}
            effect={
              hasVariant($state, "editPage", "editPage") ? "fade" : "fade"
            }
            reverse={hasVariant($state, "editPage", "editPage") ? false : false}
            triggerOnce={
              hasVariant($state, "editPage", "editPage") ? true : true
            }
          >
            <BackHandler
              active={
                hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2")
                  ? false
                  : hasVariant($state, "editPage", "editPage")
                  ? true
                  : hasVariant($state, "selectImage2", "selectImage2")
                  ? true
                  : false
              }
              className={classNames("__wab_instance", sty.backHandler__vqb8W, {
                [sty.backHandlereditPage__vqb8WcCwlh]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.backHandlereditPage_selectImage2__vqb8WcCwlhBApSq]:
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlereditPage_selectImage2_show_main__vqb8WcCwlhBApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlereditPage_show_main__vqb8WcCwlhDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.backHandlerselectImage2__vqb8WbApSq]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                ),
                [sty.backHandlerselectImage2_show_main__vqb8WbApSqDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.backHandlershow_main__vqb8Wdtd1A]: hasVariant(
                  $state,
                  "show",
                  "main"
                ),
                [sty.backHandlershow_slide1__vqb8WcApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                )
              })}
              onBack={async () => {
                const $steps = {};

                $steps["updateEditPage"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "editPage", operation: 6 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, false);
                        return false;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditPage"] != null &&
                  typeof $steps["updateEditPage"] === "object" &&
                  typeof $steps["updateEditPage"].then === "function"
                ) {
                  $steps["updateEditPage"] = await $steps["updateEditPage"];
                }
              }}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3NQos, {
                [sty.freeBoxeditPage___3NQoscCwlh]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.freeBoxeditPage_selectImage2___3NQoscCwlhBApSq]:
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.freeBoxeditPage_show_main___3NQoscCwlhDtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.freeBoxglobal_theme_dark___3NQosbwhTo]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.freeBoxselectImage2___3NQoSbApSq]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                )
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hmaDf, {
                  [sty.freeBoxeditPage__hmaDfCCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__fCsPg, {
                    [sty.freeBoxeditPage__fCsPgcCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.freeBoxeditPage_selectImage2__fCsPgcCwlhBApSq]:
                      hasVariant($state, "editPage", "editPage") &&
                      hasVariant($state, "selectImage2", "selectImage2"),
                    [sty.freeBoxselectImage2__fCsPGbApSq]: hasVariant(
                      $state,
                      "selectImage2",
                      "selectImage2"
                    )
                  })}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSelectImage2"] = true
                      ? (() => {
                          const actionArgs = {
                            vgroup: "selectImage2",
                            operation: 4
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, true);
                            return true;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectImage2"] != null &&
                      typeof $steps["updateSelectImage2"] === "object" &&
                      typeof $steps["updateSelectImage2"].then === "function"
                    ) {
                      $steps["updateSelectImage2"] = await $steps[
                        "updateSelectImage2"
                      ];
                    }
                  }}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ggtFv, {
                      [sty.imgeditPage__ggtFvCCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.imgshow_slide1__ggtFvcApvt]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      )
                    })}
                    displayHeight={
                      hasVariant($state, "editPage", "editPage")
                        ? "130px"
                        : hasVariant($state, "show", "slide1") &&
                          hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "140px"
                        : "150px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant($state, "editPage", "editPage")
                        ? "130px"
                        : hasVariant($state, "show", "slide1") &&
                          hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "140px"
                        : "150px"
                    }
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return (() => {
                          if (!/\.[^/.]+$/.test($state.imageurl)) {
                            return ($state.imageurl += ".jpg");
                          } else {
                            return $state.imageurl;
                          }
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/metoo/images/image.png",
                            fullWidth: 255,
                            fullHeight: 327,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  <MetoButton
                    className={classNames(
                      "__wab_instance",
                      sty.metoButton__kkxjm,
                      {
                        [sty.metoButtoneditPage__kkxjmCCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        )
                      }
                    )}
                    color={
                      hasVariant($state, "editPage", "editPage")
                        ? "neutral"
                        : undefined
                    }
                    label={
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2KsJa,
                            {
                              [sty.texteditPage___2KsJacCwlh]: hasVariant(
                                $state,
                                "editPage",
                                "editPage"
                              )
                            }
                          )}
                        >
                          {"Text"}
                        </div>
                        <Icon31Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg__gm0La,
                            {
                              [sty.svgeditPage__gm0LaCCwlh]: hasVariant(
                                $state,
                                "editPage",
                                "editPage"
                              )
                            }
                          )}
                          role={"img"}
                        />
                      </React.Fragment>
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSelectImage2"] = true
                        ? (() => {
                            const actionArgs = {
                              vgroup: "selectImage2",
                              operation: 4
                            };
                            return (({ vgroup, value }) => {
                              if (typeof value === "string") {
                                value = [value];
                              }

                              $stateSet($state, vgroup, true);
                              return true;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectImage2"] != null &&
                        typeof $steps["updateSelectImage2"] === "object" &&
                        typeof $steps["updateSelectImage2"].then === "function"
                      ) {
                        $steps["updateSelectImage2"] = await $steps[
                          "updateSelectImage2"
                        ];
                      }
                    }}
                    size={
                      hasVariant($state, "editPage", "editPage")
                        ? "extraSmall"
                        : undefined
                    }
                  />
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kcKv, {
                  [sty.freeBoxeditPage__kcKvCCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  )
                })}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel__dS1Wt,
                    {
                      [sty.metoLabeleditPage__dS1WtCCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hKlgD,
                      {
                        [sty.texteditPage__hKlgDcCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u0646\u0627\u0645"
                      : "\u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"}
                  </div>
                </MetoLabel>
                <MetoTextInput
                  data-plasmic-name={"editName"}
                  data-plasmic-override={overrides.editName}
                  autoFocus={
                    hasVariant($state, "show", "slide1") ? false : undefined
                  }
                  className={classNames("__wab_instance", sty.editName, {
                    [sty.editNameeditPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.editNameshow_slide1]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    )
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "editName",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={
                    "\u062f\u0631 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0627\u0633\u0645\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                  }
                  value={generateStateValueProp($state, ["editName", "value"])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mApR, {
                  [sty.freeBoxeditPage__mApRcCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxshow_slide2__mApRtKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel__xRbu0,
                    {
                      [sty.metoLabeleditPage__xRbu0CCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vjEs2,
                      {
                        [sty.texteditPage__vjEs2CCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u062f\u0631 \u0645\u0648\u0631\u062f \u062e\u0648\u062f\u062a \u06cc\u06a9\u0645 \u0628\u0646\u0648\u06cc\u0633 (bio)"
                      : "\u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"}
                  </div>
                </MetoLabel>
                <MetoTextInput
                  data-plasmic-name={"bio"}
                  data-plasmic-override={overrides.bio}
                  autoFocus={
                    hasVariant($state, "show", "slide1") ? false : undefined
                  }
                  className={classNames("__wab_instance", sty.bio, {
                    [sty.bioeditPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.bioshow_slide1]: hasVariant($state, "show", "slide1")
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["bio", "value"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={
                    hasVariant($state, "editPage", "editPage")
                      ? "\u062f\u0631\u0645\u0648\u0631\u062f \u062e\u0648\u062f\u062a \u0628\u0646\u0648\u06cc\u0633"
                      : "\u062f\u0631 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0627\u0633\u0645\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                  }
                  value={generateStateValueProp($state, ["bio", "value"])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nbkQt)}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel__vKk02,
                    {
                      [sty.metoLabeleditPage__vKk02CCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5ISaP,
                      {
                        [sty.texteditPage___5ISaPcCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f"
                      : "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f\u062a \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0647 \u0631\u0627\u062d\u062a \u062a\u0631 \u067e\u06cc\u062f\u0627\u062a \u06a9\u0646\u0646\u062f \u0648\u0627\u0631\u062f \u06a9\u0646"}
                  </div>
                </MetoLabel>
                <MetoTextInput
                  data-plasmic-name={"birthday3"}
                  data-plasmic-override={overrides.birthday3}
                  className={classNames("__wab_instance", sty.birthday3, {
                    [sty.birthday3editPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.birthday3show_slide1]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    )
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "birthday3",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onFocus={async focusEvent => {
                    const $steps = {};

                    $steps["updateDataPickerOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 4,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateDataPickerOpen"] != null &&
                      typeof $steps["updateDataPickerOpen"] === "object" &&
                      typeof $steps["updateDataPickerOpen"].then === "function"
                    ) {
                      $steps["updateDataPickerOpen"] = await $steps[
                        "updateDataPickerOpen"
                      ];
                    }
                  }}
                  placeholder={
                    " 1371 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1"
                  }
                  readOnly={true}
                  value={generateStateValueProp($state, ["birthday3", "value"])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mEjcJ)}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel___3Czj,
                    {
                      [sty.metoLabeleditPage___3CzjCCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ewdXe,
                      {
                        [sty.texteditPage__ewdXecCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u062c\u0646\u0633\u06cc\u062a"
                      : "\u062f\u062e\u062a\u0631 \u06cc\u0627 \u067e\u0633\u0631\u061f"}
                  </div>
                </MetoLabel>
                <MetoRadioGroup
                  data-plasmic-name={"radioGroup"}
                  data-plasmic-override={overrides.radioGroup}
                  className={classNames("__wab_instance", sty.radioGroup, {
                    [sty.radioGroupeditPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    )
                  })}
                  onValueChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "radioGroup",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  radio={
                    hasVariant($state, "editPage", "editPage")
                      ? [
                          {
                            label: "\u062f\u062e\u062a\u0631",
                            value: "female"
                          },
                          { label: "\u067e\u0633\u0631", value: "male" }
                        ]
                      : [
                          {
                            label: "\u062f\u062e\u062a\u0631",
                            value: "female"
                          },
                          { label: "\u067e\u0633\u0631", value: "male" }
                        ]
                  }
                  style2={
                    hasVariant($state, "editPage", "editPage")
                      ? "_2Radio"
                      : undefined
                  }
                  value={generateStateValueProp($state, [
                    "radioGroup",
                    "value"
                  ])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gzaP8, {
                  [sty.freeBoxeditPage__gzaP8CCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxshow_slide2__gzaP8TKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel__xdfZh,
                    {
                      [sty.metoLabeleditPage__xdfZhCCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.metoLabelshow_slide2__xdfZhtKbpy]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__slChG,
                      {
                        [sty.texteditPage__slChGcCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        ),
                        [sty.textshow_slide2__slChGtKbpy]: hasVariant(
                          $state,
                          "show",
                          "slide2"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u0627\u0633\u062a\u0627\u0646 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : hasVariant($state, "show", "slide2")
                      ? "\u0627\u0633\u062a\u0627\u0646 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : "\u0627\u0633\u0645\u062a \u0631\u0648 \u0648\u0627\u0631\u062f \u06a9\u0646"}
                  </div>
                </MetoLabel>
                <MetoTextInput
                  data-plasmic-name={"stateInput2"}
                  data-plasmic-override={overrides.stateInput2}
                  className={classNames("__wab_instance", sty.stateInput2, {
                    [sty.stateInput2editPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.stateInput2show_slide2]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "stateInput2",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async val => {
                      const $steps = {};
                    }).apply(null, eventArgs);
                  }}
                  onFocus={async focusEvent => {
                    const $steps = {};

                    $steps["updateListOpenList"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stateList2", "openList"]
                            },
                            operation: 4,
                            value: $state.stateList2.select.title
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateListOpenList"] != null &&
                      typeof $steps["updateListOpenList"] === "object" &&
                      typeof $steps["updateListOpenList"].then === "function"
                    ) {
                      $steps["updateListOpenList"] = await $steps[
                        "updateListOpenList"
                      ];
                    }
                  }}
                  placeholder={
                    hasVariant($state, "editPage", "editPage")
                      ? ``
                      : hasVariant($state, "show", "slide2")
                      ? ``
                      : "\u062f\u0631 \u0627\u06cc\u0646 \u0642\u0633\u0645\u062a \u0627\u0633\u0645\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                  }
                  readOnly={
                    hasVariant($state, "editPage", "editPage")
                      ? true
                      : hasVariant($state, "show", "slide2")
                      ? true
                      : undefined
                  }
                  value={generateStateValueProp($state, [
                    "stateInput2",
                    "value"
                  ])}
                />

                <List
                  data-plasmic-name={"stateList2"}
                  data-plasmic-override={overrides.stateList2}
                  className={classNames("__wab_instance", sty.stateList2, {
                    [sty.stateList2editPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.stateList2show_slide2]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                  data={generateStateValueProp($state, ["stateList2", "data"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateStateInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["stateInput2", "value"]
                            },
                            operation: 0,
                            value: $state.stateList2.select.title
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateStateInputValue"] != null &&
                      typeof $steps["updateStateInputValue"] === "object" &&
                      typeof $steps["updateStateInputValue"].then === "function"
                    ) {
                      $steps["updateStateInputValue"] = await $steps[
                        "updateStateInputValue"
                      ];
                    }

                    $steps["updateCityInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["cityInput2", "value"]
                            },
                            operation: 0,
                            value: ""
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCityInputValue"] != null &&
                      typeof $steps["updateCityInputValue"] === "object" &&
                      typeof $steps["updateCityInputValue"].then === "function"
                    ) {
                      $steps["updateCityInputValue"] = await $steps[
                        "updateCityInputValue"
                      ];
                    }

                    $steps["updateSelectId"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["selectId"]
                            },
                            operation: 0,
                            value: $state.stateList2.select.id
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSelectId"] != null &&
                      typeof $steps["updateSelectId"] === "object" &&
                      typeof $steps["updateSelectId"].then === "function"
                    ) {
                      $steps["updateSelectId"] = await $steps["updateSelectId"];
                    }
                  }}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "stateList2",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onOpenListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "stateList2",
                      "openList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onSelectChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "stateList2",
                      "select"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  openList={generateStateValueProp($state, [
                    "stateList2",
                    "openList"
                  ])}
                  select={generateStateValueProp($state, [
                    "stateList2",
                    "select"
                  ])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__z7PJt, {
                  [sty.freeBoxeditPage__z7PJtcCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxshow_slide2__z7PJTtKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel__jaKkk,
                    {
                      [sty.metoLabeleditPage__jaKkkCCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.metoLabelshow_slide2__jaKkktKbpy]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v8Hvi,
                      {
                        [sty.texteditPage__v8HviCCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        ),
                        [sty.textshow_slide2__v8HvitKbpy]: hasVariant(
                          $state,
                          "show",
                          "slide2"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u0634\u0647\u0631 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : hasVariant($state, "show", "slide2")
                      ? "\u0634\u0647\u0631 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc\u062a \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646"
                      : "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f\u062a \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0647 \u0631\u0627\u062d\u062a \u062a\u0631 \u067e\u06cc\u062f\u0627\u062a \u06a9\u0646\u0646\u062f \u0648\u0627\u0631\u062f \u06a9\u0646"}
                  </div>
                </MetoLabel>
                <MetoTextInput
                  data-plasmic-name={"cityInput2"}
                  data-plasmic-override={overrides.cityInput2}
                  className={classNames("__wab_instance", sty.cityInput2, {
                    [sty.cityInput2editPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.cityInput2show_slide2]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cityInput2",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onFocus={async focusEvent => {
                    const $steps = {};

                    $steps["updateCityListOpenList"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                if ($state.stateInput2.value) {
                                  return ($state.cityList2.openList =
                                    !$state.cityList2.openList);
                                } else {
                                  return ($state.stateList2.openList =
                                    !$state.stateList2.openList);
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCityListOpenList"] != null &&
                      typeof $steps["updateCityListOpenList"] === "object" &&
                      typeof $steps["updateCityListOpenList"].then ===
                        "function"
                    ) {
                      $steps["updateCityListOpenList"] = await $steps[
                        "updateCityListOpenList"
                      ];
                    }
                  }}
                  placeholder={
                    hasVariant($state, "editPage", "editPage")
                      ? ``
                      : hasVariant($state, "show", "slide2")
                      ? ``
                      : " 1371 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1"
                  }
                  readOnly={
                    hasVariant($state, "editPage", "editPage")
                      ? true
                      : hasVariant($state, "show", "slide2")
                      ? true
                      : undefined
                  }
                  value={generateStateValueProp($state, [
                    "cityInput2",
                    "value"
                  ])}
                />

                <List
                  data-plasmic-name={"cityList2"}
                  data-plasmic-override={overrides.cityList2}
                  className={classNames("__wab_instance", sty.cityList2, {
                    [sty.cityList2editPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.cityList2show_slide2]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                  data={generateStateValueProp($state, ["cityList2", "data"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateCityInputValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["cityInput2", "value"]
                            },
                            operation: 0,
                            value: $state.cityList2.select.title
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateCityInputValue"] != null &&
                      typeof $steps["updateCityInputValue"] === "object" &&
                      typeof $steps["updateCityInputValue"].then === "function"
                    ) {
                      $steps["updateCityInputValue"] = await $steps[
                        "updateCityInputValue"
                      ];
                    }
                  }}
                  onDataChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cityList2",
                      "data"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onOpenListChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cityList2",
                      "openList"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  onSelectChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "cityList2",
                      "select"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  openList={generateStateValueProp($state, [
                    "cityList2",
                    "openList"
                  ])}
                  select={generateStateValueProp($state, [
                    "cityList2",
                    "select"
                  ])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kxYWm, {
                  [sty.freeBoxeditPage__kxYWmCCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxshow_slide2__kxYWmtKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel__mmCi0,
                    {
                      [sty.metoLabeleditPage__mmCi0CCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.metoLabelshow_slide2__mmCi0TKbpy]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    }
                  )}
                  size={
                    hasVariant($state, "editPage", "editPage")
                      ? undefined
                      : "lg"
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1U5Y,
                      {
                        [sty.texteditPage___1U5YCCwlh]: hasVariant(
                          $state,
                          "editPage",
                          "editPage"
                        ),
                        [sty.textshow_slide2___1U5YtKbpy]: hasVariant(
                          $state,
                          "show",
                          "slide2"
                        )
                      }
                    )}
                  >
                    {hasVariant($state, "editPage", "editPage")
                      ? "\u0622\u062f\u0631\u0633 \u0645\u062d\u0644 \u0632\u0646\u062f\u06af\u06cc \u0634\u0645\u0627"
                      : hasVariant($state, "show", "slide2")
                      ? "\u0628\u0631\u0627\u06cc \u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0647\u062a\u0631\u060c \u0622\u062f\u0631\u0633 \u062f\u0642\u06cc\u0642\u062a \u0631\u0648 \u0628\u0646\u0648\u06cc\u0633"
                      : "\u062a\u0627\u0631\u06cc\u062e \u062a\u0648\u0644\u062f\u062a \u0631\u0648 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646 \u06a9\u0647 \u0631\u0627\u062d\u062a \u062a\u0631 \u067e\u06cc\u062f\u0627\u062a \u06a9\u0646\u0646\u062f \u0648\u0627\u0631\u062f \u06a9\u0646"}
                  </div>
                </MetoLabel>
                <MetoTextInput
                  data-plasmic-name={"addres2"}
                  data-plasmic-override={overrides.addres2}
                  className={classNames("__wab_instance", sty.addres2, {
                    [sty.addres2editPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.addres2show_slide1]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    ),
                    [sty.addres2show_slide2]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "addres2",
                      "value"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={
                    hasVariant($state, "editPage", "editPage")
                      ? "..."
                      : hasVariant($state, "show", "slide2")
                      ? "..."
                      : " 1371 \u0641\u0631\u0648\u0631\u062f\u06cc\u0646 1"
                  }
                  value={generateStateValueProp($state, ["addres2", "value"])}
                />
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sGpJ, {
                  [sty.freeBoxeditPage__sGpJcCwlh]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.freeBoxselectImage2__sGpJbApSq]: hasVariant(
                    $state,
                    "selectImage2",
                    "selectImage2"
                  ),
                  [sty.freeBoxshow_slide2__sGpJtKbpy]: hasVariant(
                    $state,
                    "show",
                    "slide2"
                  )
                })}
              >
                <MetoButton2
                  data-plasmic-name={"editProfile"}
                  data-plasmic-override={overrides.editProfile}
                  className={classNames("__wab_instance", sty.editProfile, {
                    [sty.editProfileeditPage]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.editProfileselectImage2]: hasVariant(
                      $state,
                      "selectImage2",
                      "selectImage2"
                    )
                  })}
                  color={
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? "success"
                      : undefined
                  }
                  disabled={
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? (() => {
                          try {
                            return $state.editProfile.load;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                      : undefined
                  }
                  label={
                    <MetoLabel
                      className={classNames(
                        "__wab_instance",
                        sty.metoLabel___7Sr5R,
                        {
                          [sty.metoLabelselectImage2___7Sr5RbApSq]: hasVariant(
                            $state,
                            "selectImage2",
                            "selectImage2"
                          )
                        }
                      )}
                      size={
                        hasVariant($state, "selectImage2", "selectImage2")
                          ? "lg"
                          : "lg"
                      }
                    >
                      {hasVariant($state, "selectImage2", "selectImage2")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u06a9\u0631\u062f\u0646 \u0639\u06a9\u0633"
                        : "\u062f\u062e\u06cc\u0631\u0647 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a"}
                    </MetoLabel>
                  }
                  load={generateStateValueProp($state, ["editProfile", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSendImageLoad"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editProfile", "load"]
                            },
                            operation: 4,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSendImageLoad"] != null &&
                      typeof $steps["updateSendImageLoad"] === "object" &&
                      typeof $steps["updateSendImageLoad"].then === "function"
                    ) {
                      $steps["updateSendImageLoad"] = await $steps[
                        "updateSendImageLoad"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.error = "";
                                if (!$state.editName.value) {
                                  return ($state.error =
                                    "نام شما نمی‌تواند خالی باشد");
                                } else if (!$state.stateInput2.value) {
                                  return ($state.error =
                                    "استان محل زندگی نمی‌تواند خالی باشد");
                                } else if (!$state.cityInput2.value) {
                                  return ($state.error =
                                    "شهر محل زندگی نمی‌تواند خالی باشد");
                                }
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["invokeGlobalAction2"] =
                      $state.error != ""
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "custom",
                                (() => {
                                  try {
                                    return $state.error;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                "bottom-center"
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["invokeGlobalAction2"] != null &&
                      typeof $steps["invokeGlobalAction2"] === "object" &&
                      typeof $steps["invokeGlobalAction2"].then === "function"
                    ) {
                      $steps["invokeGlobalAction2"] = await $steps[
                        "invokeGlobalAction2"
                      ];
                    }

                    $steps["edit"] =
                      $state.error == ""
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://api.friendschat.ir/users/setProfile",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      sex: $state.radioGroup.value.value,
                                      name: $state.editName.value,
                                      profilePic: $state.imageurl,
                                      birthday: $state.birthday2,
                                      bio: "",
                                      state: $state.stateInput2.value,
                                      city: $state.cityInput2.value,
                                      address: $state.addres2.value,
                                      age: $state.age
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                (() => {
                                  try {
                                    return {
                                      headers: {
                                        appid: 2,
                                        Authorization: $state.token,
                                        "Content-Type": "application/json",
                                        Version: "2.0.1 Google"
                                      }
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["edit"] != null &&
                      typeof $steps["edit"] === "object" &&
                      typeof $steps["edit"].then === "function"
                    ) {
                      $steps["edit"] = await $steps["edit"];
                    }

                    $steps["updateUserInfo"] = $steps.edit?.data?.success
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["userInfo"]
                            },
                            operation: 0,
                            value: $steps.edit.data.loginData
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateUserInfo"] != null &&
                      typeof $steps["updateUserInfo"] === "object" &&
                      typeof $steps["updateUserInfo"].then === "function"
                    ) {
                      $steps["updateUserInfo"] = await $steps["updateUserInfo"];
                    }

                    $steps["invokeGlobalAction"] = $steps.edit?.data?.success
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "success",
                              "\u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0630\u062e\u06cc\u0631\u0647 \u0634\u062f.",
                              "bottom-center"
                            ]
                          };
                          return $globalActions["Fragment.showToast"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }

                    $steps["updateSendImageLoad2"] = $steps.edit?.data?.success
                      ? (() => {
                          const actionArgs = {
                            vgroup: "editPage",
                            operation: 6
                          };
                          return (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            $stateSet($state, vgroup, false);
                            return false;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSendImageLoad2"] != null &&
                      typeof $steps["updateSendImageLoad2"] === "object" &&
                      typeof $steps["updateSendImageLoad2"].then === "function"
                    ) {
                      $steps["updateSendImageLoad2"] = await $steps[
                        "updateSendImageLoad2"
                      ];
                    }

                    $steps["updateEditProfileLoad"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["editProfile", "load"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateEditProfileLoad"] != null &&
                      typeof $steps["updateEditProfileLoad"] === "object" &&
                      typeof $steps["updateEditProfileLoad"].then === "function"
                    ) {
                      $steps["updateEditProfileLoad"] = await $steps[
                        "updateEditProfileLoad"
                      ];
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "editProfile",
                      "load"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  size={
                    hasVariant($state, "selectImage2", "selectImage2")
                      ? "extraLarge"
                      : "extraLarge"
                  }
                />
              </Stack__>
            </Stack__>
          </Reveal>
          {(
            hasVariant($state, "profile2", "profile2") &&
            hasVariant($state, "chatViow", "chatViow")
              ? true
              : hasVariant($state, "editPage", "editPage") &&
                hasVariant($state, "selectImage2", "selectImage2")
              ? true
              : hasVariant($state, "chatViow", "chatViow")
              ? true
              : hasVariant($state, "editPage", "editPage")
              ? true
              : hasVariant($state, "selectImage2", "selectImage2")
              ? true
              : false
          ) ? (
            <Reveal
              data-plasmic-name={"chatViow2"}
              data-plasmic-override={overrides.chatViow2}
              className={classNames("__wab_instance", sty.chatViow2, {
                [sty.chatViow2chatViow]: hasVariant(
                  $state,
                  "chatViow",
                  "chatViow"
                ),
                [sty.chatViow2chatViow_show_main]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.chatViow2editPage]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.chatViow2editPage_chatViow]:
                  hasVariant($state, "chatViow", "chatViow") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.chatViow2editPage_selectImage2]:
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.chatViow2editPage_selectImage2_show_main]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage") &&
                  hasVariant($state, "selectImage2", "selectImage2"),
                [sty.chatViow2editPage_show_main]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "editPage", "editPage"),
                [sty.chatViow2global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.chatViow2profile2_chatViow]:
                  hasVariant($state, "profile2", "profile2") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.chatViow2selectImage2]: hasVariant(
                  $state,
                  "selectImage2",
                  "selectImage2"
                ),
                [sty.chatViow2shop2]: hasVariant($state, "shop2", "shop2"),
                [sty.chatViow2shop2_chatViow]:
                  hasVariant($state, "shop2", "shop2") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.chatViow2show_slide1]: hasVariant($state, "show", "slide1")
              })}
              damping={hasVariant($state, "editPage", "editPage") ? 0.1 : 0.3}
              duration={500}
              effect={
                hasVariant($state, "editPage", "editPage") ? "fade" : "fade"
              }
              reverse={false}
              triggerOnce={
                hasVariant($state, "editPage", "editPage") ? false : true
              }
            >
              <BackHandler
                active={
                  hasVariant($state, "profile2", "profile2") &&
                  hasVariant($state, "chatViow", "chatViow")
                    ? false
                    : hasVariant($state, "shop2", "shop2") &&
                      hasVariant($state, "chatViow", "chatViow")
                    ? false
                    : hasVariant($state, "chatViow", "chatViow") &&
                      hasVariant($state, "show", "main")
                    ? true
                    : hasVariant($state, "editPage", "editPage") &&
                      hasVariant($state, "selectImage2", "selectImage2")
                    ? false
                    : hasVariant($state, "chatViow", "chatViow")
                    ? true
                    : hasVariant($state, "editPage", "editPage")
                    ? true
                    : hasVariant($state, "selectImage2", "selectImage2")
                    ? true
                    : false
                }
                className={classNames(
                  "__wab_instance",
                  sty.backHandler__c0Bwj,
                  {
                    [sty.backHandlerchatViow__c0BwjXbdY]: hasVariant(
                      $state,
                      "chatViow",
                      "chatViow"
                    ),
                    [sty.backHandlerchatViow_show_main__c0BwjXbdYDtd1A]:
                      hasVariant($state, "chatViow", "chatViow") &&
                      hasVariant($state, "show", "main"),
                    [sty.backHandlereditPage__c0BwjCCwlh]: hasVariant(
                      $state,
                      "editPage",
                      "editPage"
                    ),
                    [sty.backHandlereditPage_selectImage2__c0BwjCCwlhBApSq]:
                      hasVariant($state, "editPage", "editPage") &&
                      hasVariant($state, "selectImage2", "selectImage2"),
                    [sty.backHandlereditPage_selectImage2_show_main__c0BwjCCwlhBApSqDtd1A]:
                      hasVariant($state, "show", "main") &&
                      hasVariant($state, "editPage", "editPage") &&
                      hasVariant($state, "selectImage2", "selectImage2"),
                    [sty.backHandlereditPage_show_main__c0BwjCCwlhDtd1A]:
                      hasVariant($state, "show", "main") &&
                      hasVariant($state, "editPage", "editPage"),
                    [sty.backHandlerprofile2__c0BwjG4G5L]: hasVariant(
                      $state,
                      "profile2",
                      "profile2"
                    ),
                    [sty.backHandlerprofile2_chatViow__c0BwjG4G5LXbdY]:
                      hasVariant($state, "profile2", "profile2") &&
                      hasVariant($state, "chatViow", "chatViow"),
                    [sty.backHandlerselectImage2__c0BwjbApSq]: hasVariant(
                      $state,
                      "selectImage2",
                      "selectImage2"
                    ),
                    [sty.backHandlerselectImage2_show_main__c0BwjbApSqDtd1A]:
                      hasVariant($state, "show", "main") &&
                      hasVariant($state, "selectImage2", "selectImage2"),
                    [sty.backHandlershop2_chatViow__c0BwjWalo1XbdY]:
                      hasVariant($state, "shop2", "shop2") &&
                      hasVariant($state, "chatViow", "chatViow"),
                    [sty.backHandlershow_main__c0Bwjdtd1A]: hasVariant(
                      $state,
                      "show",
                      "main"
                    ),
                    [sty.backHandlershow_slide1__c0BwjcApvt]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    )
                  }
                )}
                onBack={async () => {
                  const $steps = {};

                  $steps["updateChatViow"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "chatViow", operation: 6 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, false);
                          return false;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateChatViow"] != null &&
                    typeof $steps["updateChatViow"] === "object" &&
                    typeof $steps["updateChatViow"].then === "function"
                  ) {
                    $steps["updateChatViow"] = await $steps["updateChatViow"];
                  }
                }}
              />

              <ChatPage
                data-plasmic-name={"chatPage"}
                data-plasmic-override={overrides.chatPage}
                back={async event => {
                  const $steps = {};

                  $steps["updateChatViow"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "chatViow", operation: 2 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          const oldValue = $stateGet($state, vgroup);
                          $stateSet($state, vgroup, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateChatViow"] != null &&
                    typeof $steps["updateChatViow"] === "object" &&
                    typeof $steps["updateChatViow"].then === "function"
                  ) {
                    $steps["updateChatViow"] = await $steps["updateChatViow"];
                  }
                }}
                className={classNames("__wab_instance", sty.chatPage, {
                  [sty.chatPagechatViow]: hasVariant(
                    $state,
                    "chatViow",
                    "chatViow"
                  ),
                  [sty.chatPagechatViow_show_main]:
                    hasVariant($state, "show", "main") &&
                    hasVariant($state, "chatViow", "chatViow"),
                  [sty.chatPageglobal_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.chatPageshow_main]: hasVariant($state, "show", "main")
                })}
                profile2={async () => {
                  const $steps = {};

                  $steps["updateProfile2"] = true
                    ? (() => {
                        const actionArgs = { vgroup: "profile2", operation: 4 };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          $stateSet($state, vgroup, true);
                          return true;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProfile2"] != null &&
                    typeof $steps["updateProfile2"] === "object" &&
                    typeof $steps["updateProfile2"].then === "function"
                  ) {
                    $steps["updateProfile2"] = await $steps["updateProfile2"];
                  }
                }}
                shop={async () => {
                  const $steps = {};

                  $steps["updateShopModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shopModal", "open"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateShopModalOpen"] != null &&
                    typeof $steps["updateShopModalOpen"] === "object" &&
                    typeof $steps["updateShopModalOpen"].then === "function"
                  ) {
                    $steps["updateShopModalOpen"] = await $steps[
                      "updateShopModalOpen"
                    ];
                  }
                }}
                token={
                  hasVariant(globalVariants, "theme", "dark")
                    ? (() => {
                        try {
                          return $state.token;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    : undefined
                }
                userData={
                  hasVariant($state, "show", "main")
                    ? (() => {
                        try {
                          return $state.currentuser;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return {
                              id: 200838,
                              bri: 0,
                              name: "\u0633\u0627\u062c\u062f\u0647 \u0627\u0628\u062a\u0647\u06cc",
                              username: "",
                              cluster: 1,
                              viewd:
                                "0,502452,502412,500899,499010,498238,497120,496499,495441,495339,493369,492693,492664,492125,491409,490829,489528,489301,488013,487939,487934,483928,483084,481174,481125,480276,479924,478870,478103,478041,478005,710356,710349,710299,698840,698642,698631,475778,475489,475411,473960,472472,472470,470010,468503,468394,467296,467269,467057,465018,463944,461554,461402,459578,452018,451227,450768,449649,439942,439578,432888",
                              mobile: null,
                              city: "\u0627\u0635\u063a\u0631\u0622\u0628\u0627\u062f",
                              state: "\u0627\u0635\u0641\u0647\u0627\u0646",
                              age: 15,
                              address:
                                "\u06af\u0648\u0644\u0628\u0627\u06a9\u0647 \u06a9\u0648\u0686\u0647 \u0627\u0633\u06af\u0631\u062e\u0627\u0646 \u067e\u0644\u0627\u06a9 \u0628\u06cc\u0633\u062a \u067e\u0646\u062c",
                              sex: "female",
                              cLike: 162,
                              cView: 177,
                              cMyView: 52,
                              cMyLike: 6,
                              isVip: 0,
                              isPromote: 0,
                              isPromoteDate: null,
                              premiumEndDate: null,
                              lastActivity: "2025-05-18 14:31:22",
                              lastActivityDate: "2025-05-18",
                              activeGoldenTick: 0,
                              eventBlock: 0,
                              eventSeen: 177,
                              eventMessage: 0,
                              eventLike: 162,
                              imei: "",
                              email: null,
                              version: "1.0.5 BAZAR",
                              appid: 1,
                              regDate: "2024-11-03",
                              timestamp: "2024-11-03 20:20:55",
                              refCode: "d1b8c0",
                              _referedBy: null,
                              refCount: 0,
                              stars: 168,
                              weeklyStars: 168,
                              cLikeCP: 0,
                              weeklyCLikeCP: 0,
                              tokenBot: "/liom_8b802f",
                              hamyarEshgh: null,
                              hamyarEshgh_gap: null,
                              partnerName: null,
                              mobileHamyar: null,
                              marridDate: null,
                              country: "IR",
                              lang: "fa",
                              postLang: "fa",
                              marital_status: "0",
                              birthdayDate: "1388-05-31",
                              dueDate: null,
                              pLast_time: null,
                              length: null,
                              last_time: null,
                              cycle: null,
                              height: null,
                              weight: null,
                              cOffCode: null,
                              password: null,
                              avatar: 1,
                              socialAvatar: 1,
                              overall: 0,
                              profilePic: "",
                              bio: "",
                              header: " ",
                              background: "",
                              font: " ",
                              verify: 0,
                              telegram: " ",
                              instagram: " ",
                              twitter: " ",
                              syncCount: null,
                              isAdmin: 0,
                              superAdmin: 0,
                              isBlock: 0,
                              isVisible_news: null,
                              isVisible_broadcast: 1,
                              checker: 0,
                              blogger: 0,
                              notif_like: 0,
                              notif_comments: 0,
                              notif_mention: 0,
                              event: 0,
                              unSeenEvent: 0,
                              cPost: 0,
                              unLikeCat: "",
                              adult: 0,
                              political: 0,
                              firstTwitt: 0,
                              suspect: 0,
                              suspectHeader: 0,
                              suspectProfile: 0,
                              suspectBio: 0,
                              suspectName: 0,
                              suspectUserName: 0,
                              uuid: null,
                              bot: 0,
                              isCheck: 0,
                              req_id: 200838,
                              setLike: false
                            };
                          }
                          throw e;
                        }
                      })()
                    : undefined
                }
              />
            </Reveal>
          ) : null}
          <section
            className={classNames(projectcss.all, sty.section__nMjS9, {
              [sty.sectionchatViow_show_main__nMjS9XbdYDtd1A]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "show", "main"),
              [sty.sectioneditPage_show_main__nMjS9CCwlhDtd1A]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "editPage", "editPage"),
              [sty.sectionglobal_theme_dark__nMjS9BwhTo]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.sectionprofile2__nMjS9G4G5L]: hasVariant(
                $state,
                "profile2",
                "profile2"
              ),
              [sty.sectionprofile2_show_main__nMjS9G4G5LDtd1A]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "profile2", "profile2"),
              [sty.sectionshop2_show_main__nMjS9Walo1Dtd1A]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "shop2", "shop2"),
              [sty.sectionshow_main__nMjS9Dtd1A]: hasVariant(
                $state,
                "show",
                "main"
              ),
              [sty.sectionshow_slide1__nMjS9CApvt]: hasVariant(
                $state,
                "show",
                "slide1"
              ),
              [sty.sectionshow_slide2__nMjS9TKbpy]: hasVariant(
                $state,
                "show",
                "slide2"
              )
            })}
          >
            <section
              className={classNames(projectcss.all, sty.section___2OkD4, {
                [sty.sectioneditPage___2OkD4CCwlh]: hasVariant(
                  $state,
                  "editPage",
                  "editPage"
                ),
                [sty.sectionglobal_theme_dark___2OkD4BwhTo]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.sectionshop2_show_main___2OkD4Walo1Dtd1A]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "shop2", "shop2"),
                [sty.sectionshow_main___2OkD4Dtd1A]: hasVariant(
                  $state,
                  "show",
                  "main"
                ),
                [sty.sectionshow_slide1___2OkD4CApvt]: hasVariant(
                  $state,
                  "show",
                  "slide1"
                ),
                [sty.sectionshow_slide2___2OkD4TKbpy]: hasVariant(
                  $state,
                  "show",
                  "slide2"
                )
              })}
            >
              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer, {
                  [sty.footereditPage]: hasVariant(
                    $state,
                    "editPage",
                    "editPage"
                  ),
                  [sty.footerselectImage2]: hasVariant(
                    $state,
                    "selectImage2",
                    "selectImage2"
                  ),
                  [sty.footershop2_show_main]:
                    hasVariant($state, "show", "main") &&
                    hasVariant($state, "shop2", "shop2"),
                  [sty.footershow_main]: hasVariant($state, "show", "main"),
                  [sty.footershow_slide2]: hasVariant($state, "show", "slide2")
                })}
                onSelectFooterChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "footer",
                    "selectFooter"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                selectFooter={generateStateValueProp($state, [
                  "footer",
                  "selectFooter"
                ])}
              />
            </section>
            <Main
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              back={generateStateValueProp($state, ["main", "back"])}
              chatOpen={async event => {
                const $steps = {};

                $steps["updateChatViow"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "chatViow", operation: 2 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateChatViow"] != null &&
                  typeof $steps["updateChatViow"] === "object" &&
                  typeof $steps["updateChatViow"].then === "function"
                ) {
                  $steps["updateChatViow"] = await $steps["updateChatViow"];
                }
              }}
              city={(() => {
                try {
                  return $state.cityApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 1,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                        },
                        {
                          id: 2,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                        },
                        {
                          id: 3,
                          title: "\u0627\u0631\u062f\u0628\u06cc\u0644"
                        },
                        {
                          id: 4,
                          title: "\u0627\u0635\u0641\u0647\u0627\u0646"
                        },
                        { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                        { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                        { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                        { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                        {
                          id: 9,
                          title:
                            "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                        },
                        {
                          id: 10,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                        },
                        {
                          id: 11,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                        },
                        {
                          id: 12,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                        },
                        {
                          id: 13,
                          title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                        },
                        { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                        { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                        {
                          id: 16,
                          title:
                            "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                        },
                        { id: 17, title: "\u0641\u0627\u0631\u0633" },
                        { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                        { id: 19, title: "\u0642\u0645" },
                        {
                          id: 20,
                          title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                        },
                        { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                        {
                          id: 22,
                          title:
                            "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                        },
                        {
                          id: 23,
                          title:
                            "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 24,
                          title: "\u06af\u0644\u0633\u062a\u0627\u0646"
                        },
                        { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                        {
                          id: 26,
                          title: "\u0644\u0631\u0633\u062a\u0627\u0646"
                        },
                        {
                          id: 27,
                          title:
                            "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                        },
                        { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                        {
                          id: 29,
                          title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                        },
                        { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                        { id: 31, title: "\u06cc\u0632\u062f" }
                      ]
                    };
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.main, {
                [sty.mainchatViow_show_main]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "chatViow", "chatViow"),
                [sty.mainglobal_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),
                [sty.mainprofile2_show_main]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "profile2", "profile2"),
                [sty.mainshop2_show_main]:
                  hasVariant($state, "show", "main") &&
                  hasVariant($state, "shop2", "shop2"),
                [sty.mainshow_main]: hasVariant($state, "show", "main")
              })}
              data={(() => {
                try {
                  return $state.stateApi.data;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      list: [
                        {
                          id: 1,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
                        },
                        {
                          id: 2,
                          title:
                            "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
                        },
                        {
                          id: 3,
                          title: "\u0627\u0631\u062f\u0628\u06cc\u0644"
                        },
                        {
                          id: 4,
                          title: "\u0627\u0635\u0641\u0647\u0627\u0646"
                        },
                        { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
                        { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
                        { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
                        { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
                        {
                          id: 9,
                          title:
                            "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
                        },
                        {
                          id: 10,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
                        },
                        {
                          id: 11,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
                        },
                        {
                          id: 12,
                          title:
                            "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
                        },
                        {
                          id: 13,
                          title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646"
                        },
                        { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
                        { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
                        {
                          id: 16,
                          title:
                            "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
                        },
                        { id: 17, title: "\u0641\u0627\u0631\u0633" },
                        { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
                        { id: 19, title: "\u0642\u0645" },
                        {
                          id: 20,
                          title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646"
                        },
                        { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
                        {
                          id: 22,
                          title:
                            "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
                        },
                        {
                          id: 23,
                          title:
                            "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
                        },
                        {
                          id: 24,
                          title: "\u06af\u0644\u0633\u062a\u0627\u0646"
                        },
                        { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
                        {
                          id: 26,
                          title: "\u0644\u0631\u0633\u062a\u0627\u0646"
                        },
                        {
                          id: 27,
                          title:
                            "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
                        },
                        { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
                        {
                          id: 29,
                          title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646"
                        },
                        { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
                        { id: 31, title: "\u06cc\u0632\u062f" }
                      ]
                    };
                  }
                  throw e;
                }
              })()}
              editProfile={async event => {
                const $steps = {};

                $steps["updateEditPage"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "editPage", operation: 4 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateEditPage"] != null &&
                  typeof $steps["updateEditPage"] === "object" &&
                  typeof $steps["updateEditPage"].then === "function"
                ) {
                  $steps["updateEditPage"] = await $steps["updateEditPage"];
                }
              }}
              onBackChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["main", "back"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onCurrentuserChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "main",
                  "currentuser"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateCurrentuser"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["currentuser"]
                          },
                          operation: 0,
                          value: $state.main.currentuser
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCurrentuser"] != null &&
                    typeof $steps["updateCurrentuser"] === "object" &&
                    typeof $steps["updateCurrentuser"].then === "function"
                  ) {
                    $steps["updateCurrentuser"] = await $steps[
                      "updateCurrentuser"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              onSelectSettingChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "main",
                  "selectSetting"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onShopChange2={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["main", "shop"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              onStateIdChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, ["main", "stateId"]).apply(
                  null,
                  eventArgs
                );

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateSelectId"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["selectId"]
                          },
                          operation: 0,
                          value: $state.main.stateId
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSelectId"] != null &&
                    typeof $steps["updateSelectId"] === "object" &&
                    typeof $steps["updateSelectId"].then === "function"
                  ) {
                    $steps["updateSelectId"] = await $steps["updateSelectId"];
                  }
                }).apply(null, eventArgs);
              }}
              profileOpen={async () => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return console.log("akhcaschak");
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateProfile2"] = true
                  ? (() => {
                      const actionArgs = { vgroup: "profile2", operation: 4 };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, true);
                        return true;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateProfile2"] != null &&
                  typeof $steps["updateProfile2"] === "object" &&
                  typeof $steps["updateProfile2"].then === "function"
                ) {
                  $steps["updateProfile2"] = await $steps["updateProfile2"];
                }
              }}
              selectSetting={generateStateValueProp($state, [
                "main",
                "selectSetting"
              ])}
              settingClick={async () => {
                const $steps = {};

                $steps["updateShopModalOpen"] =
                  $state.main.selectSetting.action == "buySubscription"
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["shopModal", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateShopModalOpen"] != null &&
                  typeof $steps["updateShopModalOpen"] === "object" &&
                  typeof $steps["updateShopModalOpen"].then === "function"
                ) {
                  $steps["updateShopModalOpen"] = await $steps[
                    "updateShopModalOpen"
                  ];
                }
              }}
              shop={generateStateValueProp($state, ["main", "shop"])}
              show={(() => {
                try {
                  return $state.footer.selectFooter;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "dating";
                  }
                  throw e;
                }
              })()}
              stateId={generateStateValueProp($state, ["main", "stateId"])}
              token={
                hasVariant(globalVariants, "theme", "dark")
                  ? (() => {
                      try {
                        return $state.token;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : undefined
              }
              userInfo={(() => {
                try {
                  return $state.userInfo;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </section>
          <ApiRequest
            data-plasmic-name={"stateApi"}
            data-plasmic-override={overrides.stateApi}
            className={classNames("__wab_instance", sty.stateApi, {
              [sty.stateApieditPage]: hasVariant(
                $state,
                "editPage",
                "editPage"
              ),
              [sty.stateApiglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.stateApiglobal_theme_light]: hasVariant(
                globalVariants,
                "theme",
                "light"
              ),
              [sty.stateApiselectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.stateApishow_slide1]: hasVariant($state, "show", "slide1"),
              [sty.stateApishow_slide2]: hasVariant($state, "show", "slide2")
            })}
            config={{ headers: {} }}
            errorDisplay={null}
            loadingDisplay={null}
            method={
              hasVariant($state, "editPage", "editPage")
                ? "GET"
                : hasVariant($state, "show", "slide2")
                ? "GET"
                : "GET"
            }
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["stateApi", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["stateApi", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["stateApi", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={true}
            url={"https://api.friendschat.ir/users/getState"}
          />

          <ApiRequest
            data-plasmic-name={"cityApi"}
            data-plasmic-override={overrides.cityApi}
            body={
              hasVariant($state, "editPage", "editPage")
                ? (() => {
                    try {
                      return { stateID: $state.selectId };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : hasVariant($state, "show", "slide2")
                ? (() => {
                    try {
                      return { stateID: $state.selectId };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return { stateID: $state.selectId };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
            className={classNames("__wab_instance", sty.cityApi, {
              [sty.cityApieditPage]: hasVariant($state, "editPage", "editPage"),
              [sty.cityApishow_slide1]: hasVariant($state, "show", "slide1"),
              [sty.cityApishow_slide2]: hasVariant($state, "show", "slide2")
            })}
            config={{
              headers: {
                appid: "your-app-id",
                Authorization: "Bearer your-token",
                "Content-Type": "application/json",
                Version: "1.0"
              }
            }}
            errorDisplay={null}
            loadingDisplay={null}
            method={
              hasVariant($state, "editPage", "editPage")
                ? "POST"
                : hasVariant($state, "show", "slide2")
                ? "POST"
                : "POST"
            }
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["cityApi", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["cityApi", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["cityApi", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={(() => {
              try {
                return $state.selectId != -1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()}
            url={"https://api.friendschat.ir/users/getCity"}
          />

          <Modal2
            data-plasmic-name={"modal"}
            data-plasmic-override={overrides.modal}
            background={"black"}
            body={
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__k1SxG, {
                  [sty.freeBoxshow_slide1__k1SxGcApvt]: hasVariant(
                    $state,
                    "show",
                    "slide1"
                  )
                })}
              >
                <DatePickers
                  data-plasmic-name={"datePickers"}
                  data-plasmic-override={overrides.datePickers}
                  SelectedDay={hasVariant($state, "show", "slide1") ? 1 : 10}
                  SelectedMonth={hasVariant($state, "show", "slide1") ? 1 : 10}
                  SelectedYear={1379}
                  className={classNames("__wab_instance", sty.datePickers, {
                    [sty.datePickersshow_slide1]: hasVariant(
                      $state,
                      "show",
                      "slide1"
                    ),
                    [sty.datePickersshow_slide2]: hasVariant(
                      $state,
                      "show",
                      "slide2"
                    )
                  })}
                  customYears={[]}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "datePickers",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  selectedValues={generateStateValueProp($state, [
                    "datePickers",
                    "value"
                  ])}
                />

                <MetoButton
                  className={classNames(
                    "__wab_instance",
                    sty.metoButton___3VnFt,
                    {
                      [sty.metoButtoneditPage___3VnFtCCwlh]: hasVariant(
                        $state,
                        "editPage",
                        "editPage"
                      ),
                      [sty.metoButtonselectImage2_show_slide1___3VnFtbApSqCApvt]:
                        hasVariant($state, "show", "slide1") &&
                        hasVariant($state, "selectImage2", "selectImage2"),
                      [sty.metoButtonshow_slide1___3VnFtcApvt]: hasVariant(
                        $state,
                        "show",
                        "slide1"
                      ),
                      [sty.metoButtonshow_slide2___3VnFttKbpy]: hasVariant(
                        $state,
                        "show",
                        "slide2"
                      )
                    }
                  )}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sWg3C
                      )}
                    >
                      {"\u062a\u0627\u06cc\u06cc\u062f"}
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["convertJalaliToGregorian"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $state.datePickers.value.year;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.datePickers.value.month;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              (() => {
                                try {
                                  return $state.datePickers.value.day;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions[
                            "Fragment.convertJalaliToGregorian"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["convertJalaliToGregorian"] != null &&
                      typeof $steps["convertJalaliToGregorian"] === "object" &&
                      typeof $steps["convertJalaliToGregorian"].then ===
                        "function"
                    ) {
                      $steps["convertJalaliToGregorian"] = await $steps[
                        "convertJalaliToGregorian"
                      ];
                    }

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.birthday2 =
                                  $steps.convertJalaliToGregorian;
                                function calculateAge(birthDateStr) {
                                  const today = new Date();
                                  const birthDate = new Date(birthDateStr);
                                  let age =
                                    today.getFullYear() -
                                    birthDate.getFullYear();
                                  const monthDiff =
                                    today.getMonth() - birthDate.getMonth();
                                  const dayDiff =
                                    today.getDate() - birthDate.getDate();
                                  if (
                                    monthDiff < 0 ||
                                    (monthDiff === 0 && dayDiff < 0)
                                  ) {
                                    age--;
                                  }
                                  return age;
                                }
                                return ($state.age = calculateAge(
                                  $state.birthday2
                                ));
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }

                    $steps["format"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $state.birthday2;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              undefined,
                              "jD jMMMM jYYYY"
                            ]
                          };
                          return $globalActions["Fragment.formatDate"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["format"] != null &&
                      typeof $steps["format"] === "object" &&
                      typeof $steps["format"].then === "function"
                    ) {
                      $steps["format"] = await $steps["format"];
                    }

                    $steps["updateBirthdayValue"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["birthday", "value"]
                            },
                            operation: 0,
                            value: $steps.format
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBirthdayValue"] != null &&
                      typeof $steps["updateBirthdayValue"] === "object" &&
                      typeof $steps["updateBirthdayValue"].then === "function"
                    ) {
                      $steps["updateBirthdayValue"] = await $steps[
                        "updateBirthdayValue"
                      ];
                    }

                    $steps["updateBirthday3Value"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["birthday3", "value"]
                            },
                            operation: 0,
                            value: $steps.format
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateBirthday3Value"] != null &&
                      typeof $steps["updateBirthday3Value"] === "object" &&
                      typeof $steps["updateBirthday3Value"].then === "function"
                    ) {
                      $steps["updateBirthday3Value"] = await $steps[
                        "updateBirthday3Value"
                      ];
                    }

                    $steps["updateModalOpen"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modal", "open"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateModalOpen"] != null &&
                      typeof $steps["updateModalOpen"] === "object" &&
                      typeof $steps["updateModalOpen"].then === "function"
                    ) {
                      $steps["updateModalOpen"] = await $steps[
                        "updateModalOpen"
                      ];
                    }
                  }}
                  size={"extraLarge"}
                />
              </Stack__>
            }
            className={classNames("__wab_instance", sty.modal, {
              [sty.modalselectImage2]: hasVariant(
                $state,
                "selectImage2",
                "selectImage2"
              ),
              [sty.modalshow_slide1]: hasVariant($state, "show", "slide1"),
              [sty.modalshow_slide2]: hasVariant($state, "show", "slide2")
            })}
            onBack={async () => {
              const $steps = {};

              $steps["updateModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["modal", "open"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateModalOpen"] != null &&
                typeof $steps["updateModalOpen"] === "object" &&
                typeof $steps["updateModalOpen"].then === "function"
              ) {
                $steps["updateModalOpen"] = await $steps["updateModalOpen"];
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["modal", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["modal", "open"])}
            title={null}
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect, {
              [sty.sideEffectglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.sideEffectshow_main]: hasVariant($state, "show", "main"),
              [sty.sideEffectshow_slide2]: hasVariant($state, "show", "slide2")
            })}
            onMount={async () => {
              const $steps = {};

              $steps["logInstall"] = (
                localStorage.getItem("install") ? false : true
              )
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://api.friendschat.ir/log/install",
                        undefined,
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: {
                                appid: "your-app-id",
                                Authorization: "Bearer your-token",
                                "Content-Type": "application/json",
                                Version: "1.0"
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["logInstall"] != null &&
                typeof $steps["logInstall"] === "object" &&
                typeof $steps["logInstall"].then === "function"
              ) {
                $steps["logInstall"] = await $steps["logInstall"];
              }

              $steps["logInstallset"] = (
                localStorage.getItem("install") ? false : true
              )
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return localStorage.setItem("install", "true");
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["logInstallset"] != null &&
                typeof $steps["logInstallset"] === "object" &&
                typeof $steps["logInstallset"].then === "function"
              ) {
                $steps["logInstallset"] = await $steps["logInstallset"];
              }

              $steps["logLaunch"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://api.friendschat.ir/log/launch",
                        undefined,
                        undefined,
                        (() => {
                          try {
                            return {
                              headers: {
                                appid: "your-app-id",
                                Authorization: "Bearer your-token",
                                "Content-Type": "application/json",
                                Version: "1.0"
                              }
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["logLaunch"] != null &&
                typeof $steps["logLaunch"] === "object" &&
                typeof $steps["logLaunch"].then === "function"
              ) {
                $steps["logLaunch"] = await $steps["logLaunch"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          var getCookie = name => {
                            const cookies = document.cookie.split("; ");
                            for (let cookie of cookies) {
                              const [key, value] = cookie.split("=");
                              if (key === name) return value;
                            }
                            return "";
                          };
                          return ($state.token = getCookie("token"));
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["usersData"] =
                $state.token != "" && $state.token != null
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "GET",
                          "https://api.friendschat.ir/users/data",
                          undefined,
                          undefined,
                          (() => {
                            try {
                              return {
                                headers: {
                                  appid: "your-app-id",
                                  Authorization: $state.token,
                                  "Content-Type": "application/json",
                                  Version: "1.0"
                                }
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["usersData"] != null &&
                typeof $steps["usersData"] === "object" &&
                typeof $steps["usersData"].then === "function"
              ) {
                $steps["usersData"] = await $steps["usersData"];
              }

              $steps["updateUserInfo"] = $steps.usersData?.data
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["userInfo"]
                      },
                      operation: 0,
                      value: $steps.usersData.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateUserInfo"] != null &&
                typeof $steps["updateUserInfo"] === "object" &&
                typeof $steps["updateUserInfo"].then === "function"
              ) {
                $steps["updateUserInfo"] = await $steps["updateUserInfo"];
              }

              $steps["updateSplash"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["splash"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSplash"] != null &&
                typeof $steps["updateSplash"] === "object" &&
                typeof $steps["updateSplash"].then === "function"
              ) {
                $steps["updateSplash"] = await $steps["updateSplash"];
              }

              $steps["updateShow"] =
                $state.token != "" && $steps.usersData?.data
                  ? (() => {
                      const actionArgs = {
                        vgroup: "show",
                        operation: 0,
                        value: "main"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateShow"] != null &&
                typeof $steps["updateShow"] === "object" &&
                typeof $steps["updateShow"].then === "function"
              ) {
                $steps["updateShow"] = await $steps["updateShow"];
              }

              $steps["updateShow2"] =
                $state.token == ""
                  ? (() => {
                      const actionArgs = {
                        vgroup: "show",
                        operation: 0,
                        value: "slide1"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        $stateSet($state, vgroup, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateShow2"] != null &&
                typeof $steps["updateShow2"] === "object" &&
                typeof $steps["updateShow2"].then === "function"
              ) {
                $steps["updateShow2"] = await $steps["updateShow2"];
              }

              $steps["runCode2"] =
                $state.token != "" && !$steps.usersData?.data
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["noInternet"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }
            }}
          />

          <ApiRequest
            data-plasmic-name={"shop"}
            data-plasmic-override={overrides.shop}
            className={classNames("__wab_instance", sty.shop, {
              [sty.shopchatViow]: hasVariant($state, "chatViow", "chatViow"),
              [sty.shopshop2_chatViow]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "shop2", "shop2")
            })}
            config={{
              headers: {
                appid: 2,
                Authorization: "Bearer your-token",
                "Content-Type": "application/json",
                Version: "2.0.1 Google"
              }
            }}
            errorDisplay={null}
            loadingDisplay={null}
            method={"GET"}
            onError={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "error"]).apply(
                null,
                eventArgs
              );
            }}
            onLoading={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "loading"]).apply(
                null,
                eventArgs
              );
            }}
            onSuccess={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shop", "data"]).apply(
                null,
                eventArgs
              );
            }}
            shouldFetch={true}
            url={"https://api.friendschat.ir/shop/get"}
          />

          <ShopModal
            data-plasmic-name={"shopModal"}
            data-plasmic-override={overrides.shopModal}
            active={
              hasVariant($state, "chatViow", "chatViow") ? false : undefined
            }
            className={classNames("__wab_instance", sty.shopModal, {
              [sty.shopModalchatViow]: hasVariant(
                $state,
                "chatViow",
                "chatViow"
              ),
              [sty.shopModalshop2]: hasVariant($state, "shop2", "shop2"),
              [sty.shopModalshop2_chatViow]:
                hasVariant($state, "chatViow", "chatViow") &&
                hasVariant($state, "shop2", "shop2"),
              [sty.shopModalshop2_show_main]:
                hasVariant($state, "show", "main") &&
                hasVariant($state, "shop2", "shop2"),
              [sty.shopModalshow_main]: hasVariant($state, "show", "main")
            })}
            data={(() => {
              try {
                return $state.shop.data;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onBack={async () => {
              const $steps = {};

              $steps["updateShopModalOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["shopModal", "open"]
                      },
                      operation: 4
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, !oldValue);
                      return !oldValue;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateShopModalOpen"] != null &&
                typeof $steps["updateShopModalOpen"] === "object" &&
                typeof $steps["updateShopModalOpen"].then === "function"
              ) {
                $steps["updateShopModalOpen"] = await $steps[
                  "updateShopModalOpen"
                ];
              }
            }}
            onOpenChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["shopModal", "open"]).apply(
                null,
                eventArgs
              );

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            open={generateStateValueProp($state, ["shopModal", "open"])}
          />

          {(() => {
            try {
              return $state.splash;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"splash2"}
              data-plasmic-override={overrides.splash2}
              className={classNames(projectcss.all, sty.splash2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xj2Sh)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__nySsk)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"150px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/metoo/images/unnamedPng.png",
                    fullWidth: 512,
                    fullHeight: 512,
                    aspectRatio: undefined
                  }}
                />

                <MetoLabel
                  className={classNames("__wab_instance", sty.metoLabel__gxNaO)}
                  size={"lg"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__etito
                    )}
                  >
                    {"\u0645\u06cc\u062a\u0648"}
                  </div>
                </MetoLabel>
                <MetoLabel
                  className={classNames("__wab_instance", sty.metoLabel__n4QX)}
                  size={"lg"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k2FDk
                    )}
                  >
                    {
                      "\u0645\u0644\u0627\u0642\u0627\u062a \u0648 \u0622\u0634\u0646\u0627\u06cc\u06cc \u0628\u0627 \u062f\u0648\u0633\u062a\u0627\u0646"
                    }
                  </div>
                </MetoLabel>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v6NUl)}
              >
                <MetoLabel
                  className={classNames("__wab_instance", sty.metoLabel__n1TqB)}
                  size={"lg"}
                >
                  {
                    "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
                  }
                </MetoLabel>
                <Icon11Icon
                  className={classNames(projectcss.all, sty.svg__wmPuT)}
                  role={"img"}
                />
              </Stack__>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.noInternet;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"noNet"}
              data-plasmic-override={overrides.noNet}
              className={classNames(projectcss.all, sty.noNet)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__s38XT)}
              >
                <LottieWrapper
                  data-plasmic-name={"lottie"}
                  data-plasmic-override={overrides.lottie}
                  animationData={{
                    nm: "no internet",
                    ddd: 0,
                    h: 1245,
                    w: 1452,
                    meta: { g: "LottieFiles AE 0.1.20" },
                    layers: [
                      {
                        ty: 0,
                        nm: "slowed",
                        sr: 1.7,
                        st: 0,
                        op: 58,
                        ip: 0,
                        hd: false,
                        ddd: 0,
                        bm: 0,
                        hasMask: false,
                        ao: 0,
                        ks: {
                          a: { a: 0, k: [726, 622.5, 0], ix: 1 },
                          s: { a: 0, k: [100, 100, 100], ix: 6 },
                          sk: { a: 0, k: 0 },
                          p: { a: 0, k: [726, 622.5, 0], ix: 2 },
                          r: { a: 0, k: 0, ix: 10 },
                          sa: { a: 0, k: 0 },
                          o: { a: 0, k: 100, ix: 11 }
                        },
                        ef: [],
                        w: 1452,
                        h: 1245,
                        refId: "comp_0",
                        ind: 1
                      }
                    ],
                    v: "5.5.7",
                    fr: 30,
                    op: 58,
                    ip: 0,
                    assets: [
                      {
                        nm: "",
                        id: "comp_0",
                        layers: [
                          {
                            ty: 4,
                            nm: "no internet Outlines",
                            sr: 1,
                            st: 0,
                            op: 35,
                            ip: 0,
                            hd: false,
                            ddd: 0,
                            bm: 0,
                            hasMask: false,
                            ao: 0,
                            ks: {
                              a: { a: 0, k: [741.057, 835.768, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 },
                              sk: { a: 0, k: 0 },
                              p: { a: 0, k: [725.057, 839.768, 0], ix: 2 },
                              r: {
                                a: 1,
                                k: [
                                  {
                                    o: { x: 0.333, y: 0 },
                                    i: { x: 0.667, y: 1 },
                                    s: [0],
                                    t: 0
                                  },
                                  {
                                    o: { x: 0.333, y: 0 },
                                    i: { x: 0.667, y: 1 },
                                    s: [33],
                                    t: 14
                                  },
                                  {
                                    o: { x: 0.333, y: 0 },
                                    i: { x: 0.667, y: 1 },
                                    s: [-33],
                                    t: 27
                                  },
                                  { s: [0], t: 35 }
                                ],
                                ix: 10
                              },
                              sa: { a: 0, k: 0 },
                              o: { a: 0, k: 100, ix: 11 }
                            },
                            ef: [],
                            shapes: [
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 1",
                                ix: 1,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [-27.537, 0.031],
                                          [0, 0]
                                        ],
                                        o: [
                                          [0, 0],
                                          [20.96, -0.024],
                                          [0, 0]
                                        ],
                                        v: [
                                          [-36.6, 10.092],
                                          [1.72, -10.068],
                                          [36.6, 7.212]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 21, ix: 5 },
                                    c: { a: 0, k: [1, 1, 1], ix: 3 }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [742.32, 376.628], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 2",
                                ix: 2,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: true,
                                        i: [
                                          [11.233, 0],
                                          [0, -11.234],
                                          [-11.233, 0],
                                          [0, 11.233]
                                        ],
                                        o: [
                                          [-11.233, 0],
                                          [0, 11.233],
                                          [11.233, 0],
                                          [0, -11.234]
                                        ],
                                        v: [
                                          [0, -20.34],
                                          [-20.34, 0],
                                          [0, 20.34],
                                          [20.34, 0]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "fl",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Fill",
                                    nm: "Fill 1",
                                    c: { a: 0, k: [1, 1, 1], ix: 4 },
                                    r: 1,
                                    o: { a: 0, k: 100, ix: 5 }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [792.92, 310.34], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 3",
                                ix: 3,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: true,
                                        i: [
                                          [11.233, 0],
                                          [0, -11.234],
                                          [-11.233, 0],
                                          [0, 11.233]
                                        ],
                                        o: [
                                          [-11.233, 0],
                                          [0, 11.233],
                                          [11.233, 0],
                                          [0, -11.234]
                                        ],
                                        v: [
                                          [0, -20.34],
                                          [-20.34, 0],
                                          [0, 20.34],
                                          [20.34, 0]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "fl",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Fill",
                                    nm: "Fill 1",
                                    c: { a: 0, k: [1, 1, 1], ix: 4 },
                                    r: 1,
                                    o: { a: 0, k: 100, ix: 5 }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [691.04, 310.34], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 4",
                                ix: 4,
                                cix: 2,
                                np: 4,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: true,
                                        i: [
                                          [33.994, 0],
                                          [26.394, -16.971],
                                          [13.096, -23.744],
                                          [0.082, -1.649],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [-16.416, -26.713],
                                          [-13.689, -9.652],
                                          [-22.175, 0],
                                          [-19.45, 25.316],
                                          [-0.659, 2.882],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [21.449, 37.189],
                                          [20.187, 13.028]
                                        ],
                                        o: [
                                          [-36.602, 0],
                                          [-21.343, 13.723],
                                          [-21.664, 39.277],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0.238, 1.124],
                                          [10.078, 16.4],
                                          [17.861, 12.594],
                                          [61.265, 0],
                                          [20.344, -26.48],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [-0.141, -1.563],
                                          [-12.974, -22.492],
                                          [-25.135, -16.22]
                                        ],
                                        v: [
                                          [3.21, -373.548],
                                          [-91.727, -347.972],
                                          [-143.628, -291.507],
                                          [-167.549, -211.393],
                                          [-167.62, -209.944],
                                          [-167.51, -208.497],
                                          [-131.854, 257.738],
                                          [-131.737, 259.267],
                                          [-131.419, 260.767],
                                          [-108.961, 315.309],
                                          [-73.143, 354.569],
                                          [-12.807, 373.548],
                                          [103.953, 318.055],
                                          [131.312, 262.652],
                                          [131.693, 260.973],
                                          [131.823, 259.256],
                                          [167.479, -215.894],
                                          [167.62, -217.791],
                                          [167.45, -219.685],
                                          [142.294, -295.573],
                                          [92.32, -349.103]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 2",
                                    ix: 2,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: true,
                                        i: [
                                          [-140.811, 0],
                                          [0, 0],
                                          [0, 0],
                                          [100.465, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],
                                        o: [
                                          [129.318, 0],
                                          [0, 0],
                                          [0, 0],
                                          [-76.004, 0],
                                          [0, 0],
                                          [0, 0]
                                        ],
                                        v: [
                                          [3.21, -350.548],
                                          [144.542, -217.615],
                                          [108.888, 257.533],
                                          [-12.807, 350.548],
                                          [-108.922, 255.983],
                                          [-144.578, -210.251]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "mm",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Filter - Merge",
                                    nm: "Merge Paths 1",
                                    mm: 1
                                  },
                                  {
                                    ty: "fl",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Fill",
                                    nm: "Fill 1",
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 4
                                    },
                                    r: 1,
                                    o: { a: 0, k: 100, ix: 5 }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [741.057, 462.22], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 5",
                                ix: 5,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: true,
                                        i: [
                                          [56.581, 0],
                                          [21.21, 34.518],
                                          [0.221, 1.045],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [-20.395, 36.978],
                                          [-78.351, 0],
                                          [-19.003, -32.947],
                                          [-0.132, -1.46],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [19.177, -24.962]
                                        ],
                                        o: [
                                          [-35.284, 0],
                                          [-15.39, -25.042],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [0.076, -1.541],
                                          [19.147, -34.713],
                                          [72.292, 0],
                                          [20.199, 35.022],
                                          [0, 0],
                                          [0, 0],
                                          [0, 0],
                                          [-0.239, 1.05],
                                          [-17.875, 23.267]
                                        ],
                                        v: [
                                          [-12.798, 362.048],
                                          [-99.154, 309.286],
                                          [-120.16, 258.376],
                                          [-120.32, 257.626],
                                          [-156.091, -210.097],
                                          [-156.055, -210.822],
                                          [-133.549, -285.954],
                                          [3.219, -362.048],
                                          [132.341, -289.827],
                                          [156.005, -218.649],
                                          [156.091, -217.702],
                                          [120.299, 259.254],
                                          [120.108, 260.093],
                                          [94.843, 311.047]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "fl",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Fill",
                                    nm: "Fill 1",
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 4
                                    },
                                    r: 1,
                                    o: { a: 0, k: 100, ix: 5 }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [741.049, 462.22], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              }
                            ],
                            ind: 1
                          },
                          {
                            ty: 4,
                            nm: "no internet Outlines",
                            sr: 1,
                            st: 0,
                            op: 35,
                            ip: 0,
                            hd: false,
                            ddd: 0,
                            bm: 0,
                            hasMask: false,
                            ao: 0,
                            ks: {
                              a: { a: 0, k: [726, 622.5, 0], ix: 1 },
                              s: { a: 0, k: [100, 100, 100], ix: 6 },
                              sk: { a: 0, k: 0 },
                              p: { a: 0, k: [710, 626.5, 0], ix: 2 },
                              r: { a: 0, k: 0, ix: 10 },
                              sa: { a: 0, k: 0 },
                              o: { a: 0, k: 100, ix: 11 }
                            },
                            ef: [],
                            shapes: [
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 6",
                                ix: 1,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [18.751, 18.751]
                                        ],
                                        o: [
                                          [-18.751, 18.751],
                                          [0, 0]
                                        ],
                                        v: [
                                          [33.951, -9.375],
                                          [-33.951, -9.375]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [735.682, 993.03], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 7",
                                ix: 2,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [-18.751, 18.751]
                                        ],
                                        o: [
                                          [-18.751, -18.751],
                                          [0, 0]
                                        ],
                                        v: [
                                          [9.375, 33.951],
                                          [9.375, -33.951]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [692.355, 949.703], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 8",
                                ix: 3,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [-18.751, -18.75]
                                        ],
                                        o: [
                                          [18.751, -18.75],
                                          [0, 0]
                                        ],
                                        v: [
                                          [-33.951, 9.375],
                                          [33.951, 9.375]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [735.682, 906.377], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 9",
                                ix: 4,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [18.75, -18.751]
                                        ],
                                        o: [
                                          [18.75, 18.751],
                                          [0, 0]
                                        ],
                                        v: [
                                          [-9.375, -33.951],
                                          [-9.375, 33.951]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [779.008, 949.703], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 10",
                                ix: 5,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [-93.605, -93.604]
                                        ],
                                        o: [
                                          [93.604, -93.604],
                                          [0, 0]
                                        ],
                                        v: [
                                          [-169.757, 46.804],
                                          [169.757, 46.8]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [735.68, 667.146], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 11",
                                ix: 6,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [-168.485, -168.486]
                                        ],
                                        o: [
                                          [168.488, -168.489],
                                          [0, 0]
                                        ],
                                        v: [
                                          [-305.56, 84.244],
                                          [305.561, 84.241]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [735.68, 493.901], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              },
                              {
                                ty: "gr",
                                bm: 0,
                                hd: false,
                                mn: "ADBE Vector Group",
                                nm: "Group 12",
                                ix: 7,
                                cix: 2,
                                np: 2,
                                it: [
                                  {
                                    ty: "sh",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Shape - Group",
                                    nm: "Path 1",
                                    ix: 1,
                                    d: 1,
                                    ks: {
                                      a: 0,
                                      k: {
                                        c: false,
                                        i: [
                                          [0, 0],
                                          [-243.371, -243.37]
                                        ],
                                        o: [
                                          [243.369, -243.37],
                                          [0, 0]
                                        ],
                                        v: [
                                          [-441.365, 121.686],
                                          [441.365, 121.683]
                                        ]
                                      },
                                      ix: 2
                                    }
                                  },
                                  {
                                    ty: "st",
                                    bm: 0,
                                    hd: false,
                                    mn: "ADBE Vector Graphic - Stroke",
                                    nm: "Stroke 1",
                                    lc: 2,
                                    lj: 2,
                                    ml: 1,
                                    o: { a: 0, k: 100, ix: 4 },
                                    w: { a: 0, k: 100, ix: 5 },
                                    c: {
                                      a: 0,
                                      k: [0.4549, 0.1961, 0.8824],
                                      ix: 3
                                    }
                                  },
                                  {
                                    ty: "tr",
                                    a: { a: 0, k: [0, 0], ix: 1 },
                                    s: { a: 0, k: [100, 100], ix: 3 },
                                    sk: { a: 0, k: 0, ix: 4 },
                                    p: { a: 0, k: [735.681, 320.655], ix: 2 },
                                    r: { a: 0, k: 0, ix: 6 },
                                    sa: { a: 0, k: 0, ix: 5 },
                                    o: { a: 0, k: 100, ix: 7 }
                                  }
                                ]
                              }
                            ],
                            ind: 2
                          }
                        ]
                      }
                    ]
                  }}
                  className={classNames("__wab_instance", sty.lottie)}
                />

                <MetoLabel
                  className={classNames("__wab_instance", sty.metoLabel__ilbfN)}
                  size={"lg"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__maEb
                    )}
                  >
                    {
                      "\u062e\u0637\u0627 \u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0627\u0632 \u0633\u0631\u0648\u0631"
                    }
                  </div>
                </MetoLabel>
                <MetoLabel
                  className={classNames(
                    "__wab_instance",
                    sty.metoLabel___29YlT
                  )}
                  size={"lg"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sj9Ap
                    )}
                  >
                    {
                      "\u062f\u0631 \u0628\u0631\u0642\u0631\u0627\u0631\u06cc \u0627\u0631\u062a\u0628\u0627\u0637 \u0628\u0627 \u0634\u0628\u06a9\u0647 \u0645\u0634\u06a9\u0644\u06cc \u067e\u06cc\u0634 \u0622\u0645\u062f\u0647\u060c \u0644\u0637\u0641\u0627 \u0627\u0632 \u0648\u062c\u0648\u062f \u062f\u0633\u062a\u0631\u0633\u06cc \u0628\u0647 \u0634\u0628\u06a9\u0647 \u0645\u0637\u0645\u0639\u0646 \u0648 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u06a9\u0646\u06cc\u062f."
                    }
                  </div>
                </MetoLabel>
                <MetoButton2
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__piXfy
                      )}
                    >
                      {"\u062a\u0644\u0627\u0634 \u0645\u062c\u062f\u062f"}
                    </div>
                  }
                  load={generateStateValueProp($state, ["button", "load"])}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return location.reload();
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                  onLoadChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, ["button", "load"]).apply(
                      null,
                      eventArgs
                    );

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  roundedFull={true}
                  size={"extraLarge"}
                />
              </Stack__>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "slide1",
    "login1",
    "name",
    "birthday",
    "gender3",
    "slide2",
    "login12",
    "stateInput",
    "stateList",
    "cityInput",
    "cityList",
    "addres",
    "next",
    "selectImage",
    "img",
    "sendImage",
    "embedHtml",
    "profile",
    "userProfile",
    "edit",
    "editName",
    "bio",
    "birthday3",
    "radioGroup",
    "stateInput2",
    "stateList2",
    "cityInput2",
    "cityList2",
    "addres2",
    "editProfile",
    "chatViow2",
    "chatPage",
    "footer",
    "main",
    "stateApi",
    "cityApi",
    "modal",
    "datePickers",
    "sideEffect",
    "shop",
    "shopModal",
    "splash2",
    "noNet",
    "lottie",
    "button"
  ],
  slide1: ["slide1", "login1", "name", "birthday", "gender3"],
  login1: ["login1", "name", "birthday", "gender3"],
  name: ["name"],
  birthday: ["birthday"],
  gender3: ["gender3"],
  slide2: [
    "slide2",
    "login12",
    "stateInput",
    "stateList",
    "cityInput",
    "cityList",
    "addres",
    "next"
  ],
  login12: [
    "login12",
    "stateInput",
    "stateList",
    "cityInput",
    "cityList",
    "addres",
    "next"
  ],
  stateInput: ["stateInput"],
  stateList: ["stateList"],
  cityInput: ["cityInput"],
  cityList: ["cityList"],
  addres: ["addres"],
  next: ["next"],
  selectImage: ["selectImage", "img", "sendImage", "embedHtml"],
  img: ["img"],
  sendImage: ["sendImage"],
  embedHtml: ["embedHtml"],
  profile: ["profile", "userProfile"],
  userProfile: ["userProfile"],
  edit: [
    "edit",
    "editName",
    "bio",
    "birthday3",
    "radioGroup",
    "stateInput2",
    "stateList2",
    "cityInput2",
    "cityList2",
    "addres2",
    "editProfile"
  ],
  editName: ["editName"],
  bio: ["bio"],
  birthday3: ["birthday3"],
  radioGroup: ["radioGroup"],
  stateInput2: ["stateInput2"],
  stateList2: ["stateList2"],
  cityInput2: ["cityInput2"],
  cityList2: ["cityList2"],
  addres2: ["addres2"],
  editProfile: ["editProfile"],
  chatViow2: ["chatViow2", "chatPage"],
  chatPage: ["chatPage"],
  footer: ["footer"],
  main: ["main"],
  stateApi: ["stateApi"],
  cityApi: ["cityApi"],
  modal: ["modal", "datePickers"],
  datePickers: ["datePickers"],
  sideEffect: ["sideEffect"],
  shop: ["shop"],
  shopModal: ["shopModal"],
  splash2: ["splash2"],
  noNet: ["noNet", "lottie", "button"],
  lottie: ["lottie"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  slide1: typeof Reveal;
  login1: "div";
  name: typeof MetoTextInput;
  birthday: typeof MetoTextInput;
  gender3: typeof MetoRadioGroup;
  slide2: typeof Reveal;
  login12: "div";
  stateInput: typeof MetoTextInput;
  stateList: typeof List;
  cityInput: typeof MetoTextInput;
  cityList: typeof List;
  addres: typeof MetoTextInput;
  next: typeof MetoButton2;
  selectImage: typeof Reveal;
  img: typeof PlasmicImg__;
  sendImage: typeof MetoButton2;
  embedHtml: typeof Embed;
  profile: typeof Reveal;
  userProfile: typeof UserProfile;
  edit: typeof Reveal;
  editName: typeof MetoTextInput;
  bio: typeof MetoTextInput;
  birthday3: typeof MetoTextInput;
  radioGroup: typeof MetoRadioGroup;
  stateInput2: typeof MetoTextInput;
  stateList2: typeof List;
  cityInput2: typeof MetoTextInput;
  cityList2: typeof List;
  addres2: typeof MetoTextInput;
  editProfile: typeof MetoButton2;
  chatViow2: typeof Reveal;
  chatPage: typeof ChatPage;
  footer: typeof Footer;
  main: typeof Main;
  stateApi: typeof ApiRequest;
  cityApi: typeof ApiRequest;
  modal: typeof Modal2;
  datePickers: typeof DatePickers;
  sideEffect: typeof SideEffect;
  shop: typeof ApiRequest;
  shopModal: typeof ShopModal;
  splash2: "div";
  noNet: "div";
  lottie: typeof LottieWrapper;
  button: typeof MetoButton2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomePage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomePage__VariantsArgs;
    args?: PlasmicHomePage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomePage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomePage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomePage__ArgProps,
          internalVariantPropNames: PlasmicHomePage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomePage";
  } else {
    func.displayName = `PlasmicHomePage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomePage = Object.assign(
  // Top-level PlasmicHomePage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    slide1: makeNodeComponent("slide1"),
    login1: makeNodeComponent("login1"),
    _name: makeNodeComponent("name"),
    birthday: makeNodeComponent("birthday"),
    gender3: makeNodeComponent("gender3"),
    slide2: makeNodeComponent("slide2"),
    login12: makeNodeComponent("login12"),
    stateInput: makeNodeComponent("stateInput"),
    stateList: makeNodeComponent("stateList"),
    cityInput: makeNodeComponent("cityInput"),
    cityList: makeNodeComponent("cityList"),
    addres: makeNodeComponent("addres"),
    next: makeNodeComponent("next"),
    selectImage: makeNodeComponent("selectImage"),
    img: makeNodeComponent("img"),
    sendImage: makeNodeComponent("sendImage"),
    embedHtml: makeNodeComponent("embedHtml"),
    profile: makeNodeComponent("profile"),
    userProfile: makeNodeComponent("userProfile"),
    edit: makeNodeComponent("edit"),
    editName: makeNodeComponent("editName"),
    bio: makeNodeComponent("bio"),
    birthday3: makeNodeComponent("birthday3"),
    radioGroup: makeNodeComponent("radioGroup"),
    stateInput2: makeNodeComponent("stateInput2"),
    stateList2: makeNodeComponent("stateList2"),
    cityInput2: makeNodeComponent("cityInput2"),
    cityList2: makeNodeComponent("cityList2"),
    addres2: makeNodeComponent("addres2"),
    editProfile: makeNodeComponent("editProfile"),
    chatViow2: makeNodeComponent("chatViow2"),
    chatPage: makeNodeComponent("chatPage"),
    footer: makeNodeComponent("footer"),
    main: makeNodeComponent("main"),
    stateApi: makeNodeComponent("stateApi"),
    cityApi: makeNodeComponent("cityApi"),
    modal: makeNodeComponent("modal"),
    datePickers: makeNodeComponent("datePickers"),
    sideEffect: makeNodeComponent("sideEffect"),
    shop: makeNodeComponent("shop"),
    shopModal: makeNodeComponent("shopModal"),
    splash2: makeNodeComponent("splash2"),
    noNet: makeNodeComponent("noNet"),
    lottie: makeNodeComponent("lottie"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHomePage
    internalVariantProps: PlasmicHomePage__VariantProps,
    internalArgProps: PlasmicHomePage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomePage;
/* prettier-ignore-end */
