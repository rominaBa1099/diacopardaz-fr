/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: -kGhM5VnTq5-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { SwiperSlider } from "@/components/SwiperSlider"; // plasmic-import: 1MaU8rw9HIJe/codeComponent
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import ShopItem from "../../ShopItem"; // plasmic-import: eklDzLBBF2Fs/component
import MetoButton from "../../MetoButton"; // plasmic-import: Cz1go1zIfhZZ/component
import { DialogClose } from "@plasmicpkgs/radix-ui";
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: SjBUwY_Y_i3-/codeComponent

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicShopModal.module.css"; // plasmic-import: -kGhM5VnTq5-/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: RJhoy2uXebLi/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: N5pcwqnXvyIA/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: 661nEHocwV7y/icon

createPlasmicElementProxy;

export type PlasmicShopModal__VariantMembers = {
  noTrigger: "noTrigger";
  hideHeader: "hideHeader";
  noSpacing: "noSpacing";
  fullScreen: "fullScreen";
  background: "dark" | "black" | "exit" | "secound";
};
export type PlasmicShopModal__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
  background?: SingleChoiceArg<"dark" | "black" | "exit" | "secound">;
};
type VariantPropType = keyof PlasmicShopModal__VariantsArgs;
export const PlasmicShopModal__VariantProps = new Array<VariantPropType>(
  "noTrigger",
  "hideHeader",
  "noSpacing",
  "fullScreen",
  "background"
);

export type PlasmicShopModal__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  onBack?: () => void;
  data?: any;
  active?: boolean;
  token?: string;
};
type ArgPropType = keyof PlasmicShopModal__ArgsType;
export const PlasmicShopModal__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "onBack",
  "data",
  "active",
  "token"
);

export type PlasmicShopModal__OverridesType = {
  dialog?: Flex__<typeof Dialog>;
  dialogContent?: Flex__<typeof DialogContent>;
  swiperSlider?: Flex__<typeof SwiperSlider>;
  metoLabel?: Flex__<typeof MetoLabel>;
  section?: Flex__<"section">;
  shopItem?: Flex__<typeof ShopItem>;
  button?: Flex__<typeof MetoButton>;
  dialogClose?: Flex__<typeof DialogClose>;
  svg?: Flex__<"svg">;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultShopModalProps {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  onBack?: () => void;
  data?: any;
  active?: boolean;
  token?: string;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
  background?: SingleChoiceArg<"dark" | "black" | "exit" | "secound">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShopModal__RenderFunc(props: {
  variants: PlasmicShopModal__VariantsArgs;
  args: PlasmicShopModal__ArgsType;
  overrides: PlasmicShopModal__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          data: {
            list: [],
            topList: [
              {
                id: 49,
                offer: 40,
                text: "\u0645\u0627\u0647\u0627\u0646\u0647: \u06f4\u06f9\u06f9 \u062a\u0648\u0645\u0646 ",
                selected: 0,
                badge:
                  "\u0628\u0647 \u0635\u0631\u0641\u0647 \u062a\u0631\u06cc\u0646",
                bgColor1: "",
                bgColor2: "",
                name: "3 \u0645\u0627\u0647\u0647",
                descc:
                  "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\r\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\r\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\r\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\r\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\r\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\r\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                dialog_descc:
                  "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\r\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\r\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\r\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\r\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\r\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\r\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                type: "sub",
                quantity: 3,
                price: 499000,
                fullPrice: 1200000,
                icon: "https://liom.storage.c2.liara.space/ff/v1.png"
              },
              {
                id: 48,
                offer: 35,
                text: "\u0645\u0627\u0647\u0627\u0646\u0647: \u06f3\u06f7\u06f9 \u062a\u0648\u0645\u0646",
                selected: 1,
                badge:
                  "\u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u062e\u0631\u06cc\u062f",
                bgColor1: "",
                bgColor2: "",
                name: "2 \u0645\u0627\u0647\u0647",
                descc:
                  "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                dialog_descc:
                  "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                type: "sub",
                quantity: 2,
                price: 379000,
                fullPrice: 500000,
                icon: "https://liom.storage.c2.liara.space/ff/v1.png"
              },
              {
                id: 46,
                offer: 0,
                text: "\u0645\u0627\u0647\u0627\u0646\u0647: \u06f2\u06f2\u06f9 \u062a\u0648\u0645\u0646 ",
                selected: 0,
                badge: null,
                bgColor1: "",
                bgColor2: "",
                name: "1 \u0645\u0627\u0647\u0647",
                descc:
                  "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                dialog_descc:
                  "\u2705 \u0646\u0627\u0645\u062d\u062f\u0648\u062f \u0628\u0647 \u0628\u0642\u06cc\u0647 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\n\u2705 \u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646\n\u2705 \u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\n\u2705 \u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f\n\u2705 \u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                type: "sub",
                quantity: 1,
                price: 229000,
                fullPrice: 0,
                icon: "https://liom.storage.c2.liara.space/ff/v1.png"
              }
            ],
            info: [
              {
                id: 1,
                title:
                  "\u067e\u06cc\u0627\u0645 \u062f\u0627\u062f\u0646 \u0646\u0627\u0645\u062d\u062f\u0648\u062f",
                text: "\u0647\u0645 \u062a\u0648 \u067e\u06cc\u0627\u0645 \u0628\u062f\u0647\u060c \u0647\u0645 \u0645\u06cc\u062a\u0648\u0646\u0646 \u0628\u0647\u062a \u062c\u0648\u0627\u0628 \u0628\u062f\u0646",
                icon: "",
                bgColor1: "#173b75",
                bgColor2: "#000000"
              },
              {
                id: 2,
                title:
                  "\u062c\u0633\u062a\u062c\u0648 \u0628\u0631 \u0627\u0633\u0627\u0633 \u0627\u0641\u0631\u0627\u062f \u0622\u0646\u0644\u0627\u06cc\u0646",
                text: "\u0627\u06cc\u0646\u0637\u0648\u0631\u06cc \u0633\u0631\u06cc\u0639\u062a\u0631 \u062f\u0648\u0633\u062a \u067e\u06cc\u062f\u0627 \u0645\u06cc\u06a9\u0646\u06cc",
                icon: "",
                bgColor1: "#152845",
                bgColor2: "#000000"
              },
              {
                id: 3,
                title:
                  "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0628\u0627\u0632\u062f\u06cc\u062f \u067e\u0631\u0648\u0641\u0627\u06cc\u0644",
                text: "\u0647\u0645\u0647 \u0645\u06cc\u0634\u0646\u0627\u0633\u0646\u062a \u0648 \u062e\u0648\u062f\u0634\u0648\u0646 \u0628\u0647\u062a \u067e\u06cc\u0627\u0645 \u0645\u06cc\u062f\u0646",
                icon: "",
                bgColor1: "#362705",
                bgColor2: "#523d0c"
              },
              {
                id: 4,
                title:
                  "\u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u062a \u0631\u0648 \u0646\u06af\u0627\u0647 \u06a9\u0631\u062f\u0647\u061f",
                text: "\u0628\u0628\u06cc\u0646 \u06a9\u06cc\u0627 \u0627\u0632\u062a \u06cc\u0648\u0627\u0634\u06a9\u06cc \u062e\u0648\u0634\u0634\u0648\u0646 \u0627\u0648\u0645\u062f\u0647",
                icon: "",
                bgColor1: "#4f0714",
                bgColor2: "#700b1e"
              },
              {
                id: 5,
                title:
                  "\u0627\u0631\u0633\u0627\u0644 \u0639\u06a9\u0633 \u062f\u0631 \u0686\u062a \u062e\u0635\u0648\u0635\u06cc",
                text: "\u0645\u06cc\u062a\u0648\u0646\u06cc \u062f\u0631 \u0686\u062a \u0639\u06a9\u0633 \u0628\u0641\u0631\u0633\u062a\u06cc \u0628\u0631\u0627\u06cc \u0628\u0642\u06cc\u0647",
                icon: "",
                bgColor1: "#1e2224",
                bgColor2: "#34383b"
              },
              {
                id: 6,
                title:
                  "\u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                text: "\u062f\u0642\u06cc\u0642\u0627 \u06a9\u06cc\u0627 \u0644\u0627\u06cc\u06a9\u062a \u06a9\u0631\u062f\u0646\u061f \u06a9\u0646\u062c\u06a9\u0627\u0648 \u0647\u0627",
                icon: "",
                bgColor1: "#272b1b",
                bgColor2: "#394029"
              },
              {
                id: 7,
                title:
                  "\u0645\u06cc\u062a\u0648\u0646\u06cc \u0628\u0628\u06cc\u0646\u06cc \u06a9\u06cc \u0628\u0644\u0627\u06a9\u062a \u06a9\u0631\u062f\u0647\u061f",
                text: "\u06a9\u06cc\u0627 \u0627\u0632\u062a \u0628\u062f\u0634\u0648\u0646 \u0645\u06cc\u0627\u062f\u061f \u06a9\u06cc \u0627\u0646\u061f",
                icon: "",
                bgColor1: "#192401",
                bgColor2: "#283608"
              }
            ]
          },
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      },
      {
        path: "hideHeader",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideHeader
      },
      {
        path: "noSpacing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noSpacing
      },
      {
        path: "fullScreen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fullScreen
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      },
      {
        path: "select",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.data.topList.find(i => i.selected == 1);
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1(),
    theme: useTheme()
  });

  return (
    <Dialog
      data-plasmic-name={"dialog"}
      data-plasmic-override={overrides.dialog}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.dialog,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [sty.dialogbackground_black]: hasVariant(
            $state,
            "background",
            "black"
          ),
          [sty.dialogbackground_dark]: hasVariant($state, "background", "dark"),
          [sty.dialogfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialogfullScreen_background_dark]:
            hasVariant($state, "background", "dark") &&
            hasVariant($state, "fullScreen", "fullScreen"),
          [sty.dialoghideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialognoSpacing]: hasVariant($state, "noSpacing", "noSpacing"),
          [sty.dialognoTrigger]: hasVariant($state, "noTrigger", "noTrigger")
        }
      )}
      defaultOpen={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["dialog", "open"])}
      overlayClassName={classNames({
        [sty["pcls_8GelTo_pmw43"]]: hasVariant(
          $state,
          "fullScreen",
          "fullScreen"
        ),
        [sty["pcls_GpmYZ6c0M1EP"]]:
          hasVariant($state, "fullScreen", "fullScreen") &&
          hasVariant(globalVariants, "screen", "mobileOnly"),
        [sty["pcls_RyCTbmIHfJJt"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        ),
        [sty["pcls__q6n1oHSzBCp"]]: true
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          )
        }
      )}
      triggerSlot={null}
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent, {
          [sty.dialogContentbackground_black]: hasVariant(
            $state,
            "background",
            "black"
          ),
          [sty.dialogContentbackground_dark]: hasVariant(
            $state,
            "background",
            "dark"
          ),
          [sty.dialogContentbackground_exit]: hasVariant(
            $state,
            "background",
            "exit"
          ),
          [sty.dialogContentbackground_secound]: hasVariant(
            $state,
            "background",
            "secound"
          ),
          [sty.dialogContentfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialogContentfullScreen_background_dark]:
            hasVariant($state, "background", "dark") &&
            hasVariant($state, "fullScreen", "fullScreen"),
          [sty.dialogContenthideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialogContentnoSpacing]: hasVariant(
            $state,
            "noSpacing",
            "noSpacing"
          )
        })}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_meto_deign_system_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          {
            [projectcss.global_theme_light]: hasVariant(
              globalVariants,
              "theme",
              "light"
            ),
            [projectcss.global_theme_light]: hasVariant(
              globalVariants,
              "theme",
              "light"
            )
          }
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8D8Qx)}>
          <SwiperSlider
            data-plasmic-name={"swiperSlider"}
            data-plasmic-override={overrides.swiperSlider}
            activeBulletColor={true ? "var(--antd-colorInfoText)" : undefined}
            autoplay={true}
            autoplayDelay={2000}
            bulletColor={true ? "var(--antd-colorWhite)" : undefined}
            className={
              classNames({ [sty["pcls_JkUSUVeuCM4C"]]: true }) +
              " " +
              classNames("__wab_instance", sty.swiperSlider)
            }
            loop={true}
            showPagination={true}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $props.data.info;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wo973)}
                  key={currentIndex}
                  style={(() => {
                    try {
                      return {
                        background: `linear-gradient(to bottom, ${currentItem.bgColor1}, ${currentItem.bgColor2})`
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                >
                  <MetoLabel
                    data-plasmic-name={"metoLabel"}
                    data-plasmic-override={overrides.metoLabel}
                    className={classNames("__wab_instance", sty.metoLabel)}
                    size={"lg"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zFiW
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </MetoLabel>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wMxy5
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.text;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              );
            })}
          </SwiperSlider>
        </div>
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section, {
            [sty.sectionbackground_black]: hasVariant(
              $state,
              "background",
              "black"
            ),
            [sty.sectionbackground_dark]: hasVariant(
              $state,
              "background",
              "dark"
            ),
            [sty.sectionfullScreen]: hasVariant(
              $state,
              "fullScreen",
              "fullScreen"
            ),
            [sty.sectionfullScreen_background_dark]:
              hasVariant($state, "background", "dark") &&
              hasVariant($state, "fullScreen", "fullScreen")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox___0NZNt, {
              [sty.freeBoxfullScreen_background_dark___0NZNtHtdylUU8X]:
                hasVariant($state, "background", "dark") &&
                hasVariant($state, "fullScreen", "fullScreen"),
              [sty.freeBoxhideHeader___0NZNtrgCIr]: hasVariant(
                $state,
                "hideHeader",
                "hideHeader"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__iIcyW)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.data.topList;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <ShopItem
                    data-plasmic-name={"shopItem"}
                    data-plasmic-override={overrides.shopItem}
                    className={classNames("__wab_instance", sty.shopItem)}
                    currentItem={currentItem}
                    key={currentIndex}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateSelect"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["select"]
                              },
                              operation: 0,
                              value: currentItem
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelect"] != null &&
                        typeof $steps["updateSelect"] === "object" &&
                        typeof $steps["updateSelect"].then === "function"
                      ) {
                        $steps["updateSelect"] = await $steps["updateSelect"];
                      }
                    }}
                    select={(() => {
                      try {
                        return currentItem.id == $state.select.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uvClu)}>
              <MetoButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={"success"}
                label={
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qwY3C
                      )}
                    >
                      {"\u062e\u0631\u06cc\u062f"}
                    </div>
                    {(() => {
                      try {
                        return $state.select.fullPrice != 0;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___98W2P
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `${$state.select.fullPrice.toLocaleString()} تومان `;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "150\u0634\u0632\u0645\u062a\u0634\u0645\u0632";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zeyYt
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return `${$state.select.price.toLocaleString()} تومان `;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "150\u0634\u0632\u0645\u062a\u0634\u0645\u0632";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </React.Fragment>
                }
                load={generateStateValueProp($state, ["button", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateButtonLoad"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button", "load"]
                          },
                          operation: 4,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButtonLoad"] != null &&
                    typeof $steps["updateButtonLoad"] === "object" &&
                    typeof $steps["updateButtonLoad"].then === "function"
                  ) {
                    $steps["updateButtonLoad"] = await $steps[
                      "updateButtonLoad"
                    ];
                  }

                  $steps["iink"] = true
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api2.friendschat.ir/shop/buy",
                            undefined,
                            (() => {
                              try {
                                return {
                                  code: "",
                                  id: $state.select.id,
                                  gate: 0,
                                  host: "https://apps.liom.app/login/",
                                  scheme: "meeto"
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return {
                                  headers: {
                                    appid: 2,
                                    Authorization: $props.token,
                                    "Content-Type": "application/json",
                                    Version: "2.0.1 Google"
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["iink"] != null &&
                    typeof $steps["iink"] === "object" &&
                    typeof $steps["iink"].then === "function"
                  ) {
                    $steps["iink"] = await $steps["iink"];
                  }

                  $steps["runCode"] = $steps.iink?.data?.success
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              return window.open(
                                $steps.iink.data.url +
                                  "?host=https://apps.liom.app/login/&scheme=meeto",
                                "_blank"
                              );
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateButtonLoad2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button", "load"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButtonLoad2"] != null &&
                    typeof $steps["updateButtonLoad2"] === "object" &&
                    typeof $steps["updateButtonLoad2"].then === "function"
                  ) {
                    $steps["updateButtonLoad2"] = await $steps[
                      "updateButtonLoad2"
                    ];
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["button", "load"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"extraLarge"}
              />
            </div>
          </div>
        </section>
        <DialogClose
          data-plasmic-name={"dialogClose"}
          data-plasmic-override={overrides.dialogClose}
          className={classNames("__wab_instance", sty.dialogClose, {
            [sty.dialogClosefullScreen_background_dark]:
              hasVariant($state, "background", "dark") &&
              hasVariant($state, "fullScreen", "fullScreen"),
            [sty.dialogClosehideHeader]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            )
          })}
        >
          <XIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgfullScreen_background_dark]:
                hasVariant($state, "background", "dark") &&
                hasVariant($state, "fullScreen", "fullScreen")
            })}
            role={"img"}
          />
        </DialogClose>
        <BackHandler
          data-plasmic-name={"backHandler"}
          data-plasmic-override={overrides.backHandler}
          active={true}
          className={classNames("__wab_instance", sty.backHandler)}
          onBack={args.onBack}
        />
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog: [
    "dialog",
    "dialogContent",
    "swiperSlider",
    "metoLabel",
    "section",
    "shopItem",
    "button",
    "dialogClose",
    "svg",
    "backHandler"
  ],
  dialogContent: [
    "dialogContent",
    "swiperSlider",
    "metoLabel",
    "section",
    "shopItem",
    "button",
    "dialogClose",
    "svg",
    "backHandler"
  ],
  swiperSlider: ["swiperSlider", "metoLabel"],
  metoLabel: ["metoLabel"],
  section: ["section", "shopItem", "button"],
  shopItem: ["shopItem"],
  button: ["button"],
  dialogClose: ["dialogClose", "svg"],
  svg: ["svg"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog: typeof Dialog;
  dialogContent: typeof DialogContent;
  swiperSlider: typeof SwiperSlider;
  metoLabel: typeof MetoLabel;
  section: "section";
  shopItem: typeof ShopItem;
  button: typeof MetoButton;
  dialogClose: typeof DialogClose;
  svg: "svg";
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShopModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShopModal__VariantsArgs;
    args?: PlasmicShopModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShopModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShopModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShopModal__ArgProps,
          internalVariantPropNames: PlasmicShopModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShopModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog") {
    func.displayName = "PlasmicShopModal";
  } else {
    func.displayName = `PlasmicShopModal.${nodeName}`;
  }
  return func;
}

export const PlasmicShopModal = Object.assign(
  // Top-level PlasmicShopModal renders the root element
  makeNodeComponent("dialog"),
  {
    // Helper components rendering sub-elements
    dialogContent: makeNodeComponent("dialogContent"),
    swiperSlider: makeNodeComponent("swiperSlider"),
    metoLabel: makeNodeComponent("metoLabel"),
    section: makeNodeComponent("section"),
    shopItem: makeNodeComponent("shopItem"),
    button: makeNodeComponent("button"),
    dialogClose: makeNodeComponent("dialogClose"),
    svg: makeNodeComponent("svg"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicShopModal
    internalVariantProps: PlasmicShopModal__VariantProps,
    internalArgProps: PlasmicShopModal__ArgProps
  }
);

export default PlasmicShopModal;
/* prettier-ignore-end */
