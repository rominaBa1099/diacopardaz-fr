/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: yuSY12BxVzUt

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Message from "../../Message"; // plasmic-import: n7ndL0BhVm4-/component
import MetoMultilineTextInput from "../../MetoMultilineTextInput"; // plasmic-import: XEFn2jGZQC6Q/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import MetoHeader from "../../MetoHeader"; // plasmic-import: kWTQGqg2Dx4y/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoButton2 from "../../MetoButton"; // plasmic-import: Cz1go1zIfhZZ/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import Modal2 from "../../Modal2"; // plasmic-import: b0WRwkBcq6Fa/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: mSKar170aYTo/codeComponent
import { Timer } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicChatPage.module.css"; // plasmic-import: yuSY12BxVzUt/css

import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: YZnu0BGKqfAx/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: x-B0c-1mf1j1/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: qjqRxaSKggf6/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: EYm8WNjOOVtF/icon
import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import CircleIcon2 from "./icons/PlasmicIcon__Circle"; // plasmic-import: RJhoy2uXebLi/icon
import ChevronDownIcon2 from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: N5pcwqnXvyIA/icon

createPlasmicElementProxy;

export type PlasmicChatPage__VariantMembers = {};
export type PlasmicChatPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicChatPage__VariantsArgs;
export const PlasmicChatPage__VariantProps = new Array<VariantPropType>();

export type PlasmicChatPage__ArgsType = {
  token?: string;
  userData?: any;
  sessionid?: number;
  back?: (event: any) => void;
  shop?: () => void;
  profile2?: () => void;
};
type ArgPropType = keyof PlasmicChatPage__ArgsType;
export const PlasmicChatPage__ArgProps = new Array<ArgPropType>(
  "token",
  "userData",
  "sessionid",
  "back",
  "shop",
  "profile2"
);

export type PlasmicChatPage__OverridesType = {
  root?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  message?: Flex__<typeof Message>;
  multilineTextInput2?: Flex__<typeof MetoMultilineTextInput>;
  metoHeader?: Flex__<typeof MetoHeader>;
  button?: Flex__<typeof MetoButton2>;
  lottie?: Flex__<typeof LottieWrapper>;
  modal2?: Flex__<typeof Modal2>;
  embedHtml?: Flex__<typeof Embed>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  session?: Flex__<typeof ApiRequest>;
  getChat?: Flex__<typeof ApiRequest>;
  timer?: Flex__<typeof Timer>;
};

export interface DefaultChatPageProps {
  token?: string;
  userData?: any;
  sessionid?: number;
  back?: (event: any) => void;
  shop?: () => void;
  profile2?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChatPage__RenderFunc(props: {
  variants: PlasmicChatPage__VariantsArgs;
  args: PlasmicChatPage__ArgsType;
  overrides: PlasmicChatPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g",
          userData: {
            id: 143845,
            bri: 1,
            name: "\u06cc\u0627\u0633\u0645\u0646",
            username: "",
            cluster: 1,
            viewd: "0",
            mobile: null,
            city: "\u062a\u0628\u0631\u06cc\u0632",
            state:
              "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc",
            age: 24,
            address:
              "\u062e\u06cc\u0627\u0628\u0627\u0646 \u0648\u0644\u06cc\u0639\u0635\u0631",
            sex: "female",
            cReadyMessage: 0,
            cLike: 31468,
            cView: 141670,
            cMyView: 0,
            cMyLike: 0,
            isVip: 0,
            isPromote: 0,
            isPromoteDate: null,
            premiumEndDate: null,
            lastActivity: "2025-07-29 10:31:53",
            lastActivityDate: "2025-07-29",
            activeGoldenTick: 0,
            eventBlock: 935,
            eventSeen: 141670,
            eventMessage: 0,
            eventLike: 31467,
            imei: "",
            email: null,
            version: "1.0.3 BAZAR",
            appid: 0,
            regDate: "2024-10-07",
            timestamp: "2024-10-07 11:23:27",
            refCode: "bot107",
            _referedBy: null,
            refCount: 0,
            stars: 557015,
            weeklyStars: 557015,
            cLikeCP: 0,
            weeklyCLikeCP: 0,
            tokenBot: "/liom_bot107",
            hamyarEshgh: null,
            hamyarEshgh_gap: null,
            partnerName: null,
            mobileHamyar: null,
            marridDate: null,
            country: "IR",
            lang: "fa",
            postLang: "fa",
            marital_status: "0",
            birthdayDate: "1370-01-10",
            dueDate: null,
            pLast_time: null,
            length: null,
            last_time: null,
            cycle: null,
            height: null,
            weight: null,
            cOffCode: null,
            password: null,
            avatar: 1,
            socialAvatar: 1,
            overall: 0,
            profilePic: "https://liom.storage.c2.liara.space/inRel/4.png",
            bio: "",
            header: " ",
            background: "",
            font: " ",
            verify: 0,
            telegram: " ",
            instagram: " ",
            twitter: " ",
            syncCount: null,
            isAdmin: 0,
            superAdmin: 0,
            isBlock: 0,
            isVisible_news: null,
            isVisible_broadcast: 0,
            checker: 0,
            blogger: 0,
            notif_like: 0,
            notif_comments: 0,
            notif_mention: 0,
            event: 0,
            unSeenEvent: 0,
            cPost: 0,
            unLikeCat: "",
            adult: 0,
            political: 0,
            firstTwitt: 0,
            suspect: 0,
            suspectHeader: 0,
            suspectProfile: 0,
            suspectBio: 0,
            suspectName: 0,
            suspectUserName: 0,
            uuid: null,
            bot: 1,
            isCheck: 0,
            req_id: 143845
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "chats",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "textList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "session.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "session.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "session.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "sessionId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.sessionid;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "getChat.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getChat.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getChat.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "get",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "multilineTextInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isReadyMessage",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "message[].showtime",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "isBlock",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "messeg",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Reveal
        data-plasmic-name={"reveal"}
        data-plasmic-override={overrides.reveal}
        className={classNames("__wab_instance", sty.reveal)}
        direction={"up"}
        triggerOnce={true}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.chats;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.message),
              inApp: false,
              key: currentIndex,
              liomAnswer: (() => {
                try {
                  return currentItem.self;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })(),
              onShowtimeChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "message",
                  __plasmic_idx_0,
                  "showtime"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              },
              posttime: (() => {
                try {
                  return currentItem.timestamp;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              showtime: generateStateValueProp($state, [
                "message",
                __plasmic_idx_0,
                "showtime"
              ]),
              slot: (
                <React.Fragment>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eKWsp)}
                  >
                    <Icon119Icon
                      className={classNames(projectcss.all, sty.svg__xUuW)}
                      role={"img"}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hinyf)}
                  >
                    <Icon119Icon
                      className={classNames(projectcss.all, sty.svg___9N69K)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dwIz3
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "ویرایش پاسخ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </React.Fragment>
              )
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "message[].showtime",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return (() => {
                          const currentDate =
                            currentItem.timestamp.split(" ")[0];
                          const previousDate =
                            $state.chats[currentIndex - 1].timestamp.split(
                              " "
                            )[0];
                          return !previousDate || currentDate !== previousDate;
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              [__plasmic_idx_0]
            );
            return (
              <Message
                data-plasmic-name={"message"}
                data-plasmic-override={overrides.message}
                {...child$Props}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xgPKr,
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? `text-box  ${(() => {})()}`
                      : undefined
                  )}
                  id={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (() => {
                          try {
                            return currentItem.id
                              ? ""
                              : currentItem.animation
                              ? currentItem.animation
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      : (() => {
                          try {
                            return currentItem.id
                              ? ""
                              : currentItem.from == "system"
                              ? `typedtext` + currentIndex
                              : "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                  }
                  style={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          display: "inline-block",
                          width: "auto",
                          "overflow-wrap": "break-word"
                        }
                      : undefined
                  }
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.message;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Lorem ipsum dolor sit amet,";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Message>
            );
          })();
        })}
      </Reveal>
      <section className={classNames(projectcss.all, sty.section___61NzU)}>
        <MetoMultilineTextInput
          data-plasmic-name={"multilineTextInput2"}
          data-plasmic-override={overrides.multilineTextInput2}
          className={classNames("__wab_instance", sty.multilineTextInput2)}
          onValueChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, [
              "multilineTextInput2",
              "value"
            ]).apply(null, eventArgs);

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateMesseg"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["messeg"]
                      },
                      operation: 0,
                      value: $state.multilineTextInput2.value
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateMesseg"] != null &&
                typeof $steps["updateMesseg"] === "object" &&
                typeof $steps["updateMesseg"].then === "function"
              ) {
                $steps["updateMesseg"] = await $steps["updateMesseg"];
              }
            }).apply(null, eventArgs);
          }}
          slot={
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg__z35Vr)}
              role={"img"}
            />
          }
          startIcon={true}
          value={generateStateValueProp($state, [
            "multilineTextInput2",
            "value"
          ])}
        >
          {(() => {
            try {
              return !$state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon6Icon
              aria-disabled={(() => {
                try {
                  return $state.load;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              className={classNames(projectcss.all, sty.svg__hGiGu)}
              id={"send"}
              onClick={async event => {
                const $steps = {};

                $steps["updateLoad"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["load"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoad"] != null &&
                  typeof $steps["updateLoad"] === "object" &&
                  typeof $steps["updateLoad"].then === "function"
                ) {
                  $steps["updateLoad"] = await $steps["updateLoad"];
                }

                $steps["send"] =
                  $state.messeg != ""
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "POST",
                            "https://api.friendschat.ir/chat/sendChat",
                            undefined,
                            (() => {
                              try {
                                return {
                                  sessionID: $state.sessionId,
                                  message: $state.messeg,
                                  isReadyMessage: $state.isReadyMessage
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return {
                                  headers: {
                                    appid: "your-app-id",
                                    Authorization: $props.token,
                                    "Content-Type": "application/json",
                                    Version: "1.0"
                                  }
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["send"] != null &&
                  typeof $steps["send"] === "object" &&
                  typeof $steps["send"].then === "function"
                ) {
                  $steps["send"] = await $steps["send"];
                }

                $steps["runCode"] = $steps.send?.data?.success
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const now = new Date();
                            const date = now.toISOString().split("T")[0];
                            const time = now.toTimeString().split(" ")[0];
                            const timestamp = `${date} ${time}`;
                            const shamsiDate = new Intl.DateTimeFormat(
                              "fa-IR",
                              {
                                year: "numeric",
                                month: "numeric",
                                day: "numeric"
                              }
                            ).format(now);
                            const timestamp_fa = `${shamsiDate.replace(
                              /\//g,
                              "\u066B"
                            )} ${time}`;
                            return $state.chats.push({
                              message: $state.messeg,
                              sessionID: $state.sessionId,
                              date: date,
                              timestamp: timestamp,
                              timestamp_fa: timestamp_fa,
                              self: true
                            });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["updateMultilineTextInput2Value"] = $steps.send?.data
                  ?.success
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["multilineTextInput2", "value"]
                        },
                        operation: 0,
                        value: ""
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMultilineTextInput2Value"] != null &&
                  typeof $steps["updateMultilineTextInput2Value"] ===
                    "object" &&
                  typeof $steps["updateMultilineTextInput2Value"].then ===
                    "function"
                ) {
                  $steps["updateMultilineTextInput2Value"] = await $steps[
                    "updateMultilineTextInput2Value"
                  ];
                }

                $steps["runShop"] = !$steps.send?.data?.success
                  ? (() => {
                      const actionArgs = { eventRef: $props["shop"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runShop"] != null &&
                  typeof $steps["runShop"] === "object" &&
                  typeof $steps["runShop"].then === "function"
                ) {
                  $steps["runShop"] = await $steps["runShop"];
                }

                $steps["updateLoad2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["load"]
                        },
                        operation: 4
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateLoad2"] != null &&
                  typeof $steps["updateLoad2"] === "object" &&
                  typeof $steps["updateLoad2"].then === "function"
                ) {
                  $steps["updateLoad2"] = await $steps["updateLoad2"];
                }
              }}
              role={"img"}
            />
          ) : null}
          {(() => {
            try {
              return $state.load;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon12Icon
              className={classNames(projectcss.all, sty.svg__yGgbA)}
              role={"img"}
            />
          ) : null}
        </MetoMultilineTextInput>
        {(() => {
          try {
            return $state.isBlock;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <MetoButton
            className={classNames("__wab_instance", sty.metoButton__fBxd9)}
            color={"neutral"}
            label={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f72Ws
                )}
              >
                {
                  "\u0622\u0646\u0628\u0644\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u06a9\u0627\u0631\u0628\u0631"
                }
              </div>
            }
            size={"extraLarge"}
          />
        ) : null}
      </section>
      <section className={classNames(projectcss.all, sty.section__m7Vle)}>
        <MetoHeader
          data-plasmic-name={"metoHeader"}
          data-plasmic-override={overrides.metoHeader}
          block={async event => {
            const $steps = {};

            $steps["block"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.friendschat.ir/chat/addEvent",
                      undefined,
                      (() => {
                        try {
                          return {
                            userID: $props.userData.id,
                            type: "block"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return {
                            headers: {
                              appid: "your-app-id",
                              Authorization: $props.token,
                              "Content-Type": "application/json",
                              Version: "1.0"
                            }
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["block"] != null &&
              typeof $steps["block"] === "object" &&
              typeof $steps["block"].then === "function"
            ) {
              $steps["block"] = await $steps["block"];
            }

            $steps["invokeGlobalAction"] = $steps.block?.data?.success
              ? (() => {
                  const actionArgs = {
                    args: [
                      undefined,
                      "\u06a9\u0627\u0631\u0628\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0628\u0644\u0627\u06a9 \u0634\u062f.",
                      "bottom-center"
                    ]
                  };
                  return $globalActions["Fragment.showToast"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }

            $steps["updateIsBlock"] = $steps.block?.data?.success
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isBlock"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsBlock"] != null &&
              typeof $steps["updateIsBlock"] === "object" &&
              typeof $steps["updateIsBlock"].then === "function"
            ) {
              $steps["updateIsBlock"] = await $steps["updateIsBlock"];
            }
          }}
          chat={true}
          className={classNames("__wab_instance", sty.metoHeader)}
          image={(() => {
            try {
              return $props.userData.profilePic;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onClick={args.back}
          profile2={args.profile2}
        >
          <MetoLabel
            className={classNames("__wab_instance", sty.metoLabel__c8Bkj)}
            size={"lg"}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.userData.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Label";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </MetoLabel>
        </MetoHeader>
      </section>
      {(() => {
        try {
          return $state.get && $state.chats.length == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jbiZu)}
        >
          {(() => {
            try {
              return (
                $state.get &&
                $state.chats.length == 0 &&
                !$state.getChat.loading
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ci3Te)}
            >
              <MetoLabel
                className={classNames("__wab_instance", sty.metoLabel__v9Kg)}
                size={"lg"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fDiPm
                  )}
                >
                  {
                    "\u0627\u0648\u0644\u06cc\u0646 \u067e\u06cc\u0627\u0645 \u0631\u0648 \u0628\u062f\u0647 \ud83d\ude0e"
                  }
                </div>
              </MetoLabel>
              <MetoButton2
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                disabled={(() => {
                  try {
                    return $state.button.load;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return false;
                    }
                    throw e;
                  }
                })()}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d28Tf
                    )}
                  >
                    {
                      "\u0628\u0631\u0627\u06cc \u0634\u0631\u0648\u0639 \u0627\u06cc\u0646\u062c\u0627 \u06a9\u0644\u06cc\u06a9 \u06a9\u0646"
                    }
                  </div>
                }
                load={generateStateValueProp($state, ["button", "load"])}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateButtonLoad"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button", "load"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButtonLoad"] != null &&
                    typeof $steps["updateButtonLoad"] === "object" &&
                    typeof $steps["updateButtonLoad"].then === "function"
                  ) {
                    $steps["updateButtonLoad"] = await $steps[
                      "updateButtonLoad"
                    ];
                  }

                  $steps["invokeGlobalAction"] =
                    $state.textList.length == 0
                      ? (() => {
                          const actionArgs = {
                            args: [
                              undefined,
                              "https://api.friendschat.ir/chat/getReadyMessage",
                              undefined,
                              undefined,
                              (() => {
                                try {
                                  return {
                                    headers: {
                                      appid: "your-app-id",
                                      Authorization: $props.token,
                                      "Content-Type": "application/json",
                                      Version: "1.0"
                                    }
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["updateTextList"] = $steps.invokeGlobalAction?.data
                    ?.list
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["textList"]
                          },
                          operation: 0,
                          value: $steps.invokeGlobalAction.data.list
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateTextList"] != null &&
                    typeof $steps["updateTextList"] === "object" &&
                    typeof $steps["updateTextList"].then === "function"
                  ) {
                    $steps["updateTextList"] = await $steps["updateTextList"];
                  }

                  $steps["updateButtonLoad2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["button", "load"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateButtonLoad2"] != null &&
                    typeof $steps["updateButtonLoad2"] === "object" &&
                    typeof $steps["updateButtonLoad2"].then === "function"
                  ) {
                    $steps["updateButtonLoad2"] = await $steps[
                      "updateButtonLoad2"
                    ];
                  }

                  $steps["updateMultilineTextInputValue2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal2", "open"]
                          },
                          operation: 4,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMultilineTextInputValue2"] != null &&
                    typeof $steps["updateMultilineTextInputValue2"] ===
                      "object" &&
                    typeof $steps["updateMultilineTextInputValue2"].then ===
                      "function"
                  ) {
                    $steps["updateMultilineTextInputValue2"] = await $steps[
                      "updateMultilineTextInputValue2"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return undefined;
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }}
                onLoadChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, ["button", "load"]).apply(
                    null,
                    eventArgs
                  );

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }}
                size={"extraLarge"}
              />
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $state.getChat.loading || $state.session.loading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <LottieWrapper
              data-plasmic-name={"lottie"}
              data-plasmic-override={overrides.lottie}
              animationData={{
                v: "4.6.9",
                fr: 29.9700012207031,
                ip: 0,
                op: 210.000008553475,
                w: 800,
                h: 600,
                nm: "Loader",
                ddd: 0,
                assets: [
                  {
                    id: "comp_4",
                    layers: [
                      {
                        ddd: 0,
                        ind: 1,
                        ty: 4,
                        nm: "Shape Layer 1",
                        ks: {
                          o: { a: 0, k: 100 },
                          r: { a: 0, k: 0 },
                          p: { a: 0, k: [400, 300, 0] },
                          a: { a: 0, k: [0, 0, 0] },
                          s: { a: 0, k: [100, 100, 100] }
                        },
                        ao: 0,
                        shapes: [
                          {
                            ty: "gr",
                            it: [
                              {
                                ind: 0,
                                ty: "sh",
                                ix: 1,
                                ks: {
                                  a: 0,
                                  k: {
                                    i: [
                                      [-6.667, 0],
                                      [0, 46.333],
                                      [20.25, 0],
                                      [0, -10.333],
                                      [-4.167, 0],
                                      [0, 8.333],
                                      [18.833, 0],
                                      [0, -20.167]
                                    ],
                                    o: [
                                      [6.667, 0],
                                      [0, -20.833],
                                      [-19.5, 0],
                                      [0, 8.333],
                                      [4.167, 0],
                                      [0, -10.5],
                                      [-18.833, 0],
                                      [0, 47.333]
                                    ],
                                    v: [
                                      [-0.083, 50],
                                      [58.083, -15.5],
                                      [25.083, -50],
                                      [-7.917, -17.833],
                                      [0.083, -6.167],
                                      [8.083, -17.833],
                                      [-25.083, -50],
                                      [-58.083, -16.333]
                                    ],
                                    c: true
                                  }
                                },
                                nm: "Path 1",
                                mn: "ADBE Vector Shape - Group"
                              },
                              {
                                ty: "tm",
                                s: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.197], y: [1] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p197_1_0p167_0p167"],
                                      t: 150,
                                      s: [0],
                                      e: [100]
                                    },
                                    { t: 209.000008512745 }
                                  ],
                                  ix: 1
                                },
                                e: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.833], y: [0.833] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p833_0p833_0p167_0p167"],
                                      t: 20,
                                      s: [0],
                                      e: [58]
                                    },
                                    {
                                      i: { x: [0.833], y: [0.833] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p833_0p833_0p167_0p167"],
                                      t: 30,
                                      s: [58],
                                      e: [58]
                                    },
                                    {
                                      i: { x: [0], y: [1] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0_1_0p167_0p167"],
                                      t: 100,
                                      s: [58],
                                      e: [100]
                                    },
                                    { t: 120.0000048877 }
                                  ],
                                  ix: 2
                                },
                                o: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p667_1_0p167_0p167"],
                                      t: 25,
                                      s: [0],
                                      e: [540]
                                    },
                                    {
                                      i: { x: [0.833], y: [0.833] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p833_0p833_0p167_0p167"],
                                      t: 45,
                                      s: [540],
                                      e: [630]
                                    },
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p667_1_0p167_0p167"],
                                      t: 50,
                                      s: [630],
                                      e: [1170]
                                    },
                                    {
                                      i: { x: [0.833], y: [0.833] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p833_0p833_0p167_0p167"],
                                      t: 70,
                                      s: [1170],
                                      e: [1260]
                                    },
                                    {
                                      i: { x: [0.667], y: [1] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p667_1_0p167_0p167"],
                                      t: 75,
                                      s: [1260],
                                      e: [1800]
                                    },
                                    {
                                      i: { x: [0.377], y: [1] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p377_1_0p167_0p167"],
                                      t: 95,
                                      s: [1800],
                                      e: [1960]
                                    },
                                    {
                                      i: { x: [0.833], y: [0.833] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p833_0p833_0p167_0p167"],
                                      t: 120,
                                      s: [1960],
                                      e: [2160]
                                    },
                                    { t: 150.000006109625 }
                                  ],
                                  ix: 3
                                },
                                m: 1,
                                ix: 2,
                                nm: "Trim Paths 1",
                                mn: "ADBE Vector Filter - Trim"
                              },
                              {
                                ty: "st",
                                c: { a: 0, k: [0.251, 0.325, 0.502, 1] },
                                o: { a: 0, k: 100 },
                                w: { a: 0, k: 12 },
                                lc: 1,
                                lj: 2,
                                nm: "Stroke 1",
                                mn: "ADBE Vector Graphic - Stroke"
                              },
                              {
                                ty: "tr",
                                p: { a: 0, k: [0, 0], ix: 2 },
                                a: { a: 0, k: [0, 0], ix: 1 },
                                s: { a: 0, k: [100, 100], ix: 3 },
                                r: { a: 0, k: 0, ix: 6 },
                                o: {
                                  a: 1,
                                  k: [
                                    {
                                      i: { x: [0.833], y: [0.833] },
                                      o: { x: [0.167], y: [0.167] },
                                      n: ["0p833_0p833_0p167_0p167"],
                                      t: 150,
                                      s: [100],
                                      e: [0]
                                    },
                                    { t: 200.000008146167 }
                                  ],
                                  ix: 7
                                },
                                sk: { a: 0, k: 0, ix: 4 },
                                sa: { a: 0, k: 0, ix: 5 },
                                nm: "Transform"
                              }
                            ],
                            nm: "Shape 1",
                            np: 4,
                            cix: 2,
                            ix: 1,
                            mn: "ADBE Vector Group"
                          }
                        ],
                        ip: 0,
                        op: 300.00001221925,
                        st: 0,
                        bm: 0,
                        sr: 1
                      }
                    ]
                  }
                ],
                layers: [
                  {
                    ddd: 0,
                    ind: 1,
                    ty: 0,
                    nm: "Comp 1",
                    refId: "comp_4",
                    ks: {
                      o: { a: 0, k: 100 },
                      r: { a: 0, k: 0 },
                      p: { a: 0, k: [400, 300, 0] },
                      a: { a: 0, k: [400, 300, 0] },
                      s: { a: 0, k: [100, 100, 100] }
                    },
                    ao: 0,
                    w: 800,
                    h: 600,
                    ip: 0,
                    op: 300.00001221925,
                    st: 0,
                    bm: 0,
                    sr: 1
                  }
                ]
              }}
              className={classNames("__wab_instance", sty.lottie)}
              preview={true}
            />
          ) : null}
        </Stack__>
      ) : null}
      <Modal2
        data-plasmic-name={"modal2"}
        data-plasmic-override={overrides.modal2}
        background={"secound"}
        body={
          <React.Fragment>
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={"<hr></hr>"}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___196U6)}
            >
              <AntdRadioGroup
                data-plasmic-name={"radioGroup"}
                data-plasmic-override={overrides.radioGroup}
                children={null}
                className={classNames("__wab_instance", sty.radioGroup)}
                onChange={async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "radioGroup",
                    "value"
                  ]).apply(null, eventArgs);
                }}
                options={(() => {
                  try {
                    return $state.textList.map(i => ({
                      label: i.text,
                      value: i.text
                    }));
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
                value={generateStateValueProp($state, ["radioGroup", "value"])}
              />

              <MetoButton
                className={classNames("__wab_instance", sty.metoButton___3VIcq)}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uPwiL
                    )}
                  >
                    {"\u0627\u0631\u0633\u0627\u0644"}
                  </div>
                }
                onClick={async event => {
                  const $steps = {};

                  $steps["updateMesseg"] = $state.radioGroup.value
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["messeg"]
                          },
                          operation: 0,
                          value: $state.radioGroup.value
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMesseg"] != null &&
                    typeof $steps["updateMesseg"] === "object" &&
                    typeof $steps["updateMesseg"].then === "function"
                  ) {
                    $steps["updateMesseg"] = await $steps["updateMesseg"];
                  }

                  $steps["invokeGlobalAction"] = true
                    ? (() => {
                        const actionArgs = { args: [1000] };
                        return $globalActions["Fragment.wait"]?.apply(null, [
                          ...actionArgs.args
                        ]);
                      })()
                    : undefined;
                  if (
                    $steps["invokeGlobalAction"] != null &&
                    typeof $steps["invokeGlobalAction"] === "object" &&
                    typeof $steps["invokeGlobalAction"].then === "function"
                  ) {
                    $steps["invokeGlobalAction"] = await $steps[
                      "invokeGlobalAction"
                    ];
                  }

                  $steps["runCode"] = $state.radioGroup.value
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const element =
                                window.document.getElementById("send");
                              if (element) {
                                const clickEvent = new MouseEvent("click", {
                                  bubbles: true,
                                  cancelable: true,
                                  view: window
                                });
                                return element.dispatchEvent(clickEvent);
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateMultilineTextInputValue2"] = !$state.radioGroup
                    .value
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "custom",
                            "\u0644\u0637\u0641\u0627 \u0627\u0648\u0644 \u06cc\u06a9 \u067e\u06cc\u0627\u0645 \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 ",
                            "bottom-center"
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["updateMultilineTextInputValue2"] != null &&
                    typeof $steps["updateMultilineTextInputValue2"] ===
                      "object" &&
                    typeof $steps["updateMultilineTextInputValue2"].then ===
                      "function"
                  ) {
                    $steps["updateMultilineTextInputValue2"] = await $steps[
                      "updateMultilineTextInputValue2"
                    ];
                  }

                  $steps["updateMultilineTextInputValue3"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal2", "open"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMultilineTextInputValue3"] != null &&
                    typeof $steps["updateMultilineTextInputValue3"] ===
                      "object" &&
                    typeof $steps["updateMultilineTextInputValue3"].then ===
                      "function"
                  ) {
                    $steps["updateMultilineTextInputValue3"] = await $steps[
                      "updateMultilineTextInputValue3"
                    ];
                  }
                }}
                size={"extraLarge"}
              />
            </Stack__>
          </React.Fragment>
        }
        className={classNames("__wab_instance", sty.modal2)}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal2", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal2", "open"])}
        title={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vmvR3
            )}
          >
            {
              "\u0628\u0647 \u06a9\u0645\u06a9 \u0627\u06cc\u0646 \u067e\u06cc\u0627\u0645 \u0647\u0627\u06cc \u0622\u0645\u0627\u062f\u0647 \u062f\u06cc\u06af\u0647 \u0634\u0631\u0648\u0639 \u0635\u062d\u0628\u062a \u0633\u062e\u062a \u0646\u06cc\u0633\u062a\u060c \u06cc\u06a9\u06cc \u0631\u0648 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0646 \u0648 \u0628\u0631\u0627\u06cc \u0628\u0641\u0631\u0633\u062a."
            }
          </div>
        }
      />

      <ApiRequest
        data-plasmic-name={"session"}
        data-plasmic-override={overrides.session}
        body={(() => {
          try {
            return { userID: $props.userData.id };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.session)}
        config={(() => {
          try {
            return {
              headers: {
                appid: "your-app-id",
                Authorization: $props.token,
                "Content-Type": "application/json",
                Version: "1.0"
              }
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                headers: {
                  appid: "your-app-id",
                  Authorization: "Bearer your-token",
                  "Content-Type": "application/json",
                  Version: "1.0"
                }
              };
            }
            throw e;
          }
        })()}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["session", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["session", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["session", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["updateSessionId"] = (
              $state.session?.data?.success ? true : false
            )
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["sessionId"]
                    },
                    operation: 0,
                    value: parseInt($state.session?.data?.sessionID)
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateSessionId"] != null &&
              typeof $steps["updateSessionId"] === "object" &&
              typeof $steps["updateSessionId"].then === "function"
            ) {
              $steps["updateSessionId"] = await $steps["updateSessionId"];
            }

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        console.log("sessionId:", $state.sessionId);
                        console.log("sessionId != 0:", $state.sessionId != 0);
                        console.log(
                          "typeof sessionId:",
                          typeof $state.sessionId
                        );
                        console.log(
                          "typeof sessionId === 'number':",
                          typeof $state.sessionId === "number"
                        );
                        console.log("$state.get:", $state.get);
                        return console.log(
                          "$state.get == false:",
                          $state.get == false
                        );
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={(() => {
          try {
            return $props.sessionid == null;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://api.friendschat.ir/chat/createSession "}
      />

      <ApiRequest
        data-plasmic-name={"getChat"}
        data-plasmic-override={overrides.getChat}
        body={(() => {
          try {
            return {
              sessionID: $state.sessionId,
              timestamp: (() => {
                const now = new Date();
                const pad = n => n.toString().padStart(2, "0");
                return `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(
                  now.getDate()
                )} ${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(
                  now.getSeconds()
                )}`;
              })()
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.getChat)}
        config={(() => {
          try {
            return {
              headers: {
                appid: "your-app-id",
                Authorization: $props.token,
                "Content-Type": "application/json",
                Version: "1.0"
              }
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                headers: {
                  appid: "your-app-id",
                  Authorization: "Bearer your-token",
                  "Content-Type": "application/json",
                  Version: "1.0"
                }
              };
            }
            throw e;
          }
        })()}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getChat", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getChat", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getChat", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["updateGet"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["get"]
                    },
                    operation: 0,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateGet"] != null &&
              typeof $steps["updateGet"] === "object" &&
              typeof $steps["updateGet"].then === "function"
            ) {
              $steps["updateGet"] = await $steps["updateGet"];
            }

            $steps["updateChats"] = $state.getChat?.data?.list
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["chats"]
                    },
                    operation: 0,
                    value: $state.getChat.data.list
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateChats"] != null &&
              typeof $steps["updateChats"] === "object" &&
              typeof $steps["updateChats"].then === "function"
            ) {
              $steps["updateChats"] = await $steps["updateChats"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={(() => {
          try {
            return (
              $state.sessionId != 0 &&
              typeof $state.sessionId == "number" &&
              $state.get == false
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://api.friendschat.ir/chat/getChat"}
      />

      <Timer
        data-plasmic-name={"timer"}
        data-plasmic-override={overrides.timer}
        className={classNames("__wab_instance", sty.timer)}
        intervalSeconds={2}
        isRunning={(() => {
          try {
            return (() => {
              return $state.getChat?.data?.list ? true : false;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        onTick={async () => {
          const $steps = {};

          $steps["invokeGlobalAction"] = false
            ? (() => {
                const actionArgs = {
                  args: [
                    "POST",
                    "https://api.friendschat.ir/chat/getChatUpdate",
                    undefined,
                    (() => {
                      try {
                        return {
                          sessionID: $state.sessionId,
                          timestamp: (() => {
                            const now = new Date();
                            const pad = n => n.toString().padStart(2, "0");
                            return `${now.getFullYear()}-${pad(
                              now.getMonth() + 1
                            )}-${pad(now.getDate())} ${pad(
                              now.getHours()
                            )}:${pad(now.getMinutes())}:${pad(
                              now.getSeconds()
                            )}`;
                          })()
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })(),
                    (() => {
                      try {
                        return {
                          headers: {
                            appid: "your-app-id",
                            Authorization: $props.token,
                            "Content-Type": "application/json",
                            Version: "1.0"
                          }
                        };
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  ]
                };
                return $globalActions["Fragment.apiRequest"]?.apply(null, [
                  ...actionArgs.args
                ]);
              })()
            : undefined;
          if (
            $steps["invokeGlobalAction"] != null &&
            typeof $steps["invokeGlobalAction"] === "object" &&
            typeof $steps["invokeGlobalAction"].then === "function"
          ) {
            $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
          }
        }}
        runWhileEditing={false}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reveal",
    "message",
    "multilineTextInput2",
    "metoHeader",
    "button",
    "lottie",
    "modal2",
    "embedHtml",
    "radioGroup",
    "session",
    "getChat",
    "timer"
  ],
  reveal: ["reveal", "message"],
  message: ["message"],
  multilineTextInput2: ["multilineTextInput2"],
  metoHeader: ["metoHeader"],
  button: ["button"],
  lottie: ["lottie"],
  modal2: ["modal2", "embedHtml", "radioGroup"],
  embedHtml: ["embedHtml"],
  radioGroup: ["radioGroup"],
  session: ["session"],
  getChat: ["getChat"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  message: typeof Message;
  multilineTextInput2: typeof MetoMultilineTextInput;
  metoHeader: typeof MetoHeader;
  button: typeof MetoButton2;
  lottie: typeof LottieWrapper;
  modal2: typeof Modal2;
  embedHtml: typeof Embed;
  radioGroup: typeof AntdRadioGroup;
  session: typeof ApiRequest;
  getChat: typeof ApiRequest;
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatPage__VariantsArgs;
    args?: PlasmicChatPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChatPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChatPage__ArgProps,
          internalVariantPropNames: PlasmicChatPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChatPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatPage";
  } else {
    func.displayName = `PlasmicChatPage.${nodeName}`;
  }
  return func;
}

export const PlasmicChatPage = Object.assign(
  // Top-level PlasmicChatPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    message: makeNodeComponent("message"),
    multilineTextInput2: makeNodeComponent("multilineTextInput2"),
    metoHeader: makeNodeComponent("metoHeader"),
    button: makeNodeComponent("button"),
    lottie: makeNodeComponent("lottie"),
    modal2: makeNodeComponent("modal2"),
    embedHtml: makeNodeComponent("embedHtml"),
    radioGroup: makeNodeComponent("radioGroup"),
    session: makeNodeComponent("session"),
    getChat: makeNodeComponent("getChat"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicChatPage
    internalVariantProps: PlasmicChatPage__VariantProps,
    internalArgProps: PlasmicChatPage__ArgProps
  }
);

export default PlasmicChatPage;
/* prettier-ignore-end */
