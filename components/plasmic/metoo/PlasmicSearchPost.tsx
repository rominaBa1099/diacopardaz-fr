/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: Q5aLBQV7Zpaw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Post from "../../Post"; // plasmic-import: MPQbn3WJ9nnV/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import Like from "../../Like"; // plasmic-import: tXJMudG_KgDC/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: mSKar170aYTo/codeComponent

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicSearchPost.module.css"; // plasmic-import: Q5aLBQV7Zpaw/css

import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: FRb_xRn_jsVb/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: -Krn7G6yGJ24/icon

createPlasmicElementProxy;

export type PlasmicSearchPost__VariantMembers = {};
export type PlasmicSearchPost__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearchPost__VariantsArgs;
export const PlasmicSearchPost__VariantProps = new Array<VariantPropType>();

export type PlasmicSearchPost__ArgsType = {
  filter?: any;
  onFilterChange?: (val: string) => void;
  counter?: number;
  onCounterChange?: (val: string) => void;
  token?: string;
  chat?: boolean;
  onChatChange?: (val: string) => void;
  body?: any;
  onBodyChange?: (val: string) => void;
  controller?: string;
  action?: string;
  chat2?: (event: any) => void;
  onCurrentuserChange?: (val: string) => void;
  profile?: () => void;
};
type ArgPropType = keyof PlasmicSearchPost__ArgsType;
export const PlasmicSearchPost__ArgProps = new Array<ArgPropType>(
  "filter",
  "onFilterChange",
  "counter",
  "onCounterChange",
  "token",
  "chat",
  "onChatChange",
  "body",
  "onBodyChange",
  "controller",
  "action",
  "chat2",
  "onCurrentuserChange",
  "profile"
);

export type PlasmicSearchPost__OverridesType = {
  root?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  post?: Flex__<typeof Post>;
  metoLabel?: Flex__<typeof MetoLabel>;
  img?: Flex__<typeof PlasmicImg__>;
  like?: Flex__<typeof Like>;
  suggstionUser?: Flex__<typeof ApiRequest>;
  section?: Flex__<"section">;
};

export interface DefaultSearchPostProps {
  filter?: any;
  onFilterChange?: (val: string) => void;
  counter?: number;
  onCounterChange?: (val: string) => void;
  token?: string;
  chat?: boolean;
  onChatChange?: (val: string) => void;
  body?: any;
  onBodyChange?: (val: string) => void;
  controller?: string;
  action?: string;
  chat2?: (event: any) => void;
  onCurrentuserChange?: (val: string) => void;
  profile?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSearchPost__RenderFunc(props: {
  variants: PlasmicSearchPost__VariantsArgs;
  args: PlasmicSearchPost__ArgsType;
  overrides: PlasmicSearchPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "filter",
        type: "writable",
        variableType: "object",

        valueProp: "filter",
        onChangeProp: "onFilterChange"
      },
      {
        path: "post[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "suggstionUser.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggstionUser.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggstionUser.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "counter",
        type: "writable",
        variableType: "number",

        valueProp: "counter",
        onChangeProp: "onCounterChange"
      },
      {
        path: "post[].image",
        type: "private",
        variableType: "text"
      },
      {
        path: "list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "chat",
        type: "writable",
        variableType: "boolean",

        valueProp: "chat",
        onChangeProp: "onChatChange"
      },
      {
        path: "body",
        type: "writable",
        variableType: "object",

        valueProp: "body",
        onChangeProp: "onBodyChange"
      },
      {
        path: "currentuser",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onCurrentuserChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1(),
    theme: useTheme()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        "your-scroll-box",
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          )
        }
      )}
      onScroll={async event => {
        const $steps = {};

        $steps["runCode"] =
          $state.hasMore && $state.isLoading == false
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      var scrollTop = event.currentTarget.scrollTop;
                      var list = event.currentTarget;
                      window.list = list;
                      if (
                        scrollTop + list.clientHeight >=
                        list.scrollHeight - 10
                      ) {
                        list.style.overflow = "hidden";
                        $state.counter++;
                        return ($state.isLoading = true);
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
      style={(() => {
        try {
          return {
            "overflow-y": "auto",
            "scroll-behavior": "smooth"
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ox0W)}
      >
        <Reveal
          data-plasmic-name={"reveal"}
          data-plasmic-override={overrides.reveal}
          className={classNames("__wab_instance", sty.reveal)}
          triggerOnce={false}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.list?.length ? $state.list : [1, 2];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.post),
                image: generateStateValueProp($state, [
                  "post",
                  __plasmic_idx_0,
                  "image"
                ]),
                key: currentIndex,
                load: generateStateValueProp($state, [
                  "post",
                  __plasmic_idx_0,
                  "load"
                ]),
                onClick: async event => {
                  const $steps = {};

                  $steps["updateCurrentuser"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["currentuser"]
                          },
                          operation: 0,
                          value: currentItem
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCurrentuser"] != null &&
                    typeof $steps["updateCurrentuser"] === "object" &&
                    typeof $steps["updateCurrentuser"].then === "function"
                  ) {
                    $steps["updateCurrentuser"] = await $steps[
                      "updateCurrentuser"
                    ];
                  }

                  $steps["runChat2"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["chat2"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runChat2"] != null &&
                    typeof $steps["runChat2"] === "object" &&
                    typeof $steps["runChat2"].then === "function"
                  ) {
                    $steps["runChat2"] = await $steps["runChat2"];
                  }
                },
                onImageChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "post",
                    __plasmic_idx_0,
                    "image"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                },
                onLoadChange: async (...eventArgs: any) => {
                  generateStateOnChangeProp($state, [
                    "post",
                    __plasmic_idx_0,
                    "load"
                  ]).apply(null, eventArgs);

                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                }
              };

              initializePlasmicStates(
                $state,
                [
                  {
                    name: "post[].load",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return $state.suggstionUser.loading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()
                  },
                  {
                    name: "post[].image",
                    initFunc: ({ $props, $state, $queries }) =>
                      (() => {
                        try {
                          return currentItem.profilePic;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                  }
                ],
                [__plasmic_idx_0]
              );
              return (
                <Post
                  data-plasmic-name={"post"}
                  data-plasmic-override={overrides.post}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__amY4E)}
                  >
                    {(() => {
                      try {
                        return !$state.post[currentIndex].load;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kpDgr
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__voDoo
                          )}
                        >
                          <MetoLabel
                            data-plasmic-name={"metoLabel"}
                            data-plasmic-override={overrides.metoLabel}
                            className={classNames(
                              "__wab_instance",
                              sty.metoLabel
                            )}
                            size={"lg"}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return `${currentItem.name}  |  ${currentItem.age}  ساله `;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Label";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </MetoLabel>
                          {(() => {
                            try {
                              return currentItem.activeGoldenTick;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <PlasmicImg__
                              data-plasmic-name={"img"}
                              data-plasmic-override={overrides.img}
                              alt={""}
                              className={classNames(sty.img)}
                              displayHeight={"1.5rem"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"1.5rem"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/metoo/images/tikGSvg.svg",
                                fullWidth: 307.09,
                                fullHeight: 306.78,
                                aspectRatio: 1.00101
                              }}
                            />
                          ) : null}
                        </Stack__>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4ZeZv
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return `${currentItem.state} - ${currentItem.city}`;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return (() => {
                          function isOnline(user) {
                            const now = new Date();
                            const lastSeen = new Date(
                              user.lastActivity + " GMT+0330"
                            );
                            const diff = (now - lastSeen) / (1000 * 60);
                            return diff <= 2;
                          }
                          return isOnline(currentItem);
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xYcvf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g95V9
                          )}
                        >
                          {"\u0622\u0646\u0644\u0627\u06cc\u0646"}
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0KjgZ)}
                  >
                    <MetoButton
                      className={classNames(
                        "__wab_instance",
                        sty.metoButton__j9LVe
                      )}
                      color={"neutral"}
                      flatSide={[]}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__c22Jy
                          )}
                        >
                          <Icon2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zhDz8
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateCurrentuser"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["currentuser"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurrentuser"] != null &&
                          typeof $steps["updateCurrentuser"] === "object" &&
                          typeof $steps["updateCurrentuser"].then === "function"
                        ) {
                          $steps["updateCurrentuser"] = await $steps[
                            "updateCurrentuser"
                          ];
                        }

                        $steps["runChat2"] = true
                          ? (() => {
                              const actionArgs = { eventRef: $props["chat2"] };
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runChat2"] != null &&
                          typeof $steps["runChat2"] === "object" &&
                          typeof $steps["runChat2"].then === "function"
                        ) {
                          $steps["runChat2"] = await $steps["runChat2"];
                        }
                      }}
                      roundedFull={true}
                      size={"large"}
                    />

                    <MetoButton
                      className={classNames(
                        "__wab_instance",
                        sty.metoButton__fh1Bj
                      )}
                      color={"neutral"}
                      flatSide={[]}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__da2Xe
                          )}
                        >
                          <Like
                            data-plasmic-name={"like"}
                            data-plasmic-override={overrides.like}
                            className={classNames("__wab_instance", sty.like)}
                            like={(() => {
                              try {
                                return currentItem.setLike;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (currentItem.setLike = true);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["invokeGlobalAction"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.friendschat.ir/chat/addEvent",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userID: currentItem.id,
                                        type: "like"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          appid: "your-app-id",
                                          Authorization: $props.token,
                                          "Content-Type": "application/json",
                                          Version: "1.0"
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["invokeGlobalAction"] != null &&
                          typeof $steps["invokeGlobalAction"] === "object" &&
                          typeof $steps["invokeGlobalAction"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction"] = await $steps[
                            "invokeGlobalAction"
                          ];
                        }
                      }}
                      roundedFull={true}
                      size={"large"}
                    />

                    <MetoButton
                      className={classNames(
                        "__wab_instance",
                        sty.metoButton__rIl5E
                      )}
                      color={"neutral"}
                      flatSide={[]}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2DWvG
                          )}
                        >
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__l5L3X
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateCurrentuser"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["currentuser"]
                                },
                                operation: 0,
                                value: currentItem
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurrentuser"] != null &&
                          typeof $steps["updateCurrentuser"] === "object" &&
                          typeof $steps["updateCurrentuser"].then === "function"
                        ) {
                          $steps["updateCurrentuser"] = await $steps[
                            "updateCurrentuser"
                          ];
                        }

                        $steps["runProfile"] = true
                          ? (() => {
                              const actionArgs = {
                                eventRef: $props["profile"]
                              };
                              return (({ eventRef, args }) => {
                                return eventRef?.(...(args ?? []));
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runProfile"] != null &&
                          typeof $steps["runProfile"] === "object" &&
                          typeof $steps["runProfile"].then === "function"
                        ) {
                          $steps["runProfile"] = await $steps["runProfile"];
                        }

                        $steps["seen"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://api.friendschat.ir/chat/addEvent",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        userID: currentItem.id,
                                        type: "seen"
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  (() => {
                                    try {
                                      return {
                                        headers: {
                                          appid: "your-app-id",
                                          Authorization: $props.token,
                                          "Content-Type": "application/json",
                                          Version: "1.0"
                                        }
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["seen"] != null &&
                          typeof $steps["seen"] === "object" &&
                          typeof $steps["seen"].then === "function"
                        ) {
                          $steps["seen"] = await $steps["seen"];
                        }
                      }}
                      roundedFull={true}
                      size={"large"}
                    />
                  </Stack__>
                </Post>
              );
            })();
          })}
        </Reveal>
      </Stack__>
      <ApiRequest
        data-plasmic-name={"suggstionUser"}
        data-plasmic-override={overrides.suggstionUser}
        body={(() => {
          try {
            return { ...$state.body, page: $state.counter };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.suggstionUser)}
        config={(() => {
          try {
            return {
              headers: {
                appid: "your-app-id",
                Authorization: $props.token,
                "Content-Type": "application/json",
                Version: "1.0"
              }
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                headers: {
                  appid: "your-app-id",
                  Authorization: "Bearer your-token",
                  "Content-Type": "application/json",
                  Version: "1.0"
                }
              };
            }
            throw e;
          }
        })()}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["suggstionUser", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["suggstionUser", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["suggstionUser", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["runCode2"] =
              $state.isLoading == false && $state.suggstionUser?.data?.list
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.list = $state.suggstionUser.data.list;
                          if (window.list) {
                            return (window.list.style.overflow = "auto");
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["runCode2"] != null &&
              typeof $steps["runCode2"] === "object" &&
              typeof $steps["runCode2"].then === "function"
            ) {
              $steps["runCode2"] = await $steps["runCode2"];
            }

            $steps["runCode"] =
              $state.isLoading == true && $state.suggstionUser?.data?.list
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.isLoading = false;
                          var newData = $state.suggstionUser?.data?.list;
                          if (!newData || newData.length == 0) {
                            $state.hasMore = false;
                          } else {
                            $state.list = $state.list.concat(newData);
                          }
                          if (window.list) {
                            window.list.style.overflow = "auto";
                            return (window.list.scrollTop =
                              window.list.scrollTop + 200);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={(() => {
          try {
            return $state.chat && Object.keys($state.body).length != 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={(() => {
          try {
            return `https://api.friendschat.ir/${$props.controller}/${$props.action}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {(() => {
        try {
          return $state.isLoading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fZmtz)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dBg5
              )}
            >
              {
                "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox___1OOqo,
                "line-container"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__movUm,
                  "line line-1"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__dhpZp,
                  "line line-2"
                )}
              />
            </div>
          </div>
        </section>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reveal",
    "post",
    "metoLabel",
    "img",
    "like",
    "suggstionUser",
    "section"
  ],
  reveal: ["reveal", "post", "metoLabel", "img", "like"],
  post: ["post", "metoLabel", "img", "like"],
  metoLabel: ["metoLabel"],
  img: ["img"],
  like: ["like"],
  suggstionUser: ["suggstionUser"],
  section: ["section"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reveal: typeof Reveal;
  post: typeof Post;
  metoLabel: typeof MetoLabel;
  img: typeof PlasmicImg__;
  like: typeof Like;
  suggstionUser: typeof ApiRequest;
  section: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchPost__VariantsArgs;
    args?: PlasmicSearchPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSearchPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSearchPost__ArgProps,
          internalVariantPropNames: PlasmicSearchPost__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSearchPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchPost";
  } else {
    func.displayName = `PlasmicSearchPost.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchPost = Object.assign(
  // Top-level PlasmicSearchPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    reveal: makeNodeComponent("reveal"),
    post: makeNodeComponent("post"),
    metoLabel: makeNodeComponent("metoLabel"),
    img: makeNodeComponent("img"),
    like: makeNodeComponent("like"),
    suggstionUser: makeNodeComponent("suggstionUser"),
    section: makeNodeComponent("section"),

    // Metadata about props expected for PlasmicSearchPost
    internalVariantProps: PlasmicSearchPost__VariantProps,
    internalArgProps: PlasmicSearchPost__ArgProps
  }
);

export default PlasmicSearchPost;
/* prettier-ignore-end */
