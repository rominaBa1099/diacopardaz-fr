/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: AZ3lZ8OOy81U

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import SearchPost from "../../SearchPost"; // plasmic-import: Q5aLBQV7Zpaw/component
import Modal2 from "../../Modal2"; // plasmic-import: b0WRwkBcq6Fa/component
import MetoRadioGroup from "../../MetoRadioGroup"; // plasmic-import: NsmwdTv6Wctf/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicDating.module.css"; // plasmic-import: AZ3lZ8OOy81U/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: FDJVtRFwW-v3/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon

createPlasmicElementProxy;

export type PlasmicDating__VariantMembers = {};
export type PlasmicDating__VariantsArgs = {};
type VariantPropType = keyof PlasmicDating__VariantsArgs;
export const PlasmicDating__VariantProps = new Array<VariantPropType>();

export type PlasmicDating__ArgsType = {
  filter?: any;
  onFilterChange?: (val: string) => void;
  token?: string;
  chatOpen?: (event: any) => void;
  onCurrentuserChange?: (val: string) => void;
  profile?: () => void;
};
type ArgPropType = keyof PlasmicDating__ArgsType;
export const PlasmicDating__ArgProps = new Array<ArgPropType>(
  "filter",
  "onFilterChange",
  "token",
  "chatOpen",
  "onCurrentuserChange",
  "profile"
);

export type PlasmicDating__OverridesType = {
  root?: Flex__<"div">;
  metoButton?: Flex__<typeof MetoButton>;
  searchPost?: Flex__<typeof SearchPost>;
  modal2?: Flex__<typeof Modal2>;
  metoRadioGroup?: Flex__<typeof MetoRadioGroup>;
};

export interface DefaultDatingProps {
  filter?: any;
  onFilterChange?: (val: string) => void;
  token?: string;
  chatOpen?: (event: any) => void;
  onCurrentuserChange?: (val: string) => void;
  profile?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDating__RenderFunc(props: {
  variants: PlasmicDating__VariantsArgs;
  args: PlasmicDating__ArgsType;
  overrides: PlasmicDating__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "metoRadioGroup.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.filter;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "filter",
        type: "writable",
        variableType: "object",

        valueProp: "filter",
        onChangeProp: "onFilterChange"
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "list",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasMore",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "chat",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "searchPost.filter",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          label:
            "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646",
          value: "online"
        })
      },
      {
        path: "searchPost.body",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return { type: $state.filter.value };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "searchPost.chat",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "searchPost.counter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "current",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentuser",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onCurrentuserChange"
      },
      {
        path: "searchPost.currentuser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        "your-scroll-box"
      )}
      onScroll={async event => {
        const $steps = {};

        $steps["runCode"] =
          $state.hasMore && $state.isLoading == false
            ? (() => {
                const actionArgs = {
                  customFunction: async () => {
                    return (() => {
                      var scrollTop = event.currentTarget.scrollTop;
                      var list = event.currentTarget;
                      window.list = list;
                      if (
                        scrollTop + list.clientHeight >=
                        list.scrollHeight - 10
                      ) {
                        list.style.overflow = "hidden";
                        $state.counter++;
                        return ($state.isLoading = true);
                      }
                    })();
                  }
                };
                return (({ customFunction }) => {
                  return customFunction();
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
        if (
          $steps["runCode"] != null &&
          typeof $steps["runCode"] === "object" &&
          typeof $steps["runCode"].then === "function"
        ) {
          $steps["runCode"] = await $steps["runCode"];
        }
      }}
      style={(() => {
        try {
          return {
            "overflow-y": "auto",
            "scroll-behavior": "smooth"
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <section className={classNames(projectcss.all, sty.section__miNh)}>
        <MetoButton
          data-plasmic-name={"metoButton"}
          data-plasmic-override={overrides.metoButton}
          className={classNames("__wab_instance", sty.metoButton)}
          end={
            <ChevronDownIcon
              className={classNames(projectcss.all, sty.svg__utU80)}
              role={"img"}
            />
          }
          iconStart={
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          }
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__skE8K
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `مرتب سازی شده براساس : ${$state.filter.label}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Text";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["updateModalOpen"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["modal2", "open"]
                    },
                    operation: 4,
                    value: true
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateModalOpen"] != null &&
              typeof $steps["updateModalOpen"] === "object" &&
              typeof $steps["updateModalOpen"].then === "function"
            ) {
              $steps["updateModalOpen"] = await $steps["updateModalOpen"];
            }
          }}
          roundedFull={true}
          start={
            <Icon5Icon
              className={classNames(projectcss.all, sty.svg__bVgpa)}
              role={"img"}
            />
          }
        />
      </section>
      <SearchPost
        data-plasmic-name={"searchPost"}
        data-plasmic-override={overrides.searchPost}
        action={"suggstionUser"}
        body={generateStateValueProp($state, ["searchPost", "body"])}
        chat={generateStateValueProp($state, ["searchPost", "chat"])}
        chat2={args.chatOpen}
        className={classNames("__wab_instance", sty.searchPost)}
        controller={"chat"}
        counter={generateStateValueProp($state, ["searchPost", "counter"])}
        filter={generateStateValueProp($state, ["searchPost", "filter"])}
        onBodyChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["searchPost", "body"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onChatChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["searchPost", "chat"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onCounterChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["searchPost", "counter"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onCurrentuserChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "searchPost",
            "currentuser"
          ]).apply(null, eventArgs);

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["updateCurrentuser"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["currentuser"]
                    },
                    operation: 0,
                    value: $state.searchPost.currentuser
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateCurrentuser"] != null &&
              typeof $steps["updateCurrentuser"] === "object" &&
              typeof $steps["updateCurrentuser"].then === "function"
            ) {
              $steps["updateCurrentuser"] = await $steps["updateCurrentuser"];
            }
          }).apply(null, eventArgs);
        }}
        onFilterChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["searchPost", "filter"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        profile={args.profile}
      />

      <Modal2
        data-plasmic-name={"modal2"}
        data-plasmic-override={overrides.modal2}
        background={"dark"}
        body={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__lPotF)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___9CQu)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jfRqd
                )}
              >
                {
                  "\u062f\u0646\u0628\u0627\u0644 \u06a9\u062f\u0648\u0645 \u0647\u0645 \u0635\u062d\u0628\u062a\u06cc\u061f"
                }
              </div>
            </div>
            <MetoRadioGroup
              data-plasmic-name={"metoRadioGroup"}
              data-plasmic-override={overrides.metoRadioGroup}
              className={classNames("__wab_instance", sty.metoRadioGroup)}
              onValueChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "metoRadioGroup",
                  "value"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateSearchPostChat"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["searchPost", "chat"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSearchPostChat"] != null &&
                    typeof $steps["updateSearchPostChat"] === "object" &&
                    typeof $steps["updateSearchPostChat"].then === "function"
                  ) {
                    $steps["updateSearchPostChat"] = await $steps[
                      "updateSearchPostChat"
                    ];
                  }

                  $steps["runCode"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              $state.filter = $state.metoRadioGroup.value;
                              $state.searchPost.counter = 0;
                              if (window.list) {
                                window.list.scrollTop = 0;
                                return (window.list.style.overflow = "hidden");
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }

                  $steps["updateModalOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["modal2", "open"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateModalOpen"] != null &&
                    typeof $steps["updateModalOpen"] === "object" &&
                    typeof $steps["updateModalOpen"].then === "function"
                  ) {
                    $steps["updateModalOpen"] = await $steps["updateModalOpen"];
                  }

                  $steps["updateChat2"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["searchPost", "chat"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateChat2"] != null &&
                    typeof $steps["updateChat2"] === "object" &&
                    typeof $steps["updateChat2"].then === "function"
                  ) {
                    $steps["updateChat2"] = await $steps["updateChat2"];
                  }
                }).apply(null, eventArgs);
              }}
              radio={[
                {
                  label:
                    "\u0647\u0645 \u0627\u0633\u062a\u0627\u0646\u06cc\u200c\u0647\u0627",
                  value: "state"
                },
                {
                  label:
                    "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u062c\u062f\u06cc\u062f",
                  value: "new"
                },
                {
                  label:
                    "\u0647\u0645\u0634\u0647\u0631\u06cc\u200c\u0647\u0627",
                  value: "city"
                },
                {
                  label:
                    "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646",
                  value: "online"
                },
                {
                  label:
                    "\u0628\u0647\u062a\u0631\u06cc\u0646\u200c\u0647\u0627\u06cc \u0634\u0647\u0631 \u0634\u0645\u0627",
                  value: "best"
                },
                {
                  label:
                    "\u0647\u0645\u0647 \u06a9\u0627\u0631\u0628\u0631\u0627\u0646",
                  value: "all"
                }
              ]}
              style2={"purple"}
              value={generateStateValueProp($state, [
                "metoRadioGroup",
                "value"
              ])}
            />
          </Stack__>
        }
        className={classNames("__wab_instance", sty.modal2)}
        fullScreen={true}
        onBack={async () => {
          const $steps = {};

          $steps["updateModal2Open"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal2", "open"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateModal2Open"] != null &&
            typeof $steps["updateModal2Open"] === "object" &&
            typeof $steps["updateModal2Open"].then === "function"
          ) {
            $steps["updateModal2Open"] = await $steps["updateModal2Open"];
          }
        }}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal2", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal2", "open"])}
        title={null}
      />

      {(() => {
        try {
          return $state.isLoading;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <section className={classNames(projectcss.all, sty.section__hpctp)}>
          <div className={classNames(projectcss.all, sty.freeBox__x7Lt6)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1CQoh
              )}
            >
              {
                "\u062f\u0631 \u062d\u0627\u0644 \u0628\u0627\u0631\u06af\u0630\u0627\u0631\u06cc ..."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                sty.freeBox__bgKWj,
                "line-container"
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wizZ,
                  "line line-1"
                )}
              />

              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___46H9J,
                  "line line-2"
                )}
              />
            </div>
          </div>
        </section>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "metoButton", "searchPost", "modal2", "metoRadioGroup"],
  metoButton: ["metoButton"],
  searchPost: ["searchPost"],
  modal2: ["modal2", "metoRadioGroup"],
  metoRadioGroup: ["metoRadioGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metoButton: typeof MetoButton;
  searchPost: typeof SearchPost;
  modal2: typeof Modal2;
  metoRadioGroup: typeof MetoRadioGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDating__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDating__VariantsArgs;
    args?: PlasmicDating__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDating__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDating__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDating__ArgProps,
          internalVariantPropNames: PlasmicDating__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDating__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDating";
  } else {
    func.displayName = `PlasmicDating.${nodeName}`;
  }
  return func;
}

export const PlasmicDating = Object.assign(
  // Top-level PlasmicDating renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metoButton: makeNodeComponent("metoButton"),
    searchPost: makeNodeComponent("searchPost"),
    modal2: makeNodeComponent("modal2"),
    metoRadioGroup: makeNodeComponent("metoRadioGroup"),

    // Metadata about props expected for PlasmicDating
    internalVariantProps: PlasmicDating__VariantProps,
    internalArgProps: PlasmicDating__ArgProps
  }
);

export default PlasmicDating;
/* prettier-ignore-end */
