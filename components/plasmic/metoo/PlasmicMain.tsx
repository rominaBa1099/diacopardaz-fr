/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: rrP9wmPRaIEY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Dating from "../../Dating"; // plasmic-import: AZ3lZ8OOy81U/component
import Search from "../../Search"; // plasmic-import: HULKK0Icu5E3/component
import Chat from "../../Chat"; // plasmic-import: f10SwOFmn0uO/component
import Profile from "../../Profile"; // plasmic-import: I_HeW-rGK62W/component
import Setting from "../../Setting"; // plasmic-import: nLQQ9UAUBUbY/component
import Modal2 from "../../Modal2"; // plasmic-import: b0WRwkBcq6Fa/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: SjBUwY_Y_i3-/codeComponent

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicMain.module.css"; // plasmic-import: rrP9wmPRaIEY/css

import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon

createPlasmicElementProxy;

export type PlasmicMain__VariantMembers = {
  show: "chat" | "search" | "dating" | "profile" | "settings";
};
export type PlasmicMain__VariantsArgs = {
  show?: SingleChoiceArg<"chat" | "search" | "dating" | "profile" | "settings">;
};
type VariantPropType = keyof PlasmicMain__VariantsArgs;
export const PlasmicMain__VariantProps = new Array<VariantPropType>("show");

export type PlasmicMain__ArgsType = {
  editProfile?: (event: any) => void;
  token?: string;
  city?: any;
  data?: any;
  stateId?: number;
  onStateIdChange?: (val: string) => void;
  chatOpen?: (event: any) => void;
  onCurrentuserChange?: (val: string) => void;
  back?: boolean;
  onBackChange?: (val: string) => void;
  shop?: any;
  onShopChange?: (val: string) => void;
  userInfo?: any;
  profileOpen?: () => void;
  settingClick?: () => void;
  selectSetting?: any;
};
type ArgPropType = keyof PlasmicMain__ArgsType;
export const PlasmicMain__ArgProps = new Array<ArgPropType>(
  "editProfile",
  "token",
  "city",
  "data",
  "stateId",
  "onStateIdChange",
  "chatOpen",
  "onCurrentuserChange",
  "back",
  "onBackChange",
  "shop",
  "onShopChange",
  "userInfo",
  "profileOpen",
  "settingClick",
  "selectSetting"
);

export type PlasmicMain__OverridesType = {
  root?: Flex__<"div">;
  dating?: Flex__<typeof Dating>;
  search?: Flex__<typeof Search>;
  chat?: Flex__<typeof Chat>;
  profile?: Flex__<typeof Profile>;
  setting?: Flex__<typeof Setting>;
  modal2?: Flex__<typeof Modal2>;
  metoButton?: Flex__<typeof MetoButton>;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultMainProps {
  editProfile?: (event: any) => void;
  token?: string;
  city?: any;
  data?: any;
  stateId?: number;
  onStateIdChange?: (val: string) => void;
  chatOpen?: (event: any) => void;
  onCurrentuserChange?: (val: string) => void;
  back?: boolean;
  onBackChange?: (val: string) => void;
  shop?: any;
  onShopChange?: (val: string) => void;
  userInfo?: any;
  profileOpen?: () => void;
  settingClick?: () => void;
  selectSetting?: any;
  show?: SingleChoiceArg<"chat" | "search" | "dating" | "profile" | "settings">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMain__RenderFunc(props: {
  variants: PlasmicMain__VariantsArgs;
  args: PlasmicMain__ArgsType;
  overrides: PlasmicMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g",
          city: {
            list: [
              {
                id: 1,
                title:
                  "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
              },
              {
                id: 2,
                title:
                  "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
              },
              { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
              { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
              { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
              { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
              { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
              { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
              {
                id: 9,
                title:
                  "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
              },
              {
                id: 10,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
              },
              {
                id: 11,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
              },
              {
                id: 12,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
              },
              { id: 13, title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646" },
              { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
              { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
              {
                id: 16,
                title:
                  "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
              },
              { id: 17, title: "\u0641\u0627\u0631\u0633" },
              { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
              { id: 19, title: "\u0642\u0645" },
              { id: 20, title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646" },
              { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
              {
                id: 22,
                title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
              },
              {
                id: 23,
                title:
                  "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
              },
              { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
              { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
              { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
              {
                id: 27,
                title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
              },
              { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
              { id: 29, title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646" },
              { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
              { id: 31, title: "\u06cc\u0632\u062f" }
            ]
          },
          data: {
            list: [
              {
                id: 1,
                title:
                  "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u0634\u0631\u0642\u06cc"
              },
              {
                id: 2,
                title:
                  "\u0622\u0630\u0631\u0628\u0627\u06cc\u062c\u0627\u0646 \u063a\u0631\u0628\u06cc"
              },
              { id: 3, title: "\u0627\u0631\u062f\u0628\u06cc\u0644" },
              { id: 4, title: "\u0627\u0635\u0641\u0647\u0627\u0646" },
              { id: 5, title: "\u0627\u0644\u0628\u0631\u0632" },
              { id: 6, title: "\u0627\u06cc\u0644\u0627\u0645" },
              { id: 7, title: "\u0628\u0648\u0634\u0647\u0631" },
              { id: 8, title: "\u062a\u0647\u0631\u0627\u0646" },
              {
                id: 9,
                title:
                  "\u0686\u0647\u0627\u0631\u0645\u062d\u0627\u0644 \u0628\u062e\u062a\u06cc\u0627\u0631\u06cc"
              },
              {
                id: 10,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u062c\u0646\u0648\u0628\u06cc"
              },
              {
                id: 11,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u0631\u0636\u0648\u06cc"
              },
              {
                id: 12,
                title:
                  "\u062e\u0631\u0627\u0633\u0627\u0646 \u0634\u0645\u0627\u0644\u06cc"
              },
              { id: 13, title: "\u062e\u0648\u0632\u0633\u062a\u0627\u0646" },
              { id: 14, title: "\u0632\u0646\u062c\u0627\u0646" },
              { id: 15, title: "\u0633\u0645\u0646\u0627\u0646" },
              {
                id: 16,
                title:
                  "\u0633\u06cc\u0633\u062a\u0627\u0646 \u0648 \u0628\u0644\u0648\u0686\u0633\u062a\u0627\u0646"
              },
              { id: 17, title: "\u0641\u0627\u0631\u0633" },
              { id: 18, title: "\u0642\u0632\u0648\u06cc\u0646" },
              { id: 19, title: "\u0642\u0645" },
              { id: 20, title: "\u06a9\u0631\u062f\u0633\u062a\u0627\u0646" },
              { id: 21, title: "\u06a9\u0631\u0645\u0627\u0646" },
              {
                id: 22,
                title: "\u06a9\u0631\u0645\u0627\u0646\u0634\u0627\u0647"
              },
              {
                id: 23,
                title:
                  "\u06a9\u0647\u06a9\u06cc\u0644\u0648\u06cc\u0647 \u0648 \u0628\u0648\u06cc\u0631\u0627\u062d\u0645\u062f"
              },
              { id: 24, title: "\u06af\u0644\u0633\u062a\u0627\u0646" },
              { id: 25, title: "\u06af\u06cc\u0644\u0627\u0646" },
              { id: 26, title: "\u0644\u0631\u0633\u062a\u0627\u0646" },
              {
                id: 27,
                title: "\u0645\u0627\u0632\u0646\u062f\u0631\u0627\u0646"
              },
              { id: 28, title: "\u0645\u0631\u06a9\u0632\u06cc" },
              { id: 29, title: "\u0647\u0631\u0645\u0632\u06af\u0627\u0646" },
              { id: 30, title: "\u0647\u0645\u062f\u0627\u0646" },
              { id: 31, title: "\u06cc\u0632\u062f" }
            ]
          },
          selectSetting: {}
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "show",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.show
      },
      {
        path: "dating.filter",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          label:
            "\u06a9\u0627\u0631\u0628\u0631\u0627\u0646 \u0622\u0646\u0644\u0627\u06cc\u0646",
          value: "online"
        })
      },
      {
        path: "counter",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "search.stateId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.stateId;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "search.city",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["city"]
      },
      {
        path: "stateId",
        type: "writable",
        variableType: "number",

        valueProp: "stateId",
        onChangeProp: "onStateIdChange"
      },
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentuser",
        type: "readonly",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({}),

        onChangeProp: "onCurrentuserChange"
      },
      {
        path: "dating.currentuser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "back",
        type: "writable",
        variableType: "boolean",

        valueProp: "back",
        onChangeProp: "onBackChange"
      },
      {
        path: "profile.shop",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.shop;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {};
              }
              throw e;
            }
          })()
      },
      {
        path: "shop",
        type: "writable",
        variableType: "object",

        valueProp: "shop",
        onChangeProp: "onShopChange"
      },
      {
        path: "chat.currentuser",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "setting.selectItem",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["selectSetting"]
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [sty.rootshow_chat]: hasVariant($state, "show", "chat"),
          [sty.rootshow_dating]: hasVariant($state, "show", "dating"),
          [sty.rootshow_profile]: hasVariant($state, "show", "profile"),
          [sty.rootshow_search]: hasVariant($state, "show", "search"),
          [sty.rootshow_settings]: hasVariant($state, "show", "settings")
        }
      )}
    >
      <Reveal
        className={classNames("__wab_instance", sty.reveal__loax0, {
          [sty.revealshow_dating__loax0CgtPh]: hasVariant(
            $state,
            "show",
            "dating"
          ),
          [sty.revealshow_search__loax0NicB7]: hasVariant(
            $state,
            "show",
            "search"
          )
        })}
        damping={0.1}
        duration={500}
        effect={"fade"}
        triggerOnce={true}
      >
        <Dating
          data-plasmic-name={"dating"}
          data-plasmic-override={overrides.dating}
          chatOpen={args.chatOpen}
          className={classNames("__wab_instance", sty.dating, {
            [sty.datingshow_chat]: hasVariant($state, "show", "chat"),
            [sty.datingshow_dating]: hasVariant($state, "show", "dating"),
            [sty.datingshow_search]: hasVariant($state, "show", "search")
          })}
          filter={generateStateValueProp($state, ["dating", "filter"])}
          onCurrentuserChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dating", "currentuser"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateCurrentuser"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["currentuser"]
                      },
                      operation: 0,
                      value: $state.dating.currentuser
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCurrentuser"] != null &&
                typeof $steps["updateCurrentuser"] === "object" &&
                typeof $steps["updateCurrentuser"].then === "function"
              ) {
                $steps["updateCurrentuser"] = await $steps["updateCurrentuser"];
              }
            }).apply(null, eventArgs);
          }}
          onFilterChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["dating", "filter"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
          profile={args.profileOpen}
          token={(() => {
            try {
              return $props.token;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Reveal>
      <Search
        data-plasmic-name={"search"}
        data-plasmic-override={overrides.search}
        chatOpen={async event => {
          const $steps = {};

          $steps["runChatOpen"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["chatOpen"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runChatOpen"] != null &&
            typeof $steps["runChatOpen"] === "object" &&
            typeof $steps["runChatOpen"].then === "function"
          ) {
            $steps["runChatOpen"] = await $steps["runChatOpen"];
          }
        }}
        city={generateStateValueProp($state, ["search", "city"])}
        className={classNames("__wab_instance", sty.search, {
          [sty.searchshow_chat]: hasVariant($state, "show", "chat"),
          [sty.searchshow_dating]: hasVariant($state, "show", "dating"),
          [sty.searchshow_search]: hasVariant($state, "show", "search")
        })}
        data={args.data}
        onCityChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["search", "city"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onStateIdChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["search", "stateId"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }

          (async val => {
            const $steps = {};

            $steps["updateStateId"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["stateId"]
                    },
                    operation: 0,
                    value: $state.search.stateId
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateStateId"] != null &&
              typeof $steps["updateStateId"] === "object" &&
              typeof $steps["updateStateId"].then === "function"
            ) {
              $steps["updateStateId"] = await $steps["updateStateId"];
            }
          }).apply(null, eventArgs);
        }}
        profile={async () => {
          const $steps = {};

          $steps["runProfileOpen"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["profileOpen"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runProfileOpen"] != null &&
            typeof $steps["runProfileOpen"] === "object" &&
            typeof $steps["runProfileOpen"].then === "function"
          ) {
            $steps["runProfileOpen"] = await $steps["runProfileOpen"];
          }
        }}
        stateId={generateStateValueProp($state, ["search", "stateId"])}
      />

      <Reveal
        className={classNames("__wab_instance", sty.reveal__txJnY, {
          [sty.revealshow_chat__txJnYktlY]: hasVariant($state, "show", "chat")
        })}
        damping={0.1}
        duration={500}
        triggerOnce={true}
      >
        <Chat
          data-plasmic-name={"chat"}
          data-plasmic-override={overrides.chat}
          chatOpen={async () => {
            const $steps = {};

            $steps["runChatOpen"] = true
              ? (() => {
                  const actionArgs = { eventRef: $props["chatOpen"] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runChatOpen"] != null &&
              typeof $steps["runChatOpen"] === "object" &&
              typeof $steps["runChatOpen"].then === "function"
            ) {
              $steps["runChatOpen"] = await $steps["runChatOpen"];
            }
          }}
          className={classNames("__wab_instance", sty.chat, {
            [sty.chatshow_chat]: hasVariant($state, "show", "chat"),
            [sty.chatshow_dating]: hasVariant($state, "show", "dating"),
            [sty.chatshow_search]: hasVariant($state, "show", "search")
          })}
          currentuser={generateStateValueProp($state, ["chat", "currentuser"])}
          onCurrentuserChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["chat", "currentuser"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }

            (async val => {
              const $steps = {};

              $steps["updateCurrentuser"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["currentuser"]
                      },
                      operation: 0,
                      value: $state.chat.currentuser
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCurrentuser"] != null &&
                typeof $steps["updateCurrentuser"] === "object" &&
                typeof $steps["updateCurrentuser"].then === "function"
              ) {
                $steps["updateCurrentuser"] = await $steps["updateCurrentuser"];
              }
            }).apply(null, eventArgs);
          }}
          profileOpen={async () => {
            const $steps = {};

            $steps["runProfile2"] = true
              ? (() => {
                  const actionArgs = { eventRef: $props["profileOpen"] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runProfile2"] != null &&
              typeof $steps["runProfile2"] === "object" &&
              typeof $steps["runProfile2"].then === "function"
            ) {
              $steps["runProfile2"] = await $steps["runProfile2"];
            }
          }}
        />
      </Reveal>
      <Profile
        data-plasmic-name={"profile"}
        data-plasmic-override={overrides.profile}
        className={classNames("__wab_instance", sty.profile, {
          [sty.profileshow_profile]: hasVariant($state, "show", "profile")
        })}
        onClick={args.editProfile}
        onShopChange2={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["profile", "shop"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        shop={generateStateValueProp($state, ["profile", "shop"])}
        userInfo={(() => {
          try {
            return $props.userInfo;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Setting
        data-plasmic-name={"setting"}
        data-plasmic-override={overrides.setting}
        className={classNames("__wab_instance", sty.setting, {
          [sty.settingshow_settings]: hasVariant($state, "show", "settings")
        })}
        onSelectItemChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["setting", "selectItem"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onclick={args.settingClick}
        selectItem={generateStateValueProp($state, ["setting", "selectItem"])}
        userInfo={(() => {
          try {
            return $props.userInfo;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <Modal2
        data-plasmic-name={"modal2"}
        data-plasmic-override={overrides.modal2}
        background={"exit"}
        body={
          <div className={classNames(projectcss.all, sty.freeBox__mkFx6)}>
            <MetoButton
              data-plasmic-name={"metoButton"}
              data-plasmic-override={overrides.metoButton}
              className={classNames("__wab_instance", sty.metoButton)}
              color={"unnamedVariant"}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wtYgS
                  )}
                >
                  {"\u0622\u0631\u0647"}
                </div>
              }
              onClick={async event => {
                const $steps = {};

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            return window.close();
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }
              }}
              roundedFull={true}
              size={"extraLarge"}
            />
          </div>
        }
        className={classNames("__wab_instance", sty.modal2)}
        onBack={async () => {
          const $steps = {};

          $steps["updateModal2Open"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal2", "open"]
                  },
                  operation: 0,
                  value: false
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateModal2Open"] != null &&
            typeof $steps["updateModal2Open"] === "object" &&
            typeof $steps["updateModal2Open"].then === "function"
          ) {
            $steps["updateModal2Open"] = await $steps["updateModal2Open"];
          }
        }}
        onOpenChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["modal2", "open"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        open={generateStateValueProp($state, ["modal2", "open"])}
        title={
          <div className={classNames(projectcss.all, sty.freeBox__bg1B)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gsid6
              )}
            >
              {
                "\u0645\u0637\u0645\u0626\u0646\u06cc \u06a9\u0647 \u0645\u06cc\u062e\u0648\u0627\u06cc \u062e\u0627\u0631\u062c \u0628\u0634\u06cc \u2639 \u061f"
              }
            </div>
          </div>
        }
      />

      <BackHandler
        data-plasmic-name={"backHandler"}
        data-plasmic-override={overrides.backHandler}
        active={(() => {
          try {
            return $state.back;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.backHandler)}
        onBack={async () => {
          const $steps = {};

          $steps["updateModal2Open"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["modal2", "open"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateModal2Open"] != null &&
            typeof $steps["updateModal2Open"] === "object" &&
            typeof $steps["updateModal2Open"].then === "function"
          ) {
            $steps["updateModal2Open"] = await $steps["updateModal2Open"];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "dating",
    "search",
    "chat",
    "profile",
    "setting",
    "modal2",
    "metoButton",
    "backHandler"
  ],
  dating: ["dating"],
  search: ["search"],
  chat: ["chat"],
  profile: ["profile"],
  setting: ["setting"],
  modal2: ["modal2", "metoButton"],
  metoButton: ["metoButton"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dating: typeof Dating;
  search: typeof Search;
  chat: typeof Chat;
  profile: typeof Profile;
  setting: typeof Setting;
  modal2: typeof Modal2;
  metoButton: typeof MetoButton;
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMain__VariantsArgs;
    args?: PlasmicMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMain__ArgProps,
          internalVariantPropNames: PlasmicMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain";
  } else {
    func.displayName = `PlasmicMain.${nodeName}`;
  }
  return func;
}

export const PlasmicMain = Object.assign(
  // Top-level PlasmicMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dating: makeNodeComponent("dating"),
    search: makeNodeComponent("search"),
    chat: makeNodeComponent("chat"),
    profile: makeNodeComponent("profile"),
    setting: makeNodeComponent("setting"),
    modal2: makeNodeComponent("modal2"),
    metoButton: makeNodeComponent("metoButton"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicMain
    internalVariantProps: PlasmicMain__VariantProps,
    internalArgProps: PlasmicMain__ArgProps
  }
);

export default PlasmicMain;
/* prettier-ignore-end */
