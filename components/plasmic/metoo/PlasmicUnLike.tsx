/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: V5DgyhAzYz_C

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog3 from "../../Dialog3"; // plasmic-import: yrDH-KZfpXl3/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/styleTokensProvider
import { _useStyleTokens as useStyleTokens_meto_deign_system } from ""; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicUnLike.module.css"; // plasmic-import: V5DgyhAzYz_C/css

import Icon199Icon from "./icons/PlasmicIcon__Icon199"; // plasmic-import: vfjOzqyXVw0B/icon
import Icon203Icon from "./icons/PlasmicIcon__Icon203"; // plasmic-import: jwvhv7uUCavY/icon

createPlasmicElementProxy;

export type PlasmicUnLike__VariantMembers = {
  warning: "warning";
  unLike: "unLike";
};
export type PlasmicUnLike__VariantsArgs = {
  warning?: SingleBooleanChoiceArg<"warning">;
  unLike?: SingleBooleanChoiceArg<"unLike">;
};
type VariantPropType = keyof PlasmicUnLike__VariantsArgs;
export const PlasmicUnLike__VariantProps = new Array<VariantPropType>(
  "warning",
  "unLike"
);

export type PlasmicUnLike__ArgsType = {
  onClick?: (event: any) => void;
  feedbackData?: any;
};
type ArgPropType = keyof PlasmicUnLike__ArgsType;
export const PlasmicUnLike__ArgProps = new Array<ArgPropType>(
  "onClick",
  "feedbackData"
);

export type PlasmicUnLike__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
  dialog3?: Flex__<typeof Dialog3>;
};

export interface DefaultUnLikeProps {
  onClick?: (event: any) => void;
  feedbackData?: any;
  warning?: SingleBooleanChoiceArg<"warning">;
  unLike?: SingleBooleanChoiceArg<"unLike">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUnLike__RenderFunc(props: {
  variants: PlasmicUnLike__VariantsArgs;
  args: PlasmicUnLike__ArgsType;
  overrides: PlasmicUnLike__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "warning",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.warning
      },
      {
        path: "unLike",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unLike
      },
      {
        path: "dialog3.opendialog",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "feedback",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          "\u0633\u0628\u06a9 \u067e\u0627\u0633\u062e\u200c\u06af\u0648\u06cc\u06cc \u0631\u0627 \u062f\u0648\u0633\u062a \u0646\u062f\u0627\u0634\u062a\u0645",
          "\u0627\u0632 \u0633\u0628\u06a9 \u067e\u0627\u0633\u062e\u200c\u06af\u0648\u06cc\u06cc \u062e\u0648\u0634\u0645 \u0646\u06cc\u0627\u0645\u062f",
          "\u0627\u0632 \u0646\u0638\u0631 \u0627\u0637\u0644\u0627\u0639\u0627\u062a\u06cc \u062f\u0642\u06cc\u0642 \u0646\u0628\u0648\u062f"
        ]
      },
      {
        path: "feed",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_meto_deign_system =
    useStyleTokens_meto_deign_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_meto_deign_system,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        {
          [sty.rootunLike]: hasVariant($state, "unLike", "unLike"),
          [sty.rootwarning]: hasVariant($state, "warning", "warning")
        }
      )}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "unLike", "unLike") ? Icon203Icon : Icon199Icon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgunLike]: hasVariant($state, "unLike", "unLike")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateDialog3Opendialog"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["dialog3", "opendialog"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateDialog3Opendialog"] != null &&
            typeof $steps["updateDialog3Opendialog"] === "object" &&
            typeof $steps["updateDialog3Opendialog"].then === "function"
          ) {
            $steps["updateDialog3Opendialog"] = await $steps[
              "updateDialog3Opendialog"
            ];
          }
        }}
        role={"img"}
      />

      <Dialog3
        data-plasmic-name={"dialog3"}
        data-plasmic-override={overrides.dialog3}
        className={classNames("__wab_instance", sty.dialog3, {
          [sty.dialog3unLike]: hasVariant($state, "unLike", "unLike")
        })}
        onOpendialogChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["dialog3", "opendialog"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        opendialog={generateStateValueProp($state, ["dialog3", "opendialog"])}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "dialog3"],
  svg: ["svg"],
  dialog3: ["dialog3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  dialog3: typeof Dialog3;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUnLike__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUnLike__VariantsArgs;
    args?: PlasmicUnLike__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUnLike__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUnLike__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUnLike__ArgProps,
          internalVariantPropNames: PlasmicUnLike__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUnLike__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUnLike";
  } else {
    func.displayName = `PlasmicUnLike.${nodeName}`;
  }
  return func;
}

export const PlasmicUnLike = Object.assign(
  // Top-level PlasmicUnLike renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    dialog3: makeNodeComponent("dialog3"),

    // Metadata about props expected for PlasmicUnLike
    internalVariantProps: PlasmicUnLike__VariantProps,
    internalArgProps: PlasmicUnLike__ArgProps
  }
);

export default PlasmicUnLike;
/* prettier-ignore-end */
