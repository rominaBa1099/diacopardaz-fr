/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: TkXLJDEhkWy5

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoAvatar from "../../MetoAvatar"; // plasmic-import: _gMBtmcmMLtW/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicHeaderItem.module.css"; // plasmic-import: TkXLJDEhkWy5/css

createPlasmicElementProxy;

export type PlasmicHeaderItem__VariantMembers = {};
export type PlasmicHeaderItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderItem__VariantsArgs;
export const PlasmicHeaderItem__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderItem__ArgsType = {
  currentItem?: any;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicHeaderItem__ArgsType;
export const PlasmicHeaderItem__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "onClick"
);

export type PlasmicHeaderItem__OverridesType = {
  root?: Flex__<"div">;
  metoAvatar?: Flex__<typeof MetoAvatar>;
  metoLabel?: Flex__<typeof MetoLabel>;
  text?: Flex__<"div">;
};

export interface DefaultHeaderItemProps {
  currentItem?: any;
  onClick?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderItem__RenderFunc(props: {
  variants: PlasmicHeaderItem__VariantsArgs;
  args: PlasmicHeaderItem__ArgsType;
  overrides: PlasmicHeaderItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      onClick={args.onClick}
    >
      <MetoAvatar
        data-plasmic-name={"metoAvatar"}
        data-plasmic-override={overrides.metoAvatar}
        badge={(() => {
          try {
            return (() => {
              function isOnline(user) {
                const now = new Date();
                const lastSeen = new Date(user.lastActivity + " GMT+0330");
                const diff = (now - lastSeen) / (1000 * 60);
                return diff <= 2;
              }
              if ($props.currentItem.activeGoldenTick == 1) return "goold";
              else if (isOnline($props.currentItem)) return "check";
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "goold";
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.metoAvatar)}
        ring={"blue"}
        src={(() => {
          try {
            return (() => {
              if (!/\.[^/.]+$/.test($props.currentItem.profilePic)) {
                return ($props.currentItem.profilePic += ".jpg");
              } else {
                return $props.currentItem.profilePic;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <MetoLabel
        data-plasmic-name={"metoLabel"}
        data-plasmic-override={overrides.metoLabel}
        className={classNames("__wab_instance", sty.metoLabel)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.currentItem.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Label";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </MetoLabel>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "metoAvatar", "metoLabel", "text"],
  metoAvatar: ["metoAvatar"],
  metoLabel: ["metoLabel", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metoAvatar: typeof MetoAvatar;
  metoLabel: typeof MetoLabel;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderItem__VariantsArgs;
    args?: PlasmicHeaderItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeaderItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderItem__ArgProps,
          internalVariantPropNames: PlasmicHeaderItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderItem";
  } else {
    func.displayName = `PlasmicHeaderItem.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderItem = Object.assign(
  // Top-level PlasmicHeaderItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metoAvatar: makeNodeComponent("metoAvatar"),
    metoLabel: makeNodeComponent("metoLabel"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeaderItem
    internalVariantProps: PlasmicHeaderItem__VariantProps,
    internalArgProps: PlasmicHeaderItem__ArgProps
  }
);

export default PlasmicHeaderItem;
/* prettier-ignore-end */
