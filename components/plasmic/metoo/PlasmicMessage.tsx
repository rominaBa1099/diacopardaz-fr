/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: n7ndL0BhVm4-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import UploudeTime from "../../UploudeTime"; // plasmic-import: eACF_em_NR97/component
import LoadingCompopnentGray from "../../LoadingCompopnentGray"; // plasmic-import: qmGaLGxWODU7/component
import UnLike from "../../UnLike"; // plasmic-import: V5DgyhAzYz_C/component
import Like2 from "../../Like2"; // plasmic-import: GBScca95RuOo/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicMessage.module.css"; // plasmic-import: n7ndL0BhVm4-/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: lJCBcApDldfA/icon
import Icon119Icon from "./icons/PlasmicIcon__Icon119"; // plasmic-import: YZnu0BGKqfAx/icon
import Icon200Icon from "./icons/PlasmicIcon__Icon200"; // plasmic-import: djixLveZj3dZ/icon

createPlasmicElementProxy;

export type PlasmicMessage__VariantMembers = {
  pazireshAnswer: "pazireshAnswer";
  liomAnswer: "liomAnswer";
  loadingMessage: "loadingMessage";
  endMessege: "endMessege";
  hint: "hint";
  bot: "bot";
  owner: "owner";
  feedback: "feedback";
};
export type PlasmicMessage__VariantsArgs = {
  pazireshAnswer?: SingleBooleanChoiceArg<"pazireshAnswer">;
  liomAnswer?: SingleBooleanChoiceArg<"liomAnswer">;
  loadingMessage?: SingleBooleanChoiceArg<"loadingMessage">;
  endMessege?: SingleBooleanChoiceArg<"endMessege">;
  hint?: SingleBooleanChoiceArg<"hint">;
  bot?: SingleBooleanChoiceArg<"bot">;
  owner?: SingleBooleanChoiceArg<"owner">;
  feedback?: SingleBooleanChoiceArg<"feedback">;
};
type VariantPropType = keyof PlasmicMessage__VariantsArgs;
export const PlasmicMessage__VariantProps = new Array<VariantPropType>(
  "pazireshAnswer",
  "liomAnswer",
  "loadingMessage",
  "endMessege",
  "hint",
  "bot",
  "owner",
  "feedback"
);

export type PlasmicMessage__ArgsType = {
  inApp?: boolean;
  error2?: boolean;
  resend?: (event: any) => void;
  _delete?: (event: any) => void;
  credit?: (event: any) => void;
  copy?: (event: any) => void;
  like?: (event: any) => void;
  unLike?: (event: any) => void;
  feedbackData?: any;
  posttime?: any;
  showtime?: boolean;
  onShowtimeChange?: (val: string) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMessage__ArgsType;
export const PlasmicMessage__ArgProps = new Array<ArgPropType>(
  "inApp",
  "error2",
  "resend",
  "_delete",
  "credit",
  "copy",
  "like",
  "unLike",
  "feedbackData",
  "posttime",
  "showtime",
  "onShowtimeChange",
  "children",
  "slot"
);

export type PlasmicMessage__OverridesType = {
  root?: Flex__<"div">;
  loadingCompopnentGray?: Flex__<typeof LoadingCompopnentGray>;
  text?: Flex__<"div">;
  unLike?: Flex__<typeof UnLike>;
  like2?: Flex__<typeof Like2>;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultMessageProps {
  inApp?: boolean;
  error2?: boolean;
  resend?: (event: any) => void;
  _delete?: (event: any) => void;
  credit?: (event: any) => void;
  copy?: (event: any) => void;
  like?: (event: any) => void;
  unLike?: (event: any) => void;
  feedbackData?: any;
  posttime?: any;
  showtime?: boolean;
  onShowtimeChange?: (val: string) => void;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  pazireshAnswer?: SingleBooleanChoiceArg<"pazireshAnswer">;
  liomAnswer?: SingleBooleanChoiceArg<"liomAnswer">;
  loadingMessage?: SingleBooleanChoiceArg<"loadingMessage">;
  endMessege?: SingleBooleanChoiceArg<"endMessege">;
  hint?: SingleBooleanChoiceArg<"hint">;
  bot?: SingleBooleanChoiceArg<"bot">;
  owner?: SingleBooleanChoiceArg<"owner">;
  feedback?: SingleBooleanChoiceArg<"feedback">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMessage__RenderFunc(props: {
  variants: PlasmicMessage__VariantsArgs;
  args: PlasmicMessage__ArgsType;
  overrides: PlasmicMessage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          inApp: false,
          error2: false
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pazireshAnswer",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.pazireshAnswer
      },
      {
        path: "liomAnswer",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.liomAnswer
      },
      {
        path: "loadingMessage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.loadingMessage
      },
      {
        path: "endMessege",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.endMessege
      },
      {
        path: "hint",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hint
      },
      {
        path: "bot",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bot
      },
      {
        path: "owner",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.owner
      },
      {
        path: "feedback",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.feedback
      },
      {
        path: "showtime",
        type: "writable",
        variableType: "boolean",

        valueProp: "showtime",
        onChangeProp: "onShowtimeChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [sty.rootbot]: hasVariant($state, "bot", "bot"),
          [sty.rootbot_endMessege]:
            hasVariant($state, "bot", "bot") &&
            hasVariant($state, "endMessege", "endMessege"),
          [sty.rootbot_liomAnswer]:
            hasVariant($state, "bot", "bot") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootendMessege]: hasVariant($state, "endMessege", "endMessege"),
          [sty.rootendMessege_hint]:
            hasVariant($state, "hint", "hint") &&
            hasVariant($state, "endMessege", "endMessege"),
          [sty.rootendMessege_liomAnswer]:
            hasVariant($state, "endMessege", "endMessege") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootendMessege_loadingMessage]:
            hasVariant($state, "endMessege", "endMessege") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.rootfeedback]: hasVariant($state, "feedback", "feedback"),
          [sty.rootfeedback_owner]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "owner", "owner"),
          [sty.rootfeedback_pazireshAnswer]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
          [sty.rootfeedback_pazireshAnswer_liomAnswer]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootfeedback_pazireshAnswer_loadingMessage_liomAnswer]:
            hasVariant($state, "feedback", "feedback") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.roothint]: hasVariant($state, "hint", "hint"),
          [sty.rootliomAnswer]: hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootliomAnswer_hint]:
            hasVariant($state, "hint", "hint") &&
            hasVariant($state, "liomAnswer", "liomAnswer"),
          [sty.rootloadingMessage]: hasVariant(
            $state,
            "loadingMessage",
            "loadingMessage"
          ),
          [sty.rootloadingMessage_liomAnswer]:
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "loadingMessage", "loadingMessage"),
          [sty.rootowner]: hasVariant($state, "owner", "owner"),
          [sty.rootpazireshAnswer]: hasVariant(
            $state,
            "pazireshAnswer",
            "pazireshAnswer"
          ),
          [sty.rootpazireshAnswer_endMessege]:
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "endMessege", "endMessege"),
          [sty.rootpazireshAnswer_liomAnswer]:
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
          [sty.rootpazireshAnswer_loadingMessage_liomAnswer]:
            hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
            hasVariant($state, "liomAnswer", "liomAnswer") &&
            hasVariant($state, "loadingMessage", "loadingMessage")
        }
      )}
    >
      {(
        hasVariant($state, "loadingMessage", "loadingMessage")
          ? true
          : hasVariant($state, "liomAnswer", "liomAnswer")
          ? (() => {
              try {
                return $state.showtime;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : hasVariant($state, "pazireshAnswer", "pazireshAnswer")
          ? true
          : (() => {
              try {
                return $state.showtime;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__jitew, {
            [sty.freeBoxendMessege__jitewTPagI]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxliomAnswer__jiteweKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxloadingMessage__jitew4FR]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxloadingMessage_liomAnswer__jitew4FREKcc5]:
              hasVariant($state, "liomAnswer", "liomAnswer") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxpazireshAnswer__jitewKKt1C]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            ),
            [sty.freeBoxpazireshAnswer_loadingMessage__jitewKKt1C4FR]:
              hasVariant($state, "loadingMessage", "loadingMessage") &&
              hasVariant($state, "pazireshAnswer", "pazireshAnswer")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__gkpC5, {
              [sty.freeBoxliomAnswer__gkpC5EKcc5]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              )
            })}
          >
            <UploudeTime
              chat={true}
              className={classNames("__wab_instance", sty.uploudeTime__mJhR, {
                [sty.uploudeTimeliomAnswer__mJhReKcc5]: hasVariant(
                  $state,
                  "liomAnswer",
                  "liomAnswer"
                )
              })}
              posttime={args.posttime}
            />
          </div>
        </div>
      ) : null}
      <div
        className={classNames(
          projectcss.all,
          sty.freeBox__dVvnR,
          hasVariant($state, "endMessege", "endMessege")
            ? "text-box"
            : hasVariant($state, "liomAnswer", "liomAnswer")
            ? ``
            : hasVariant($state, "pazireshAnswer", "pazireshAnswer")
            ? ``
            : "text-box",
          {
            [sty.freeBoxbot__dVvnRKjuO6]: hasVariant($state, "bot", "bot"),
            [sty.freeBoxbot_endMessege__dVvnRKjuO6TPagI]:
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxbot_liomAnswer__dVvnRKjuO6EKcc5]:
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxendMessege__dVvnRtPagI]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxendMessege_hint__dVvnRtPagIS47Yy]:
              hasVariant($state, "hint", "hint") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxendMessege_loadingMessage__dVvnRtPagI4FR]:
              hasVariant($state, "loadingMessage", "loadingMessage") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxfeedback__dVvnR2OMMr]: hasVariant(
              $state,
              "feedback",
              "feedback"
            ),
            [sty.freeBoxhint__dVvnRs47Yy]: hasVariant($state, "hint", "hint"),
            [sty.freeBoxliomAnswer__dVvnReKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxliomAnswer_hint__dVvnReKcc5S47Yy]:
              hasVariant($state, "hint", "hint") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxloadingMessage__dVvnR4FR]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxloadingMessage_liomAnswer__dVvnR4FREKcc5]:
              hasVariant($state, "liomAnswer", "liomAnswer") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxowner__dVvnR4BE35]: hasVariant(
              $state,
              "owner",
              "owner"
            ),
            [sty.freeBoxowner_liomAnswer__dVvnR4BE35EKcc5]:
              hasVariant($state, "owner", "owner") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxpazireshAnswer__dVvnRkKt1C]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            ),
            [sty.freeBoxpazireshAnswer_liomAnswer__dVvnRkKt1CEKcc5]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "liomAnswer", "liomAnswer")
          }
        )}
        style={
          hasVariant($state, "endMessege", "endMessege")
            ? {
                display: "inline-block",
                width: "auto",
                height: "auto",
                "overflow-wrap": " break-word",
                transition: "all 0.3s ease"
              }
            : {
                display: "flex",
                width: "auto",
                height: "auto",
                "overflow-wrap": " break-word"
              }
        }
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6Lcwn, {
            [sty.freeBoxliomAnswer___6LcwneKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            )
          })}
        >
          <UploudeTime
            className={classNames("__wab_instance", sty.uploudeTime___7Qg8T, {
              [sty.uploudeTimeliomAnswer___7Qg8TeKcc5]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              )
            })}
            posttime={args.posttime}
          />

          <Icon8Icon
            className={classNames(projectcss.all, sty.svg__sakBv, {
              [sty.svgliomAnswer__sakBveKcc5]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.svgowner__sakBv4BE35]: hasVariant($state, "owner", "owner"),
              [sty.svgowner_liomAnswer__sakBv4BE35EKcc5]:
                hasVariant($state, "owner", "owner") &&
                hasVariant($state, "liomAnswer", "liomAnswer"),
              [sty.svgowner_pazireshAnswer__sakBv4BE35KKt1C]:
                hasVariant($state, "owner", "owner") &&
                hasVariant($state, "pazireshAnswer", "pazireshAnswer"),
              [sty.svgowner_pazireshAnswer_liomAnswer__sakBv4BE35KKt1CEKcc5]:
                hasVariant($state, "owner", "owner") &&
                hasVariant($state, "liomAnswer", "liomAnswer") &&
                hasVariant($state, "pazireshAnswer", "pazireshAnswer")
            })}
            role={"img"}
          />
        </Stack__>
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox__ekchi,
            "text-box",
            {
              [sty.freeBoxendMessege__ekchitPagI]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.freeBoxfeedback__ekchi2OMMr]: hasVariant(
                $state,
                "feedback",
                "feedback"
              ),
              [sty.freeBoxfeedback_owner__ekchi2OMMr4BE35]:
                hasVariant($state, "owner", "owner") &&
                hasVariant($state, "feedback", "feedback"),
              [sty.freeBoxhint__ekchIs47Yy]: hasVariant($state, "hint", "hint"),
              [sty.freeBoxliomAnswer__ekchIeKcc5]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.freeBoxloadingMessage__ekchi4FR]: hasVariant(
                $state,
                "loadingMessage",
                "loadingMessage"
              ),
              [sty.freeBoxowner__ekchi4BE35]: hasVariant(
                $state,
                "owner",
                "owner"
              ),
              [sty.freeBoxpazireshAnswer__ekchikKt1C]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              )
            }
          )}
          style={{
            display: "inline-block",
            width: "auto",
            height: "auto",
            "overflow-wrap": " break-word"
          }}
        >
          {renderPlasmicSlot({
            defaultContents: "             ",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildrenbot]: hasVariant($state, "bot", "bot"),
              [sty.slotTargetChildrenendMessege]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.slotTargetChildrenendMessege_hint]:
                hasVariant($state, "hint", "hint") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.slotTargetChildrenendMessege_loadingMessage]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "loadingMessage", "loadingMessage"),
              [sty.slotTargetChildrenfeedback]: hasVariant(
                $state,
                "feedback",
                "feedback"
              ),
              [sty.slotTargetChildrenhint]: hasVariant($state, "hint", "hint"),
              [sty.slotTargetChildrenliomAnswer]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.slotTargetChildrenloadingMessage]: hasVariant(
                $state,
                "loadingMessage",
                "loadingMessage"
              ),
              [sty.slotTargetChildrenowner]: hasVariant(
                $state,
                "owner",
                "owner"
              ),
              [sty.slotTargetChildrenpazireshAnswer]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              ),
              [sty.slotTargetChildrenpazireshAnswer_endMessege]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.slotTargetChildrenpazireshAnswer_endMessege_loadingMessage]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "loadingMessage", "loadingMessage") &&
                hasVariant($state, "endMessege", "endMessege"),
              [sty.slotTargetChildrenpazireshAnswer_loadingMessage]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "loadingMessage", "loadingMessage")
            })
          })}
          <LoadingCompopnentGray
            data-plasmic-name={"loadingCompopnentGray"}
            data-plasmic-override={overrides.loadingCompopnentGray}
            className={classNames("__wab_instance", sty.loadingCompopnentGray, {
              [sty.loadingCompopnentGrayendMessege]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.loadingCompopnentGrayendMessege_liomAnswer]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "liomAnswer", "liomAnswer"),
              [sty.loadingCompopnentGrayendMessege_loadingMessage]:
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "loadingMessage", "loadingMessage"),
              [sty.loadingCompopnentGrayendMessege_loadingMessage_liomAnswer]:
                hasVariant($state, "loadingMessage", "loadingMessage") &&
                hasVariant($state, "endMessege", "endMessege") &&
                hasVariant($state, "liomAnswer", "liomAnswer"),
              [sty.loadingCompopnentGrayloadingMessage]: hasVariant(
                $state,
                "loadingMessage",
                "loadingMessage"
              )
            })}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__cUYso, {
            [sty.freeBoxendMessege__cUYsoTPagI]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxhint__cUYsos47Yy]: hasVariant($state, "hint", "hint"),
            [sty.freeBoxliomAnswer__cUYsoeKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxliomAnswer_hint__cUYsoeKcc5S47Yy]:
              hasVariant($state, "hint", "hint") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxloadingMessage__cUYso4FR]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxpazireshAnswer__cUYsoKKt1C]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            ),
            [sty.freeBoxpazireshAnswer_liomAnswer__cUYsoKKt1CEKcc5]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "liomAnswer", "liomAnswer")
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <Icon119Icon
                className={classNames(projectcss.all, sty.svg__bCgEl)}
                role={"img"}
              />
            ),

            value: args.slot
          })}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___1BKu, {
            [sty.freeBoxendMessege___1BKuTPagI]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxfeedback___1BKu2OMMr]: hasVariant(
              $state,
              "feedback",
              "feedback"
            ),
            [sty.freeBoxliomAnswer___1BKuEKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            ),
            [sty.freeBoxloadingMessage___1BKu4FR]: hasVariant(
              $state,
              "loadingMessage",
              "loadingMessage"
            ),
            [sty.freeBoxloadingMessage_liomAnswer___1BKu4FREKcc5]:
              hasVariant($state, "liomAnswer", "liomAnswer") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxpazireshAnswer___1BKuKKt1C]: hasVariant(
              $state,
              "pazireshAnswer",
              "pazireshAnswer"
            ),
            [sty.freeBoxpazireshAnswer_loadingMessage___1BKuKKt1C4FR]:
              hasVariant($state, "loadingMessage", "loadingMessage") &&
              hasVariant($state, "pazireshAnswer", "pazireshAnswer")
          })}
        >
          <svg
            className={classNames(projectcss.all, sty.svg__sskqd)}
            role={"img"}
          />

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Enter some text"}
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__y39Wt, {
            [sty.freeBoxfeedback__y39Wt2OMMr]: hasVariant(
              $state,
              "feedback",
              "feedback"
            ),
            [sty.freeBoxfeedback_bot__y39Wt2OMMrKjuO6]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "bot", "bot"),
            [sty.freeBoxfeedback_bot_hint__y39Wt2OMMrKjuO6S47Yy]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "bot", "bot") &&
              hasVariant($state, "hint", "hint"),
            [sty.freeBoxfeedback_endMessege__y39Wt2OMMrTPagI]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "endMessege", "endMessege"),
            [sty.freeBoxfeedback_hint__y39Wt2OMMrS47Yy]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "hint", "hint"),
            [sty.freeBoxfeedback_liomAnswer__y39Wt2OMMrEKcc5]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxfeedback_loadingMessage__y39Wt2OMMr4FR]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "loadingMessage", "loadingMessage"),
            [sty.freeBoxfeedback_owner__y39Wt2OMMr4BE35]:
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "owner", "owner"),
            [sty.freeBoxfeedback_pazireshAnswer__y39Wt2OMMrKKt1C]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "feedback", "feedback"),
            [sty.freeBoxfeedback_pazireshAnswer_liomAnswer__y39Wt2OMMrKKt1CEKcc5]:
              hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
              hasVariant($state, "feedback", "feedback") &&
              hasVariant($state, "liomAnswer", "liomAnswer"),
            [sty.freeBoxliomAnswer__y39WTeKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            )
          })}
        >
          <UnLike
            data-plasmic-name={"unLike"}
            data-plasmic-override={overrides.unLike}
            className={classNames("__wab_instance", sty.unLike, {
              [sty.unLikefeedback]: hasVariant($state, "feedback", "feedback")
            })}
            feedbackData={
              hasVariant($state, "feedback", "feedback")
                ? (() => {
                    try {
                      return $props.feedbackData;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            onClick={args.unLike}
            warning={
              hasVariant($state, "feedback", "feedback") ? true : undefined
            }
          />

          <Like2
            data-plasmic-name={"like2"}
            data-plasmic-override={overrides.like2}
            className={classNames("__wab_instance", sty.like2, {
              [sty.like2feedback]: hasVariant($state, "feedback", "feedback"),
              [sty.like2feedback_pazireshAnswer]:
                hasVariant($state, "pazireshAnswer", "pazireshAnswer") &&
                hasVariant($state, "feedback", "feedback")
            })}
            feedbackData={
              hasVariant($state, "feedback", "feedback")
                ? (() => {
                    try {
                      return $props.feedbackData;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            onClick={args.like}
            warning={
              hasVariant($state, "feedback", "feedback") ? true : undefined
            }
          />

          <Icon200Icon
            className={classNames(projectcss.all, sty.svg___22Lu2, {
              [sty.svgfeedback___22Lu22OMMr]: hasVariant(
                $state,
                "feedback",
                "feedback"
              )
            })}
            onClick={args.copy}
            role={"img"}
          />
        </Stack__>
      </div>
      {(() => {
        try {
          return $props.inApp;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__nBfQ, {
            [sty.freeBoxendMessege__nBfQtPagI]: hasVariant(
              $state,
              "endMessege",
              "endMessege"
            ),
            [sty.freeBoxliomAnswer__nBfQeKcc5]: hasVariant(
              $state,
              "liomAnswer",
              "liomAnswer"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgendMessege]: hasVariant(
                $state,
                "endMessege",
                "endMessege"
              ),
              [sty.imgliomAnswer]: hasVariant(
                $state,
                "liomAnswer",
                "liomAnswer"
              ),
              [sty.imgpazireshAnswer]: hasVariant(
                $state,
                "pazireshAnswer",
                "pazireshAnswer"
              )
            })}
            displayHeight={"30px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"30px"}
            height={
              hasVariant($state, "endMessege", "endMessege") ? "30" : undefined
            }
            loading={"lazy"}
            src={
              hasVariant($state, "endMessege", "endMessege")
                ? (() => {
                    try {
                      return "https://apps.liom.app/plasmic/liom_hamyar/images/image35.png";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : undefined
            }
            width={
              hasVariant($state, "endMessege", "endMessege") ? "30" : undefined
            }
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "loadingCompopnentGray", "text", "unLike", "like2", "img"],
  loadingCompopnentGray: ["loadingCompopnentGray"],
  text: ["text"],
  unLike: ["unLike"],
  like2: ["like2"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  loadingCompopnentGray: typeof LoadingCompopnentGray;
  text: "div";
  unLike: typeof UnLike;
  like2: typeof Like2;
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMessage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMessage__VariantsArgs;
    args?: PlasmicMessage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMessage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMessage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMessage__ArgProps,
          internalVariantPropNames: PlasmicMessage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMessage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMessage";
  } else {
    func.displayName = `PlasmicMessage.${nodeName}`;
  }
  return func;
}

export const PlasmicMessage = Object.assign(
  // Top-level PlasmicMessage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loadingCompopnentGray: makeNodeComponent("loadingCompopnentGray"),
    text: makeNodeComponent("text"),
    unLike: makeNodeComponent("unLike"),
    like2: makeNodeComponent("like2"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicMessage
    internalVariantProps: PlasmicMessage__VariantProps,
    internalArgProps: PlasmicMessage__ArgProps
  }
);

export default PlasmicMessage;
/* prettier-ignore-end */
