/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: MPQbn3WJ9nnV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoButton from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import Like from "../../Like"; // plasmic-import: tXJMudG_KgDC/component
import { LottieWrapper } from "@plasmicpkgs/lottie-react";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/styleTokensProvider
import { _useStyleTokens as useStyleTokens_meto_deign_system } from ""; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicPost.module.css"; // plasmic-import: MPQbn3WJ9nnV/css

import CircleIcon from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: FRb_xRn_jsVb/icon
import ChevronDownIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: -Krn7G6yGJ24/icon

createPlasmicElementProxy;

export type PlasmicPost__VariantMembers = {
  profile: "profile";
};
export type PlasmicPost__VariantsArgs = {
  profile?: SingleBooleanChoiceArg<"profile">;
};
type VariantPropType = keyof PlasmicPost__VariantsArgs;
export const PlasmicPost__VariantProps = new Array<VariantPropType>("profile");

export type PlasmicPost__ArgsType = {
  children?: React.ReactNode;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  image?: string;
  onImageChange?: (val: string) => void;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicPost__ArgsType;
export const PlasmicPost__ArgProps = new Array<ArgPropType>(
  "children",
  "load",
  "onLoadChange",
  "image",
  "onImageChange",
  "onClick"
);

export type PlasmicPost__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  lottie?: Flex__<typeof LottieWrapper>;
};

export interface DefaultPostProps {
  children?: React.ReactNode;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  image?: string;
  onImageChange?: (val: string) => void;
  onClick?: (event: any) => void;
  profile?: SingleBooleanChoiceArg<"profile">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPost__RenderFunc(props: {
  variants: PlasmicPost__VariantsArgs;
  args: PlasmicPost__ArgsType;
  overrides: PlasmicPost__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "load",
        type: "writable",
        variableType: "boolean",

        valueProp: "load",
        onChangeProp: "onLoadChange"
      },
      {
        path: "image",
        type: "writable",
        variableType: "text",

        valueProp: "image",
        onChangeProp: "onImageChange"
      },
      {
        path: "profile",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.profile
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_meto_deign_system =
    useStyleTokens_meto_deign_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_meto_deign_system,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        { [sty.rootprofile]: hasVariant($state, "profile", "profile") }
      )}
      style={(() => {
        try {
          return { overflow: "hidden" };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img, {
          [sty.imgprofile]: hasVariant($state, "profile", "profile")
        })}
        displayHeight={"50vh"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"100%"}
        loading={"eager"}
        onClick={async event => {
          const $steps = {};
        }}
        src={(() => {
          try {
            return (() => {
              if (!/\.[^/.]+$/.test($state.image)) {
                return ($state.image += ".jpg");
              } else {
                return $state.image;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__bgg0E, {
          [sty.freeBoxprofile__bgg0EwPqum]: hasVariant(
            $state,
            "profile",
            "profile"
          )
        })}
        onClick={async event => {
          const $steps = {};

          $steps["runOnClick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnClick"] != null &&
            typeof $steps["runOnClick"] === "object" &&
            typeof $steps["runOnClick"].then === "function"
          ) {
            $steps["runOnClick"] = await $steps["runOnClick"];
          }
        }}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div className={classNames(projectcss.all, sty.freeBox__an3Er)}>
                <div className={classNames(projectcss.all, sty.freeBox__q6Ge)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bdban)}
                  >
                    <MetoLabel
                      className={classNames(
                        "__wab_instance",
                        sty.metoLabel__tFtoh
                      )}
                      size={"lg"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__huIzb
                        )}
                      >
                        {"Label"}
                      </div>
                    </MetoLabel>
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__eaSpv)}
                      displayHeight={"1.5rem"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"1.5rem"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/metoo/images/tikGSvg.svg",
                        fullWidth: 307.09,
                        fullHeight: 306.78,
                        aspectRatio: 1.00101
                      }}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rfgXx
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xOio1)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___14H8Q
                    )}
                  >
                    {"\u0622\u0646\u0644\u0627\u06cc\u0646"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__vRmAb)}>
                <MetoButton
                  className={classNames(
                    "__wab_instance",
                    sty.metoButton__yqJaz
                  )}
                  color={"neutral"}
                  flatSide={[]}
                  label={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__afPCu)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__b1Rc1)}
                        role={"img"}
                      />
                    </div>
                  }
                  roundedFull={true}
                  size={"large"}
                />

                <MetoButton
                  className={classNames(
                    "__wab_instance",
                    sty.metoButton__jInI3
                  )}
                  color={"neutral"}
                  flatSide={[]}
                  label={
                    <div
                      className={classNames(projectcss.all, sty.freeBox___4SUy)}
                    >
                      <Like
                        className={classNames(
                          "__wab_instance",
                          sty.like__auXkd
                        )}
                      />
                    </div>
                  }
                  roundedFull={true}
                  size={"large"}
                />

                <MetoButton
                  className={classNames(
                    "__wab_instance",
                    sty.metoButton__t6Hnp
                  )}
                  color={"neutral"}
                  flatSide={[]}
                  label={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__n2PeM)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__o3Nt1)}
                        role={"img"}
                      />
                    </div>
                  }
                  roundedFull={true}
                  size={"large"}
                />
              </div>
            </React.Fragment>
          ),
          value: args.children
        })}
      </div>
      {(() => {
        try {
          return $state.load;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__oXc0B)}>
          <LottieWrapper
            data-plasmic-name={"lottie"}
            data-plasmic-override={overrides.lottie}
            animationData={{
              v: "4.6.9",
              fr: 29.9700012207031,
              ip: 0,
              op: 210.000008553475,
              w: 800,
              h: 600,
              nm: "Loader",
              ddd: 0,
              assets: [
                {
                  id: "comp_4",
                  layers: [
                    {
                      ddd: 0,
                      ind: 1,
                      ty: 4,
                      nm: "Shape Layer 1",
                      ks: {
                        o: { a: 0, k: 100 },
                        r: { a: 0, k: 0 },
                        p: { a: 0, k: [400, 300, 0] },
                        a: { a: 0, k: [0, 0, 0] },
                        s: { a: 0, k: [100, 100, 100] }
                      },
                      ao: 0,
                      shapes: [
                        {
                          ty: "gr",
                          it: [
                            {
                              ind: 0,
                              ty: "sh",
                              ix: 1,
                              ks: {
                                a: 0,
                                k: {
                                  i: [
                                    [-6.667, 0],
                                    [0, 46.333],
                                    [20.25, 0],
                                    [0, -10.333],
                                    [-4.167, 0],
                                    [0, 8.333],
                                    [18.833, 0],
                                    [0, -20.167]
                                  ],
                                  o: [
                                    [6.667, 0],
                                    [0, -20.833],
                                    [-19.5, 0],
                                    [0, 8.333],
                                    [4.167, 0],
                                    [0, -10.5],
                                    [-18.833, 0],
                                    [0, 47.333]
                                  ],
                                  v: [
                                    [-0.083, 50],
                                    [58.083, -15.5],
                                    [25.083, -50],
                                    [-7.917, -17.833],
                                    [0.083, -6.167],
                                    [8.083, -17.833],
                                    [-25.083, -50],
                                    [-58.083, -16.333]
                                  ],
                                  c: true
                                }
                              },
                              nm: "Path 1",
                              mn: "ADBE Vector Shape - Group"
                            },
                            {
                              ty: "tm",
                              s: {
                                a: 1,
                                k: [
                                  {
                                    i: { x: [0.197], y: [1] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p197_1_0p167_0p167"],
                                    t: 150,
                                    s: [0],
                                    e: [100]
                                  },
                                  { t: 209.000008512745 }
                                ],
                                ix: 1
                              },
                              e: {
                                a: 1,
                                k: [
                                  {
                                    i: { x: [0.833], y: [0.833] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p833_0p833_0p167_0p167"],
                                    t: 20,
                                    s: [0],
                                    e: [58]
                                  },
                                  {
                                    i: { x: [0.833], y: [0.833] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p833_0p833_0p167_0p167"],
                                    t: 30,
                                    s: [58],
                                    e: [58]
                                  },
                                  {
                                    i: { x: [0], y: [1] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0_1_0p167_0p167"],
                                    t: 100,
                                    s: [58],
                                    e: [100]
                                  },
                                  { t: 120.0000048877 }
                                ],
                                ix: 2
                              },
                              o: {
                                a: 1,
                                k: [
                                  {
                                    i: { x: [0.667], y: [1] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p667_1_0p167_0p167"],
                                    t: 25,
                                    s: [0],
                                    e: [540]
                                  },
                                  {
                                    i: { x: [0.833], y: [0.833] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p833_0p833_0p167_0p167"],
                                    t: 45,
                                    s: [540],
                                    e: [630]
                                  },
                                  {
                                    i: { x: [0.667], y: [1] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p667_1_0p167_0p167"],
                                    t: 50,
                                    s: [630],
                                    e: [1170]
                                  },
                                  {
                                    i: { x: [0.833], y: [0.833] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p833_0p833_0p167_0p167"],
                                    t: 70,
                                    s: [1170],
                                    e: [1260]
                                  },
                                  {
                                    i: { x: [0.667], y: [1] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p667_1_0p167_0p167"],
                                    t: 75,
                                    s: [1260],
                                    e: [1800]
                                  },
                                  {
                                    i: { x: [0.377], y: [1] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p377_1_0p167_0p167"],
                                    t: 95,
                                    s: [1800],
                                    e: [1960]
                                  },
                                  {
                                    i: { x: [0.833], y: [0.833] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p833_0p833_0p167_0p167"],
                                    t: 120,
                                    s: [1960],
                                    e: [2160]
                                  },
                                  { t: 150.000006109625 }
                                ],
                                ix: 3
                              },
                              m: 1,
                              ix: 2,
                              nm: "Trim Paths 1",
                              mn: "ADBE Vector Filter - Trim"
                            },
                            {
                              ty: "st",
                              c: { a: 0, k: [0.251, 0.325, 0.502, 1] },
                              o: { a: 0, k: 100 },
                              w: { a: 0, k: 12 },
                              lc: 1,
                              lj: 2,
                              nm: "Stroke 1",
                              mn: "ADBE Vector Graphic - Stroke"
                            },
                            {
                              ty: "tr",
                              p: { a: 0, k: [0, 0], ix: 2 },
                              a: { a: 0, k: [0, 0], ix: 1 },
                              s: { a: 0, k: [100, 100], ix: 3 },
                              r: { a: 0, k: 0, ix: 6 },
                              o: {
                                a: 1,
                                k: [
                                  {
                                    i: { x: [0.833], y: [0.833] },
                                    o: { x: [0.167], y: [0.167] },
                                    n: ["0p833_0p833_0p167_0p167"],
                                    t: 150,
                                    s: [100],
                                    e: [0]
                                  },
                                  { t: 200.000008146167 }
                                ],
                                ix: 7
                              },
                              sk: { a: 0, k: 0, ix: 4 },
                              sa: { a: 0, k: 0, ix: 5 },
                              nm: "Transform"
                            }
                          ],
                          nm: "Shape 1",
                          np: 4,
                          cix: 2,
                          ix: 1,
                          mn: "ADBE Vector Group"
                        }
                      ],
                      ip: 0,
                      op: 300.00001221925,
                      st: 0,
                      bm: 0,
                      sr: 1
                    }
                  ]
                }
              ],
              layers: [
                {
                  ddd: 0,
                  ind: 1,
                  ty: 0,
                  nm: "Comp 1",
                  refId: "comp_4",
                  ks: {
                    o: { a: 0, k: 100 },
                    r: { a: 0, k: 0 },
                    p: { a: 0, k: [400, 300, 0] },
                    a: { a: 0, k: [400, 300, 0] },
                    s: { a: 0, k: [100, 100, 100] }
                  },
                  ao: 0,
                  w: 800,
                  h: 600,
                  ip: 0,
                  op: 300.00001221925,
                  st: 0,
                  bm: 0,
                  sr: 1
                }
              ]
            }}
            className={classNames("__wab_instance", sty.lottie)}
            preview={true}
          />
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "lottie"],
  img: ["img"],
  lottie: ["lottie"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  lottie: typeof LottieWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPost__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPost__VariantsArgs;
    args?: PlasmicPost__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPost__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPost__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPost__ArgProps,
          internalVariantPropNames: PlasmicPost__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPost";
  } else {
    func.displayName = `PlasmicPost.${nodeName}`;
  }
  return func;
}

export const PlasmicPost = Object.assign(
  // Top-level PlasmicPost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    lottie: makeNodeComponent("lottie"),

    // Metadata about props expected for PlasmicPost
    internalVariantProps: PlasmicPost__VariantProps,
    internalArgProps: PlasmicPost__ArgProps
  }
);

export default PlasmicPost;
/* prettier-ignore-end */
