/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: f10SwOFmn0uO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ChatProfile from "../../ChatProfile"; // plasmic-import: nGhx_iZ2h_Jn/component
import HeaderItem from "../../HeaderItem"; // plasmic-import: TkXLJDEhkWy5/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: mSKar170aYTo/codeComponent

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicChat.module.css"; // plasmic-import: f10SwOFmn0uO/css

createPlasmicElementProxy;

export type PlasmicChat__VariantMembers = {};
export type PlasmicChat__VariantsArgs = {};
type VariantPropType = keyof PlasmicChat__VariantsArgs;
export const PlasmicChat__VariantProps = new Array<VariantPropType>();

export type PlasmicChat__ArgsType = {
  token?: string;
  currentuser?: any;
  onCurrentuserChange?: (val: string) => void;
  chatOpen?: () => void;
  profileOpen?: () => void;
};
type ArgPropType = keyof PlasmicChat__ArgsType;
export const PlasmicChat__ArgProps = new Array<ArgPropType>(
  "token",
  "currentuser",
  "onCurrentuserChange",
  "chatOpen",
  "profileOpen"
);

export type PlasmicChat__OverridesType = {
  root?: Flex__<"div">;
  chatProfile?: Flex__<typeof ChatProfile>;
  section?: Flex__<"section">;
  headerItem?: Flex__<typeof HeaderItem>;
  suggstionUser?: Flex__<typeof ApiRequest>;
  getSession?: Flex__<typeof ApiRequest>;
};

export interface DefaultChatProps {
  token?: string;
  currentuser?: any;
  onCurrentuserChange?: (val: string) => void;
  chatOpen?: () => void;
  profileOpen?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChat__RenderFunc(props: {
  variants: PlasmicChat__VariantsArgs;
  args: PlasmicChat__ArgsType;
  overrides: PlasmicChat__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          token:
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpZCI6IjEyNjg1MzMiLCJleHBpcmUiOjE3NTI1Njc3Mjd9.gfYr_i2s7WPRRXAOY10kp25hRWrtuchU2vxVrTEzHdN_ixVpPVW0jSP5M4hm7hu3FjiRhGaV-C4nALAs4BPL7g"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "suggstionUser.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggstionUser.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "suggstionUser.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSession.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSession.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "getSession.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "chats",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "header",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "isLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasChat",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "hasHeader",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "pageChat",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "pageHeader",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "chatProfile[].load",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "isLoading2",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentuser",
        type: "writable",
        variableType: "object",

        valueProp: "currentuser",
        onChangeProp: "onCurrentuserChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1(),
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          )
        }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          sty.freeBox__ehHb1,
          "your-scroll-box"
        )}
        onScroll={async event => {
          const $steps = {};

          $steps["runCode"] =
            $state.hasChat && $state.isLoading == false
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        var scrollTop = event.currentTarget.scrollTop;
                        var chats = event.currentTarget;
                        window.chats = chats;
                        if (
                          scrollTop + chats.clientHeight >=
                          chats.scrollHeight - 10
                        ) {
                          chats.style.overflow = "hidden";
                          $state.pageChat++;
                          return ($state.isLoading = true);
                        }
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
          if (
            $steps["runCode"] != null &&
            typeof $steps["runCode"] === "object" &&
            typeof $steps["runCode"].then === "function"
          ) {
            $steps["runCode"] = await $steps["runCode"];
          }
        }}
        style={(() => {
          try {
            return {
              "overflow-y": "auto",
              "scroll-behavior": "smooth"
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.chats;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.chatProfile),
              currentItem: (() => {
                try {
                  return currentItem;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              key: currentIndex,
              load: generateStateValueProp($state, [
                "chatProfile",
                __plasmic_idx_0,
                "load"
              ]),
              onClick: async event => {
                const $steps = {};

                $steps["updateCurrentuser"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["currentuser"]
                        },
                        operation: 0,
                        value: currentItem.user
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateCurrentuser"] != null &&
                  typeof $steps["updateCurrentuser"] === "object" &&
                  typeof $steps["updateCurrentuser"].then === "function"
                ) {
                  $steps["updateCurrentuser"] = await $steps[
                    "updateCurrentuser"
                  ];
                }

                $steps["runChatOpen"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["chatOpen"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runChatOpen"] != null &&
                  typeof $steps["runChatOpen"] === "object" &&
                  typeof $steps["runChatOpen"].then === "function"
                ) {
                  $steps["runChatOpen"] = await $steps["runChatOpen"];
                }
              },
              onLoadChange: async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "chatProfile",
                  __plasmic_idx_0,
                  "load"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }
            };

            initializePlasmicStates(
              $state,
              [
                {
                  name: "chatProfile[].load",
                  initFunc: ({ $props, $state, $queries }) =>
                    (() => {
                      try {
                        return $state.getSession.loading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
                }
              ],
              [__plasmic_idx_0]
            );
            return (
              <ChatProfile
                data-plasmic-name={"chatProfile"}
                data-plasmic-override={overrides.chatProfile}
                {...child$Props}
              />
            );
          })();
        })}
      </div>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <div
          className={classNames(
            projectcss.all,
            sty.freeBox__zeizg,
            "your-scroll-box"
          )}
          onScroll={async event => {
            const $steps = {};

            $steps["runCode"] =
              $state.hasHeader && !$state.isLoading2
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          const container = event.currentTarget;
                          window.headers = container;
                          const distanceFromLeft = container.scrollLeft;
                          const visibleWidth = container.clientWidth;
                          const totalScrollableWidth = container.scrollWidth;
                          console.log(
                            "\uD83D\uDCCD فاصله از چپ:",
                            distanceFromLeft
                          );
                          console.log(
                            "\uD83D\uDC41️ عرض قابل مشاهده:",
                            visibleWidth
                          );
                          console.log(
                            "\uD83D\uDCE6 عرض کل محتوا:",
                            totalScrollableWidth
                          );
                          var distanceFromRight =
                            totalScrollableWidth +
                            distanceFromLeft -
                            visibleWidth;
                          console.log(
                            "\uD83D\uDCE6 راست کل محتوا:",
                            distanceFromRight
                          );
                          if (distanceFromRight < 10) {
                            console.log(
                              "\u2705 رسیدیم به انتهای راست\u060C لود شروع شد"
                            );
                            container.style.overflow = "hidden";
                            $state.pageHeader++;
                            return ($state.isLoading2 = true);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
          style={(() => {
            try {
              return {
                "overflow-x": "auto",
                "scroll-behavior": "smooth"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $state.header;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <HeaderItem
                data-plasmic-name={"headerItem"}
                data-plasmic-override={overrides.headerItem}
                className={classNames("__wab_instance", sty.headerItem)}
                currentItem={currentItem}
                key={currentIndex}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateCurrentuser"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["currentuser"]
                          },
                          operation: 0,
                          value: currentItem
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateCurrentuser"] != null &&
                    typeof $steps["updateCurrentuser"] === "object" &&
                    typeof $steps["updateCurrentuser"].then === "function"
                  ) {
                    $steps["updateCurrentuser"] = await $steps[
                      "updateCurrentuser"
                    ];
                  }

                  $steps["runProfileOpen"] = true
                    ? (() => {
                        const actionArgs = { eventRef: $props["profileOpen"] };
                        return (({ eventRef, args }) => {
                          return eventRef?.(...(args ?? []));
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runProfileOpen"] != null &&
                    typeof $steps["runProfileOpen"] === "object" &&
                    typeof $steps["runProfileOpen"].then === "function"
                  ) {
                    $steps["runProfileOpen"] = await $steps["runProfileOpen"];
                  }
                }}
              />
            );
          })}
        </div>
        {(() => {
          try {
            return $state.suggstionUser.loading;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              sty.freeBox__o3MKa,
              "shimmer"
            )}
          />
        ) : null}
      </section>
      <ApiRequest
        data-plasmic-name={"suggstionUser"}
        data-plasmic-override={overrides.suggstionUser}
        body={(() => {
          try {
            return { type: "header", page: $state.pageHeader };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.suggstionUser)}
        config={(() => {
          try {
            return {
              headers: {
                appid: "your-app-id",
                Authorization: $props.token,
                "Content-Type": "application/json",
                Version: "1.0"
              }
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                headers: {
                  appid: "your-app-id",
                  Authorization: "Bearer your-token",
                  "Content-Type": "application/json",
                  Version: "1.0"
                }
              };
            }
            throw e;
          }
        })()}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["suggstionUser", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["suggstionUser", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["suggstionUser", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["updateHeader"] =
              $state.isLoading2 == false && $state.suggstionUser?.data?.list
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["header"]
                      },
                      operation: 0,
                      value: $state.suggstionUser.data.list
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateHeader"] != null &&
              typeof $steps["updateHeader"] === "object" &&
              typeof $steps["updateHeader"].then === "function"
            ) {
              $steps["updateHeader"] = await $steps["updateHeader"];
            }

            $steps["runCode"] =
              $state.isLoading2 == true && $state.suggstionUser?.data?.list
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.isLoading2 = false;
                          var newData = $state.suggstionUser?.data?.list;
                          if (!newData || newData.length == 0) {
                            $state.hasHeader = false;
                          } else {
                            $state.header = $state.header.concat(newData);
                          }
                          if (window.headers) {
                            window.headers.style.overflow = "auto";
                            return (window.headers.scrollLeft -= 8);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={(() => {
          try {
            return $props.token != "";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://api.friendschat.ir/chat/suggstionUser"}
      />

      <ApiRequest
        data-plasmic-name={"getSession"}
        data-plasmic-override={overrides.getSession}
        body={(() => {
          try {
            return {
              page: $state.pageChat,
              p: window.localStorage.getItem("page") || ""
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.getSession)}
        config={(() => {
          try {
            return {
              headers: {
                appid: "your-app-id",
                Authorization: $props.token,
                "Content-Type": "application/json",
                Version: "1.0"
              }
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return {
                headers: {
                  appid: "your-app-id",
                  Authorization: "Bearer your-token",
                  "Content-Type": "application/json",
                  Version: "1.0"
                }
              };
            }
            throw e;
          }
        })()}
        errorDisplay={null}
        loadingDisplay={null}
        method={"POST"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getSession", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getSession", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["getSession", "data"]).apply(
            null,
            eventArgs
          );

          (async data => {
            const $steps = {};

            $steps["updateChats"] =
              $state.isLoading == false && $state.getSession?.data?.list
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["chats"]
                      },
                      operation: 0,
                      value: $state.getSession.data.list
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateChats"] != null &&
              typeof $steps["updateChats"] === "object" &&
              typeof $steps["updateChats"].then === "function"
            ) {
              $steps["updateChats"] = await $steps["updateChats"];
            }

            $steps["updateChats2"] =
              $state.isLoading == true && $state.getSession?.data?.list
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.isLoading = false;
                          var newData = $state.getSession?.data?.list;
                          if (!newData || newData.length == 0) {
                            $state.hasChat = false;
                          } else {
                            $state.chats = $state.chats.concat(newData);
                          }
                          if (window.chats) {
                            window.chats.style.overflow = "auto";
                            return (window.chats.scrollTop =
                              window.chats.scrollTop + 200);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
            if (
              $steps["updateChats2"] != null &&
              typeof $steps["updateChats2"] === "object" &&
              typeof $steps["updateChats2"].then === "function"
            ) {
              $steps["updateChats2"] = await $steps["updateChats2"];
            }

            $steps["updateChats3"] =
              $state.hasChat == false
                ? (() => {
                    const actionArgs = {
                      args: [
                        "custom",
                        "\u067e\u06cc\u0627\u0645 \u062f\u06cc\u06af\u0631\u06cc \u0628\u0631\u0627\u06cc \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f",
                        "bottom-center"
                      ]
                    };
                    return $globalActions["Fragment.showToast"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
            if (
              $steps["updateChats3"] != null &&
              typeof $steps["updateChats3"] === "object" &&
              typeof $steps["updateChats3"].then === "function"
            ) {
              $steps["updateChats3"] = await $steps["updateChats3"];
            }
          }).apply(null, eventArgs);
        }}
        shouldFetch={(() => {
          try {
            return $props.token != "";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
        url={"https://api.friendschat.ir/chat/getSession"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "chatProfile",
    "section",
    "headerItem",
    "suggstionUser",
    "getSession"
  ],
  chatProfile: ["chatProfile"],
  section: ["section", "headerItem"],
  headerItem: ["headerItem"],
  suggstionUser: ["suggstionUser"],
  getSession: ["getSession"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  chatProfile: typeof ChatProfile;
  section: "section";
  headerItem: typeof HeaderItem;
  suggstionUser: typeof ApiRequest;
  getSession: typeof ApiRequest;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChat__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChat__VariantsArgs;
    args?: PlasmicChat__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChat__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChat__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChat__ArgProps,
          internalVariantPropNames: PlasmicChat__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChat__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChat";
  } else {
    func.displayName = `PlasmicChat.${nodeName}`;
  }
  return func;
}

export const PlasmicChat = Object.assign(
  // Top-level PlasmicChat renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chatProfile: makeNodeComponent("chatProfile"),
    section: makeNodeComponent("section"),
    headerItem: makeNodeComponent("headerItem"),
    suggstionUser: makeNodeComponent("suggstionUser"),
    getSession: makeNodeComponent("getSession"),

    // Metadata about props expected for PlasmicChat
    internalVariantProps: PlasmicChat__VariantProps,
    internalArgProps: PlasmicChat__ArgProps
  }
);

export default PlasmicChat;
/* prettier-ignore-end */
