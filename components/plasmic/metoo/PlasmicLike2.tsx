/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: GBScca95RuOo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicLike2.module.css"; // plasmic-import: GBScca95RuOo/css

import Icon198Icon from "./icons/PlasmicIcon__Icon198"; // plasmic-import: 1Xd6dHg9tsaq/icon
import Icon201Icon from "./icons/PlasmicIcon__Icon201"; // plasmic-import: EWmc4xh6S23L/icon

createPlasmicElementProxy;

export type PlasmicLike2__VariantMembers = {
  warning: "warning";
  like: "like";
};
export type PlasmicLike2__VariantsArgs = {
  warning?: SingleBooleanChoiceArg<"warning">;
  like?: SingleBooleanChoiceArg<"like">;
};
type VariantPropType = keyof PlasmicLike2__VariantsArgs;
export const PlasmicLike2__VariantProps = new Array<VariantPropType>(
  "warning",
  "like"
);

export type PlasmicLike2__ArgsType = {
  onClick?: (event: any) => void;
  feedbackData?: any;
};
type ArgPropType = keyof PlasmicLike2__ArgsType;
export const PlasmicLike2__ArgProps = new Array<ArgPropType>(
  "onClick",
  "feedbackData"
);

export type PlasmicLike2__OverridesType = {
  root?: Flex__<"div">;
  svg?: Flex__<"svg">;
};

export interface DefaultLike2Props {
  onClick?: (event: any) => void;
  feedbackData?: any;
  warning?: SingleBooleanChoiceArg<"warning">;
  like?: SingleBooleanChoiceArg<"like">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLike2__RenderFunc(props: {
  variants: PlasmicLike2__VariantsArgs;
  args: PlasmicLike2__ArgsType;
  overrides: PlasmicLike2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "warning",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.warning
      },
      {
        path: "like",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.like
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [sty.rootlike]: hasVariant($state, "like", "like"),
          [sty.rootwarning]: hasVariant($state, "warning", "warning")
        }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateLike"] = true
          ? (() => {
              const actionArgs = { vgroup: "like", operation: 2 };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateLike"] != null &&
          typeof $steps["updateLike"] === "object" &&
          typeof $steps["updateLike"].then === "function"
        ) {
          $steps["updateLike"] = await $steps["updateLike"];
        }

        $steps["invokeGlobalAction"] = true
          ? (() => {
              const actionArgs = {
                args: [
                  "POST",
                  "https://n8n.staas.ir/webhook/chat-bot/feedback",
                  undefined,
                  (() => {
                    try {
                      return {
                        chat_id: $props.feedbackData.chat_id,
                        session_id: $props.feedbackData.session_id,
                        user_id: $props.feedbackData.user_id,
                        likeStatus: "like"
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  (() => {
                    try {
                      return {
                        headers: { Authorization: "Bearer " + window.token }
                      };
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                ]
              };
              return $globalActions["Fragment.apiRequest"]?.apply(null, [
                ...actionArgs.args
              ]);
            })()
          : undefined;
        if (
          $steps["invokeGlobalAction"] != null &&
          typeof $steps["invokeGlobalAction"] === "object" &&
          typeof $steps["invokeGlobalAction"].then === "function"
        ) {
          $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
        }

        $steps["runOnClick"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["onClick"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runOnClick"] != null &&
          typeof $steps["runOnClick"] === "object" &&
          typeof $steps["runOnClick"].then === "function"
        ) {
          $steps["runOnClick"] = await $steps["runOnClick"];
        }
      }}
    >
      <PlasmicIcon__
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant($state, "like", "like") ? Icon201Icon : Icon198Icon
        }
        className={classNames(projectcss.all, sty.svg, {
          [sty.svglike]: hasVariant($state, "like", "like")
        })}
        onClick={async event => {
          const $steps = {};
        }}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLike2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLike2__VariantsArgs;
    args?: PlasmicLike2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLike2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLike2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLike2__ArgProps,
          internalVariantPropNames: PlasmicLike2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLike2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLike2";
  } else {
    func.displayName = `PlasmicLike2.${nodeName}`;
  }
  return func;
}

export const PlasmicLike2 = Object.assign(
  // Top-level PlasmicLike2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicLike2
    internalVariantProps: PlasmicLike2__VariantProps,
    internalArgProps: PlasmicLike2__ArgProps
  }
);

export default PlasmicLike2;
/* prettier-ignore-end */
