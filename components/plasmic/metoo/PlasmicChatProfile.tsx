/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: nGhx_iZ2h_Jn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoAvatar from "../../MetoAvatar"; // plasmic-import: _gMBtmcmMLtW/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import UploudeTime from "../../UploudeTime"; // plasmic-import: eACF_em_NR97/component
import MetoLineClamp from "../../MetoLineClamp"; // plasmic-import: RwzANvZHxEoI/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/styleTokensProvider
import { _useStyleTokens as useStyleTokens_meto_deign_system } from ""; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicChatProfile.module.css"; // plasmic-import: nGhx_iZ2h_Jn/css

createPlasmicElementProxy;

export type PlasmicChatProfile__VariantMembers = {};
export type PlasmicChatProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicChatProfile__VariantsArgs;
export const PlasmicChatProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicChatProfile__ArgsType = {
  currentItem?: any;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicChatProfile__ArgsType;
export const PlasmicChatProfile__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "load",
  "onLoadChange",
  "onClick"
);

export type PlasmicChatProfile__OverridesType = {
  root?: Flex__<"div">;
  metoAvatar?: Flex__<typeof MetoAvatar>;
  metoLabel?: Flex__<typeof MetoLabel>;
  img?: Flex__<typeof PlasmicImg__>;
  uploudeTime?: Flex__<typeof UploudeTime>;
  metoLineClamp?: Flex__<typeof MetoLineClamp>;
};

export interface DefaultChatProfileProps {
  currentItem?: any;
  load?: boolean;
  onLoadChange?: (val: string) => void;
  onClick?: (event: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicChatProfile__RenderFunc(props: {
  variants: PlasmicChatProfile__VariantsArgs;
  args: PlasmicChatProfile__ArgsType;
  overrides: PlasmicChatProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          currentItem: {
            id: 13309955,
            firstUser: 1252072,
            secondUser: 1268533,
            lastMessage:
              "\u0686\u062a \u0631\u0648 \u0634\u0631\u0648\u0639 \u06a9\u0646\u060c \u0645\u0646\u062a\u0638\u0631\u062a\u0645!",
            date: "2025-07-23",
            lastActivity: "2025-07-23 11:49:24",
            timestamp: "2025-07-23 11:49:24",
            count: 1,
            isBlock: 0,
            isDelete: 0,
            lastOpen_firstUser: "2025-07-23 11:49:24",
            lastOpen_secondUser: "2025-07-23 11:49:24",
            lastMessageTimestamp_fa: "1404\u066b5\u066b1 11:49:24",
            lastMessageTimestamp_en: "2025-07-23 11:49:24",
            isNewMassege: false,
            user: {
              id: 1252072,
              bri: 0,
              name: "\u0639\u0644\u06cc",
              username: "",
              cluster: 2,
              viewd:
                "0,700282,699677,698635,495050,490597,489892,482815,480215,475767,469840,191253,189642,187736,184800,171587,170658,169535,165698,143872,143873,38,39,40,41,42,45,47,48,49,52,468845,454213,448466,438610,438518,437190,426567,412621,402204,392024,391230,387231,375780,375553,367890,358434,348160,344466,343516,330317,328207,327849,323272,316806,314206,314127,310791,304814,300269,298537,143865,143866,143867,143870,143871,2562,122,112,106,105,296978,276737,262727,254837,253102,250543,237410,235254,234481,230678,230643,230597,230424,228801,227780,225374,218836,215618,211675,209386,143874,143875,143876,143878,143879,143880,143881,143882,143883,143884,95,96,98,99,143885,143819,143822,143823,143826,143827,143836,143840,143845,143847,143849,143851,143852,143854,143855,143856,143859,143860,143862,143864,103,102,90,76,75,36,29,28,20,37,53,54,55,56,60,61,62,63,64,65,67,68,84,85,87,88,89,91,92,93",
              mobile: null,
              city: "\u0631\u0634\u062a",
              state: "\u06af\u06cc\u0644\u0627\u0646",
              age: 35,
              address: "\u0631\u0634\u062a",
              sex: "male",
              cLike: 194,
              cView: 295,
              cMyView: 214,
              cMyLike: 212,
              isVip: 1,
              isPromote: 0,
              isPromoteDate: null,
              premiumEndDate: "2025-08-16",
              lastActivity: "2025-07-23 11:51:32",
              lastActivityDate: "2025-07-23",
              activeGoldenTick: 0,
              eventBlock: 0,
              eventSeen: 0,
              eventMessage: 0,
              eventLike: 0,
              imei: "",
              email: null,
              version: "2.0.1 BAZAR",
              appid: 2,
              regDate: "2025-07-11",
              timestamp: "2025-07-11 12:56:47",
              refCode: "f93716",
              _referedBy: null,
              refCount: 0,
              stars: 406,
              weeklyStars: 406,
              cLikeCP: 0,
              weeklyCLikeCP: 0,
              tokenBot: "/liom_62679d",
              hamyarEshgh: null,
              hamyarEshgh_gap: null,
              partnerName: null,
              mobileHamyar: null,
              marridDate: null,
              country: "IR",
              lang: "fa",
              postLang: "fa",
              marital_status: "0",
              birthdayDate: "1369-12-14",
              dueDate: null,
              pLast_time: null,
              length: null,
              last_time: null,
              cycle: null,
              height: null,
              weight: null,
              cOffCode: null,
              password: null,
              avatar: 1,
              socialAvatar: 1,
              overall: 0,
              profilePic: "",
              bio: "",
              header: " ",
              background: "",
              font: " ",
              verify: 0,
              telegram: " ",
              instagram: " ",
              twitter: " ",
              syncCount: null,
              isAdmin: 0,
              superAdmin: 0,
              isBlock: 0,
              isVisible_news: null,
              isVisible_broadcast: 1,
              checker: 0,
              blogger: 0,
              notif_like: 0,
              notif_comments: 0,
              notif_mention: 0,
              event: 0,
              unSeenEvent: 0,
              cPost: 0,
              unLikeCat: "",
              adult: 0,
              political: 0,
              firstTwitt: 0,
              suspect: 0,
              suspectHeader: 0,
              suspectProfile: 0,
              suspectBio: 0,
              suspectName: 0,
              suspectUserName: 0,
              uuid: null,
              bot: 0,
              isCheck: 0,
              req_id: 1252072
            }
          }
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "load",
        type: "writable",
        variableType: "boolean",

        valueProp: "load",
        onChangeProp: "onLoadChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_meto_deign_system =
    useStyleTokens_meto_deign_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_meto_deign_system,
        styleTokensClassNames_antd_5_hostless,
        sty.root
      )}
      onClick={args.onClick}
    >
      <MetoAvatar
        data-plasmic-name={"metoAvatar"}
        data-plasmic-override={overrides.metoAvatar}
        badge={(() => {
          try {
            return (() => {
              function isOnline(user) {
                const now = new Date();
                const lastSeen = new Date(user.lastActivity + " GMT+0330");
                const diff = (now - lastSeen) / (1000 * 60);
                return diff <= 2;
              }
              if (isOnline($props.currentItem)) return "check";
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "check";
            }
            throw e;
          }
        })()}
        className={classNames("__wab_instance", sty.metoAvatar)}
        ring={"blue"}
        src={(() => {
          try {
            return (() => {
              if (!/\.[^/.]+$/.test($props.currentItem.user.profilePic)) {
                return ($props.currentItem.user.profilePic += ".jpg");
              } else {
                return $props.currentItem.user.profilePic;
              }
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <div className={classNames(projectcss.all, sty.freeBox__tde2L)}>
        <div className={classNames(projectcss.all, sty.freeBox__um1Ck)}>
          <div className={classNames(projectcss.all, sty.freeBox__s8Zop)}>
            <MetoLabel
              data-plasmic-name={"metoLabel"}
              data-plasmic-override={overrides.metoLabel}
              className={classNames("__wab_instance", sty.metoLabel)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__p39O
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.currentItem.user.name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Label";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </MetoLabel>
            {(() => {
              try {
                return $props.currentItem.user.activeGoldenTick;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"1.25rem"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/metoo/images/tikGSvg.svg",
                  fullWidth: 307.09,
                  fullHeight: 306.78,
                  aspectRatio: 1.00101
                }}
              />
            ) : null}
          </div>
          <UploudeTime
            data-plasmic-name={"uploudeTime"}
            data-plasmic-override={overrides.uploudeTime}
            className={classNames("__wab_instance", sty.uploudeTime)}
            posttime={(() => {
              try {
                return $props.currentItem.lastMessageTimestamp_en;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            textSize={"small"}
          />
        </div>
        <MetoLineClamp
          data-plasmic-name={"metoLineClamp"}
          data-plasmic-override={overrides.metoLineClamp}
          className={classNames("__wab_instance", sty.metoLineClamp)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6Frkt
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.lastMessage;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </MetoLineClamp>
      </div>
      {(() => {
        try {
          return $state.load;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___4Lxo, "shimmer")}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "metoAvatar",
    "metoLabel",
    "img",
    "uploudeTime",
    "metoLineClamp"
  ],
  metoAvatar: ["metoAvatar"],
  metoLabel: ["metoLabel"],
  img: ["img"],
  uploudeTime: ["uploudeTime"],
  metoLineClamp: ["metoLineClamp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metoAvatar: typeof MetoAvatar;
  metoLabel: typeof MetoLabel;
  img: typeof PlasmicImg__;
  uploudeTime: typeof UploudeTime;
  metoLineClamp: typeof MetoLineClamp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChatProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChatProfile__VariantsArgs;
    args?: PlasmicChatProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChatProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChatProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicChatProfile__ArgProps,
          internalVariantPropNames: PlasmicChatProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicChatProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChatProfile";
  } else {
    func.displayName = `PlasmicChatProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicChatProfile = Object.assign(
  // Top-level PlasmicChatProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metoAvatar: makeNodeComponent("metoAvatar"),
    metoLabel: makeNodeComponent("metoLabel"),
    img: makeNodeComponent("img"),
    uploudeTime: makeNodeComponent("uploudeTime"),
    metoLineClamp: makeNodeComponent("metoLineClamp"),

    // Metadata about props expected for PlasmicChatProfile
    internalVariantProps: PlasmicChatProfile__VariantProps,
    internalArgProps: PlasmicChatProfile__ArgProps
  }
);

export default PlasmicChatProfile;
/* prettier-ignore-end */
