/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: nLQQ9UAUBUbY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import SettingItem from "../../SettingItem"; // plasmic-import: TBGwfoojuj_s/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicSetting.module.css"; // plasmic-import: nLQQ9UAUBUbY/css

createPlasmicElementProxy;

export type PlasmicSetting__VariantMembers = {};
export type PlasmicSetting__VariantsArgs = {};
type VariantPropType = keyof PlasmicSetting__VariantsArgs;
export const PlasmicSetting__VariantProps = new Array<VariantPropType>();

export type PlasmicSetting__ArgsType = {
  userInfo?: any;
  selectItem?: any;
  onSelectItemChange?: (val: string) => void;
  onclick?: () => void;
  token?: string;
};
type ArgPropType = keyof PlasmicSetting__ArgsType;
export const PlasmicSetting__ArgProps = new Array<ArgPropType>(
  "userInfo",
  "selectItem",
  "onSelectItemChange",
  "onclick",
  "token"
);

export type PlasmicSetting__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  settingItem?: Flex__<typeof SettingItem>;
};

export interface DefaultSettingProps {
  userInfo?: any;
  selectItem?: any;
  onSelectItemChange?: (val: string) => void;
  onclick?: () => void;
  token?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSetting__RenderFunc(props: {
  variants: PlasmicSetting__VariantsArgs;
  args: PlasmicSetting__ArgsType;
  overrides: PlasmicSetting__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "item",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return [
                {
                  text: "کی پروفایلم رو دید؟",
                  type: "text",
                  action: "getEvent",
                  number: $props.userInfo.userInfo.cView,
                  premium: true
                },
                {
                  text: "کی پروفایلمو رو لایک کرد؟",
                  type: "text",
                  action: "likeProfile",
                  number: $props.userInfo.userInfo.cLike,
                  premium: true
                },
                {
                  type: "hr"
                },
                {
                  text: "خرید اشتراک",
                  type: "button",
                  action: "shop",
                  number: 3,
                  style: "primary",
                  premium: false
                },
                {
                  type: "hr"
                },
                {
                  text: "کی بلاکم کرد؟",
                  type: "text",
                  action: "whoBlock",
                  // "number": $props.userInfo.userInfo.c,
                  premium: true
                },
                {
                  text: "افرادی که بلاک کردم",
                  type: "action",
                  action: "myBlock",
                  // "number": 5,
                  premium: false
                },
                {
                  type: "hr"
                },
                {
                  text: "رایگان ها",
                  type: "button",
                  action: "freeItems",
                  // "number": 6,
                  style: "onScaffold",
                  premium: false
                },
                {
                  type: "hr"
                },
                {
                  text: "ثبت رمز عبور",
                  type: "text",
                  action: "setPassword",
                  // "number": 7,
                  premium: false
                },
                {
                  text: "افرادی که لایک کردم",
                  type: "action",
                  action: "myLike",
                  // "number": 8,
                  premium: false
                },
                {
                  text: "حریم خصوصی",
                  type: "text",
                  action: "privacy",
                  // "number": 9,
                  premium: false
                },
                {
                  text: "قوانین",
                  type: "text",
                  action: "terms",
                  // "number": 10,
                  premium: false
                }
              ];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [
                  {
                    text: "\u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u0645 \u0631\u0648 \u062f\u06cc\u062f\u061f",
                    type: "text",
                    action: "viewProfile",
                    number: 1,
                    premium: true
                  },
                  {
                    text: "\u06a9\u06cc \u067e\u0631\u0648\u0641\u0627\u06cc\u0644\u0645\u0648 \u0631\u0648 \u0644\u0627\u06cc\u06a9 \u06a9\u0631\u062f\u061f",
                    type: "text",
                    action: "likeProfile",
                    number: 2,
                    premium: true
                  },
                  { type: "hr" },
                  {
                    text: "\u062e\u0631\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9",
                    type: "button",
                    action: "buySubscription",
                    number: 3,
                    style: "primary",
                    premium: false
                  },
                  { type: "hr" },
                  {
                    text: "\u06a9\u06cc \u0628\u0644\u0627\u06a9\u0645 \u06a9\u0631\u062f\u061f",
                    type: "text",
                    action: "blockInfo",
                    number: 4,
                    premium: true
                  },
                  {
                    text: "\u0627\u0641\u0631\u0627\u062f\u06cc \u06a9\u0647 \u0628\u0644\u0627\u06a9 \u06a9\u0631\u062f\u0645",
                    type: "action",
                    action: "blockedUsers",
                    number: 5,
                    premium: false
                  },
                  { type: "hr" },
                  {
                    text: "\u0631\u0627\u06cc\u06af\u0627\u0646 \u0647\u0627",
                    type: "button",
                    action: "freeItems",
                    number: 6,
                    style: "onScaffold",
                    premium: false
                  },
                  { type: "hr" },
                  {
                    text: "\u062b\u0628\u062a \u0631\u0645\u0632 \u0639\u0628\u0648\u0631",
                    type: "text",
                    action: "setPassword",
                    number: 7,
                    premium: false
                  },
                  {
                    text: "\u0627\u0641\u0631\u0627\u062f\u06cc \u06a9\u0647 \u0644\u0627\u06cc\u06a9 \u06a9\u0631\u062f\u0645",
                    type: "action",
                    action: "likedUsers",
                    number: 8,
                    premium: false
                  },
                  {
                    text: "\u062d\u0631\u06cc\u0645 \u062e\u0635\u0648\u0635\u06cc",
                    type: "text",
                    action: "privacy",
                    number: 9,
                    premium: false
                  },
                  {
                    text: "\u0642\u0648\u0627\u0646\u06cc\u0646",
                    type: "text",
                    action: "terms",
                    number: 10,
                    premium: false
                  }
                ];
              }
              throw e;
            }
          })()
      },
      {
        path: "selectItem",
        type: "writable",
        variableType: "object",

        valueProp: "selectItem",
        onChangeProp: "onSelectItemChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jfKtD)}>
        <div className={classNames(projectcss.all, sty.freeBox__dja2R)}>
          <MetoLabel
            className={classNames("__wab_instance", sty.metoLabel__eykT)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2BeMn
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `مجموعه بازدید: ${$props.userInfo.userInfo.cView}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Label";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </MetoLabel>
          <MetoLabel
            className={classNames("__wab_instance", sty.metoLabel__oPoS4)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xujRn
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `مجموعه لایک: ${$props.userInfo.userInfo.cLike}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Label";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </MetoLabel>
        </div>
        <Embed
          data-plasmic-name={"embedHtml"}
          data-plasmic-override={overrides.embedHtml}
          className={classNames("__wab_instance", sty.embedHtml)}
          code={"<hr></hr>"}
        />

        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.item;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <SettingItem
              data-plasmic-name={"settingItem"}
              data-plasmic-override={overrides.settingItem}
              back={(() => {
                try {
                  return currentItem.style;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.settingItem)}
              currentItem={currentItem}
              key={currentIndex}
              onClick={async event => {
                const $steps = {};

                $steps["updateSelectItem"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["selectItem"]
                        },
                        operation: 0,
                        value: currentItem
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSelectItem"] != null &&
                  typeof $steps["updateSelectItem"] === "object" &&
                  typeof $steps["updateSelectItem"].then === "function"
                ) {
                  $steps["updateSelectItem"] = await $steps["updateSelectItem"];
                }

                $steps["runOnclick"] = true
                  ? (() => {
                      const actionArgs = { eventRef: $props["onclick"] };
                      return (({ eventRef, args }) => {
                        return eventRef?.(...(args ?? []));
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runOnclick"] != null &&
                  typeof $steps["runOnclick"] === "object" &&
                  typeof $steps["runOnclick"].then === "function"
                ) {
                  $steps["runOnclick"] = await $steps["runOnclick"];
                }
              }}
              type={(() => {
                try {
                  return currentItem.type;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "button";
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "embedHtml", "settingItem"],
  embedHtml: ["embedHtml"],
  settingItem: ["settingItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  settingItem: typeof SettingItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSetting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSetting__VariantsArgs;
    args?: PlasmicSetting__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSetting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSetting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSetting__ArgProps,
          internalVariantPropNames: PlasmicSetting__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSetting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSetting";
  } else {
    func.displayName = `PlasmicSetting.${nodeName}`;
  }
  return func;
}

export const PlasmicSetting = Object.assign(
  // Top-level PlasmicSetting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    settingItem: makeNodeComponent("settingItem"),

    // Metadata about props expected for PlasmicSetting
    internalVariantProps: PlasmicSetting__VariantProps,
    internalArgProps: PlasmicSetting__ArgProps
  }
);

export default PlasmicSetting;
/* prettier-ignore-end */
