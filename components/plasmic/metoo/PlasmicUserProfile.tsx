/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: 6bHlyAAYDDD1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Post from "../../Post"; // plasmic-import: MPQbn3WJ9nnV/component
import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import MetoButton from "../../MetoButton"; // plasmic-import: Cz1go1zIfhZZ/component
import MetoButton2 from "../../MetoButton"; // plasmic-import: BFnTlSYwdY0-/component
import Like from "../../Like"; // plasmic-import: tXJMudG_KgDC/component
import MetoHeader from "../../MetoHeader"; // plasmic-import: kWTQGqg2Dx4y/component
import MetoLabel2 from "../../MetoLabel"; // plasmic-import: HXH7JR-ZP-iD/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: G0urM0rvD4xu/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicUserProfile.module.css"; // plasmic-import: 6bHlyAAYDDD1/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: RJhoy2uXebLi/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: N5pcwqnXvyIA/icon
import CircleIcon2 from "../meto_deign_system/icons/PlasmicIcon__Circle"; // plasmic-import: n4WDawyT-j_R/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: FRb_xRn_jsVb/icon
import ChevronDownIcon2 from "../meto_deign_system/icons/PlasmicIcon__ChevronDown"; // plasmic-import: 5EHYKqa8ukVe/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: ol26aUpgzldx/icon

createPlasmicElementProxy;

export type PlasmicUserProfile__VariantMembers = {};
export type PlasmicUserProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicUserProfile__VariantsArgs;
export const PlasmicUserProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicUserProfile__ArgsType = {
  currentUser?: any;
  back?: (event: any) => void;
  currenteUser?: any;
  onCurrenteUserChange?: (val: string) => void;
  chat?: (event: any) => void;
  token?: string;
  goToChat?: boolean;
  onGoToChatChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicUserProfile__ArgsType;
export const PlasmicUserProfile__ArgProps = new Array<ArgPropType>(
  "currentUser",
  "back",
  "currenteUser",
  "onCurrenteUserChange",
  "chat",
  "token",
  "goToChat",
  "onGoToChatChange"
);

export type PlasmicUserProfile__OverridesType = {
  root?: Flex__<"div">;
  post?: Flex__<typeof Post>;
  metoLabel?: Flex__<typeof MetoLabel>;
  img?: Flex__<typeof PlasmicImg__>;
  button?: Flex__<typeof MetoButton>;
  like?: Flex__<typeof Like>;
  section?: Flex__<"section">;
  metoHeader?: Flex__<typeof MetoHeader>;
};

export interface DefaultUserProfileProps {
  currentUser?: any;
  back?: (event: any) => void;
  currenteUser?: any;
  onCurrenteUserChange?: (val: string) => void;
  chat?: (event: any) => void;
  token?: string;
  goToChat?: boolean;
  onGoToChatChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUserProfile__RenderFunc(props: {
  variants: PlasmicUserProfile__VariantsArgs;
  args: PlasmicUserProfile__ArgsType;
  overrides: PlasmicUserProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "post.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "post.image",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $props.currentUser.profilePic;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "button.load",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currenteUser",
        type: "writable",
        variableType: "object",

        valueProp: "currenteUser",
        onChangeProp: "onCurrenteUserChange"
      },
      {
        path: "goToChat",
        type: "writable",
        variableType: "boolean",

        valueProp: "goToChat",
        onChangeProp: "onGoToChatChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          ),
          [projectcss.global_theme_light]: hasVariant(
            globalVariants,
            "theme",
            "light"
          )
        }
      )}
    >
      <Post
        data-plasmic-name={"post"}
        data-plasmic-override={overrides.post}
        children={null}
        className={classNames("__wab_instance", sty.post)}
        image={generateStateValueProp($state, ["post", "image"])}
        load={generateStateValueProp($state, ["post", "load"])}
        onImageChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["post", "image"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        onLoadChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["post", "load"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        profile={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox___5CgfA)}>
        <div className={classNames(projectcss.all, sty.freeBox__bhizx)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qrg7)}
          >
            <MetoLabel
              data-plasmic-name={"metoLabel"}
              data-plasmic-override={overrides.metoLabel}
              className={classNames("__wab_instance", sty.metoLabel)}
              size={"lg"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `${$props.currentUser.name} | ${$props.currentUser.age} ساله `;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Label";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </MetoLabel>
            {(() => {
              try {
                return $props.currentUser.activeGoldenTick;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"1.5rem"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"1.5rem"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/metoo/images/tikGSvg.svg",
                  fullWidth: 307.09,
                  fullHeight: 306.78,
                  aspectRatio: 1.00101
                }}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kEarw)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aZbi
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `آدرس: ${$props.currentUser.state} - ${$props.currentUser.city}`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__d8Xen
              )}
            >
              {
                "\u0628\u0631\u0627\u06cc \u062f\u06cc\u062f\u0646 \u0622\u062f\u0631\u0633 \u062f\u0642\u06cc\u0642 \u0646\u06cc\u0627\u0632 \u0628\u0647 \u0627\u06a9\u0627\u0646\u062a \u0648\u06cc\u0698\u0647 \u062f\u0627\u0631\u06cc\u062f"
              }
            </div>
          </Stack__>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__cVyIb)}>
        <MetoButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          label={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gmavw
              )}
            >
              {"\u062e\u0631\u06cc\u062f \u0627\u0634\u062a\u0631\u0627\u06a9"}
            </div>
          }
          load={generateStateValueProp($state, ["button", "load"])}
          onLoadChange={async (...eventArgs: any) => {
            generateStateOnChangeProp($state, ["button", "load"]).apply(
              null,
              eventArgs
            );

            if (
              eventArgs.length > 1 &&
              eventArgs[1] &&
              eventArgs[1]._plasmic_state_init_
            ) {
              return;
            }
          }}
        />
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jtY97)}
      >
        {(() => {
          try {
            return $state.goToChat;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <MetoButton2
            className={classNames("__wab_instance", sty.metoButton___7XBgc)}
            color={"neutral"}
            flatSide={[]}
            label={
              <div className={classNames(projectcss.all, sty.freeBox__btszF)}>
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__vBf8D)}
                  role={"img"}
                />
              </div>
            }
            onClick={args.chat}
            roundedFull={true}
            size={"large"}
          />
        ) : null}
        <MetoButton2
          className={classNames("__wab_instance", sty.metoButton___9PtAc)}
          color={"neutral"}
          flatSide={[]}
          label={
            <div className={classNames(projectcss.all, sty.freeBox__lViay)}>
              {(() => {
                try {
                  return true;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <Like
                  data-plasmic-name={"like"}
                  data-plasmic-override={overrides.like}
                  className={classNames("__wab_instance", sty.like)}
                  like={(() => {
                    try {
                      return $state.currenteUser.setLike;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </div>
          }
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return ($state.currenteUser.setLike = true);
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }

            $steps["invokeGlobalAction"] = true
              ? (() => {
                  const actionArgs = {
                    args: [
                      "POST",
                      "https://api.friendschat.ir/chat/addEvent",
                      undefined,
                      (() => {
                        try {
                          return {
                            userID: $state.currenteUser.id,
                            type: "like"
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return {
                            headers: {
                              appid: "your-app-id",
                              Authorization: $props.token,
                              "Content-Type": "application/json",
                              Version: "1.0"
                            }
                          };
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()
                    ]
                  };
                  return $globalActions["Fragment.apiRequest"]?.apply(null, [
                    ...actionArgs.args
                  ]);
                })()
              : undefined;
            if (
              $steps["invokeGlobalAction"] != null &&
              typeof $steps["invokeGlobalAction"] === "object" &&
              typeof $steps["invokeGlobalAction"].then === "function"
            ) {
              $steps["invokeGlobalAction"] = await $steps["invokeGlobalAction"];
            }
          }}
          roundedFull={true}
          size={"large"}
        />

        <MetoButton2
          className={classNames("__wab_instance", sty.metoButton___9Y6O5)}
          color={"neutral"}
          flatSide={[]}
          label={
            <div className={classNames(projectcss.all, sty.freeBox__nUPjb)}>
              <Icon34Icon
                className={classNames(projectcss.all, sty.svg__jnGjE)}
                role={"img"}
              />
            </div>
          }
          roundedFull={true}
          size={"large"}
        />
      </Stack__>
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section)}
      >
        <MetoHeader
          data-plasmic-name={"metoHeader"}
          data-plasmic-override={overrides.metoHeader}
          className={classNames("__wab_instance", sty.metoHeader)}
          onClick={args.back}
          profile={true}
        />
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "post",
    "metoLabel",
    "img",
    "button",
    "like",
    "section",
    "metoHeader"
  ],
  post: ["post"],
  metoLabel: ["metoLabel"],
  img: ["img"],
  button: ["button"],
  like: ["like"],
  section: ["section", "metoHeader"],
  metoHeader: ["metoHeader"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  post: typeof Post;
  metoLabel: typeof MetoLabel;
  img: typeof PlasmicImg__;
  button: typeof MetoButton;
  like: typeof Like;
  section: "section";
  metoHeader: typeof MetoHeader;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserProfile__VariantsArgs;
    args?: PlasmicUserProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUserProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserProfile__ArgProps,
          internalVariantPropNames: PlasmicUserProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUserProfile";
  } else {
    func.displayName = `PlasmicUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicUserProfile = Object.assign(
  // Top-level PlasmicUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    post: makeNodeComponent("post"),
    metoLabel: makeNodeComponent("metoLabel"),
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    like: makeNodeComponent("like"),
    section: makeNodeComponent("section"),
    metoHeader: makeNodeComponent("metoHeader"),

    // Metadata about props expected for PlasmicUserProfile
    internalVariantProps: PlasmicUserProfile__VariantProps,
    internalArgProps: PlasmicUserProfile__ArgProps
  }
);

export default PlasmicUserProfile;
/* prettier-ignore-end */
