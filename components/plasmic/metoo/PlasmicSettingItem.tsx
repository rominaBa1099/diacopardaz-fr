/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: TBGwfoojuj_s

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MetoLabel from "../../MetoLabel"; // plasmic-import: 4JtC8N_iZ8lG/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/styleTokensProvider
import { _useStyleTokens as useStyleTokens_meto_deign_system } from ""; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicSettingItem.module.css"; // plasmic-import: TBGwfoojuj_s/css

import ChevronLeftIcon from "../meto_deign_system/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: fERQzs5dLOza/icon

createPlasmicElementProxy;

export type PlasmicSettingItem__VariantMembers = {
  type: "button" | "hr";
  back: "onScaffold" | "primary" | "vip";
};
export type PlasmicSettingItem__VariantsArgs = {
  type?: SingleChoiceArg<"button" | "hr">;
  back?: SingleChoiceArg<"onScaffold" | "primary" | "vip">;
};
type VariantPropType = keyof PlasmicSettingItem__VariantsArgs;
export const PlasmicSettingItem__VariantProps = new Array<VariantPropType>(
  "type",
  "back"
);

export type PlasmicSettingItem__ArgsType = {
  currentItem?: any;
  onClick?: (event: any) => void;
};
type ArgPropType = keyof PlasmicSettingItem__ArgsType;
export const PlasmicSettingItem__ArgProps = new Array<ArgPropType>(
  "currentItem",
  "onClick"
);

export type PlasmicSettingItem__OverridesType = {
  root?: Flex__<"div">;
  metoLabel?: Flex__<typeof MetoLabel>;
  svg?: Flex__<"svg">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultSettingItemProps {
  currentItem?: any;
  onClick?: (event: any) => void;
  type?: SingleChoiceArg<"button" | "hr">;
  back?: SingleChoiceArg<"onScaffold" | "primary" | "vip">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettingItem__RenderFunc(props: {
  variants: PlasmicSettingItem__VariantsArgs;
  args: PlasmicSettingItem__ArgsType;
  overrides: PlasmicSettingItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "back",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.back
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_meto_deign_system =
    useStyleTokens_meto_deign_system();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        styleTokensClassNames_meto_deign_system,
        styleTokensClassNames_antd_5_hostless,
        sty.root,
        {
          [sty.rootback_onScaffold]: hasVariant($state, "back", "onScaffold"),
          [sty.rootback_onScaffold_type_button]:
            hasVariant($state, "back", "onScaffold") &&
            hasVariant($state, "type", "button"),
          [sty.rootback_primary]: hasVariant($state, "back", "primary"),
          [sty.rootback_primary_type_button]:
            hasVariant($state, "back", "primary") &&
            hasVariant($state, "type", "button"),
          [sty.rootback_primary_type_hr]:
            hasVariant($state, "type", "hr") &&
            hasVariant($state, "back", "primary"),
          [sty.rootback_vip]: hasVariant($state, "back", "vip"),
          [sty.rootback_vip_type_button]:
            hasVariant($state, "back", "vip") &&
            hasVariant($state, "type", "button"),
          [sty.roottype_button]: hasVariant($state, "type", "button"),
          [sty.roottype_hr]: hasVariant($state, "type", "hr")
        }
      )}
      onClick={args.onClick}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__hlqhR, {
          [sty.freeBoxback_onScaffold__hlqhR0M0Ql]: hasVariant(
            $state,
            "back",
            "onScaffold"
          ),
          [sty.freeBoxback_onScaffold_type_button__hlqhR0M0QlGUbtP]:
            hasVariant($state, "back", "onScaffold") &&
            hasVariant($state, "type", "button"),
          [sty.freeBoxback_primary__hlqhRpdOhk]: hasVariant(
            $state,
            "back",
            "primary"
          ),
          [sty.freeBoxback_primary_type_button__hlqhRpdOhkGUbtP]:
            hasVariant($state, "back", "primary") &&
            hasVariant($state, "type", "button"),
          [sty.freeBoxback_vip__hlqhRXIm]: hasVariant($state, "back", "vip"),
          [sty.freeBoxtype_button__hlqhRgUbtP]: hasVariant(
            $state,
            "type",
            "button"
          ),
          [sty.freeBoxtype_hr__hlqhRhuTlq]: hasVariant($state, "type", "hr")
        })}
      >
        <MetoLabel
          data-plasmic-name={"metoLabel"}
          data-plasmic-override={overrides.metoLabel}
          className={classNames("__wab_instance", sty.metoLabel, {
            [sty.metoLabelback_onScaffold]: hasVariant(
              $state,
              "back",
              "onScaffold"
            ),
            [sty.metoLabelback_vip]: hasVariant($state, "back", "vip"),
            [sty.metoLabeltype_button]: hasVariant($state, "type", "button")
          })}
          size={"lg"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nCaUd,
              {
                [sty.textback_vip__nCaUdXIm]: hasVariant($state, "back", "vip"),
                [sty.texttype_button__nCaUdgUbtP]: hasVariant(
                  $state,
                  "type",
                  "button"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.currentItem.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Label";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </MetoLabel>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__m7Ha7, {
          [sty.freeBoxtype_button__m7Ha7GUbtP]: hasVariant(
            $state,
            "type",
            "button"
          ),
          [sty.freeBoxtype_hr__m7Ha7HuTlq]: hasVariant($state, "type", "hr")
        })}
      >
        {(() => {
          try {
            return $props.currentItem?.number ? true : false;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zdBRo,
              {
                [sty.textback_vip__zdBRoXIm]: hasVariant($state, "back", "vip")
              }
            )}
          >
            {hasVariant($state, "back", "vip") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return "تاریخ اتمام اشراک : " + $props.currentItem.number;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.number;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
        ) : null}
        <ChevronLeftIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgback_vip]: hasVariant($state, "back", "vip"),
            [sty.svgtype_button]: hasVariant($state, "type", "button")
          })}
          role={"img"}
        />
      </div>
      {(hasVariant($state, "type", "hr") ? true : false) ? (
        <Embed
          data-plasmic-name={"embedHtml"}
          data-plasmic-override={overrides.embedHtml}
          className={classNames("__wab_instance", sty.embedHtml, {
            [sty.embedHtmltype_hr]: hasVariant($state, "type", "hr")
          })}
          code={"<hr></hr>"}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "metoLabel", "svg", "embedHtml"],
  metoLabel: ["metoLabel"],
  svg: ["svg"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  metoLabel: typeof MetoLabel;
  svg: "svg";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSettingItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSettingItem__VariantsArgs;
    args?: PlasmicSettingItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSettingItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSettingItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettingItem__ArgProps,
          internalVariantPropNames: PlasmicSettingItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettingItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSettingItem";
  } else {
    func.displayName = `PlasmicSettingItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSettingItem = Object.assign(
  // Top-level PlasmicSettingItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    metoLabel: makeNodeComponent("metoLabel"),
    svg: makeNodeComponent("svg"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicSettingItem
    internalVariantProps: PlasmicSettingItem__VariantProps,
    internalArgProps: PlasmicSettingItem__ArgProps
  }
);

export default PlasmicSettingItem;
/* prettier-ignore-end */
