/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: a37ZtVtYSDC6FmRkqCLyA3
// Component: b0WRwkBcq6Fa

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Dialog } from "@plasmicpkgs/radix-ui";
import { DialogContent } from "@plasmicpkgs/radix-ui";
import { DialogTitle } from "@plasmicpkgs/radix-ui";
import { DialogClose } from "@plasmicpkgs/radix-ui";
import { BackHandler } from "@/components/BackHandler"; // plasmic-import: SjBUwY_Y_i3-/codeComponent

import { useScreenVariants as useScreenVariantsmqI86KQCt1 } from "../meto_deign_system/PlasmicGlobalVariant__Screen"; // plasmic-import: mqI__86kQCt1/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_meto_deign_system_css from "../meto_deign_system/plasmic.module.css"; // plasmic-import: 2X77A6CrJVTC8zJTD8qsTc/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: a37ZtVtYSDC6FmRkqCLyA3/projectcss
import sty from "./PlasmicModal2.module.css"; // plasmic-import: b0WRwkBcq6Fa/css

import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: 661nEHocwV7y/icon

createPlasmicElementProxy;

export type PlasmicModal2__VariantMembers = {
  noTrigger: "noTrigger";
  hideHeader: "hideHeader";
  noSpacing: "noSpacing";
  fullScreen: "fullScreen";
  background: "dark" | "black" | "exit" | "secound";
};
export type PlasmicModal2__VariantsArgs = {
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
  background?: SingleChoiceArg<"dark" | "black" | "exit" | "secound">;
};
type VariantPropType = keyof PlasmicModal2__VariantsArgs;
export const PlasmicModal2__VariantProps = new Array<VariantPropType>(
  "noTrigger",
  "hideHeader",
  "noSpacing",
  "fullScreen",
  "background"
);

export type PlasmicModal2__ArgsType = {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  onBack?: () => void;
  title?: React.ReactNode;
  body?: React.ReactNode;
};
type ArgPropType = keyof PlasmicModal2__ArgsType;
export const PlasmicModal2__ArgProps = new Array<ArgPropType>(
  "open",
  "onOpenChange",
  "onBack",
  "title",
  "body"
);

export type PlasmicModal2__OverridesType = {
  dialog?: Flex__<typeof Dialog>;
  dialogContent?: Flex__<typeof DialogContent>;
  section?: Flex__<"section">;
  dialogTitle?: Flex__<typeof DialogTitle>;
  h5?: Flex__<"h5">;
  dialogClose?: Flex__<typeof DialogClose>;
  svg?: Flex__<"svg">;
  backHandler?: Flex__<typeof BackHandler>;
};

export interface DefaultModal2Props {
  open?: boolean;
  onOpenChange?: (val: boolean) => void;
  onBack?: () => void;
  title?: React.ReactNode;
  body?: React.ReactNode;
  noTrigger?: SingleBooleanChoiceArg<"noTrigger">;
  hideHeader?: SingleBooleanChoiceArg<"hideHeader">;
  noSpacing?: SingleBooleanChoiceArg<"noSpacing">;
  fullScreen?: SingleBooleanChoiceArg<"fullScreen">;
  background?: SingleChoiceArg<"dark" | "black" | "exit" | "secound">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicModal2__RenderFunc(props: {
  variants: PlasmicModal2__VariantsArgs;
  args: PlasmicModal2__ArgsType;
  overrides: PlasmicModal2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "dialog.open",
        type: "writable",
        variableType: "boolean",

        valueProp: "open",
        onChangeProp: "onOpenChange"
      },
      {
        path: "noTrigger",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTrigger
      },
      {
        path: "hideHeader",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hideHeader
      },
      {
        path: "noSpacing",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noSpacing
      },
      {
        path: "fullScreen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fullScreen
      },
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsmqI86KQCt1()
  });

  return (
    <Dialog
      data-plasmic-name={"dialog"}
      data-plasmic-override={overrides.dialog}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.dialog,
        {
          [sty.dialogbackground_black]: hasVariant(
            $state,
            "background",
            "black"
          ),
          [sty.dialogbackground_dark]: hasVariant($state, "background", "dark"),
          [sty.dialogbackground_dark_fullScreen]:
            hasVariant($state, "background", "dark") &&
            hasVariant($state, "fullScreen", "fullScreen"),
          [sty.dialogfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialoghideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialognoSpacing]: hasVariant($state, "noSpacing", "noSpacing"),
          [sty.dialognoTrigger]: hasVariant($state, "noTrigger", "noTrigger")
        }
      )}
      defaultOpen={true}
      onOpenChange={async (...eventArgs: any) => {
        generateStateOnChangeProp($state, ["dialog", "open"]).apply(
          null,
          eventArgs
        );
      }}
      open={generateStateValueProp($state, ["dialog", "open"])}
      overlayClassName={classNames({
        [sty["pcls_YBOsXAYWhJ9Q"]]:
          hasVariant($state, "fullScreen", "fullScreen") &&
          hasVariant(globalVariants, "screen", "mobileOnly"),
        [sty["pcls_n6G3cyGV6NeA"]]: hasVariant(
          globalVariants,
          "screen",
          "mobileOnly"
        ),
        [sty["pcls_nSUWWAvtexvV"]]: hasVariant(
          $state,
          "fullScreen",
          "fullScreen"
        ),
        [sty["pcls_yp5ezzjmJubR"]]: true
      })}
      themeResetClass={classNames(
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_meto_deign_system_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens
      )}
      triggerSlot={null}
    >
      <DialogContent
        data-plasmic-name={"dialogContent"}
        data-plasmic-override={overrides.dialogContent}
        className={classNames("__wab_instance", sty.dialogContent, {
          [sty.dialogContentbackground_black]: hasVariant(
            $state,
            "background",
            "black"
          ),
          [sty.dialogContentbackground_dark]: hasVariant(
            $state,
            "background",
            "dark"
          ),
          [sty.dialogContentbackground_dark_fullScreen]:
            hasVariant($state, "background", "dark") &&
            hasVariant($state, "fullScreen", "fullScreen"),
          [sty.dialogContentbackground_exit]: hasVariant(
            $state,
            "background",
            "exit"
          ),
          [sty.dialogContentbackground_secound]: hasVariant(
            $state,
            "background",
            "secound"
          ),
          [sty.dialogContentfullScreen]: hasVariant(
            $state,
            "fullScreen",
            "fullScreen"
          ),
          [sty.dialogContenthideHeader]: hasVariant(
            $state,
            "hideHeader",
            "hideHeader"
          ),
          [sty.dialogContentnoSpacing]: hasVariant(
            $state,
            "noSpacing",
            "noSpacing"
          )
        })}
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_meto_deign_system_css.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens
        )}
      >
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section, {
            [sty.sectionbackground_black]: hasVariant(
              $state,
              "background",
              "black"
            ),
            [sty.sectionbackground_dark]: hasVariant(
              $state,
              "background",
              "dark"
            ),
            [sty.sectionbackground_dark_fullScreen]:
              hasVariant($state, "background", "dark") &&
              hasVariant($state, "fullScreen", "fullScreen"),
            [sty.sectionfullScreen]: hasVariant(
              $state,
              "fullScreen",
              "fullScreen"
            )
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__qR9GB, {
              [sty.freeBoxbackground_dark_fullScreen__qR9GBRUBf9RW]:
                hasVariant($state, "background", "dark") &&
                hasVariant($state, "fullScreen", "fullScreen"),
              [sty.freeBoxhideHeader__qR9GBrSPgH]: hasVariant(
                $state,
                "hideHeader",
                "hideHeader"
              )
            })}
            dir={``}
          >
            <DialogTitle
              data-plasmic-name={"dialogTitle"}
              data-plasmic-override={overrides.dialogTitle}
              className={classNames("__wab_instance", sty.dialogTitle)}
            >
              <h5
                data-plasmic-name={"h5"}
                data-plasmic-override={overrides.h5}
                className={classNames(projectcss.all, projectcss.h5, sty.h5, {
                  [sty.h5background_dark_fullScreen]:
                    hasVariant($state, "background", "dark") &&
                    hasVariant($state, "fullScreen", "fullScreen")
                })}
              >
                {renderPlasmicSlot({
                  defaultContents: "Title",
                  value: args.title,
                  className: classNames(sty.slotTargetTitle)
                })}
              </h5>
            </DialogTitle>
          </Stack__>
          <div
            className={classNames(projectcss.all, sty.freeBox___7X1Zx, {
              [sty.freeBoxbackground_dark_fullScreen___7X1ZxRUBf9RW]:
                hasVariant($state, "background", "dark") &&
                hasVariant($state, "fullScreen", "fullScreen"),
              [sty.freeBoxhideHeader___7X1ZxrSPgH]: hasVariant(
                $state,
                "hideHeader",
                "hideHeader"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tQcGt
                  )}
                >
                  {"You can insert body content here in this slot."}
                </div>
              ),
              value: args.body
            })}
          </div>
        </section>
        <DialogClose
          data-plasmic-name={"dialogClose"}
          data-plasmic-override={overrides.dialogClose}
          className={classNames("__wab_instance", sty.dialogClose, {
            [sty.dialogClosebackground_dark_fullScreen]:
              hasVariant($state, "background", "dark") &&
              hasVariant($state, "fullScreen", "fullScreen"),
            [sty.dialogClosehideHeader]: hasVariant(
              $state,
              "hideHeader",
              "hideHeader"
            )
          })}
        >
          <XIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgbackground_dark_fullScreen]:
                hasVariant($state, "background", "dark") &&
                hasVariant($state, "fullScreen", "fullScreen")
            })}
            role={"img"}
          />
        </DialogClose>
        <BackHandler
          data-plasmic-name={"backHandler"}
          data-plasmic-override={overrides.backHandler}
          active={true}
          className={classNames("__wab_instance", sty.backHandler)}
          onBack={args.onBack}
        />
      </DialogContent>
    </Dialog>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  dialog: [
    "dialog",
    "dialogContent",
    "section",
    "dialogTitle",
    "h5",
    "dialogClose",
    "svg",
    "backHandler"
  ],
  dialogContent: [
    "dialogContent",
    "section",
    "dialogTitle",
    "h5",
    "dialogClose",
    "svg",
    "backHandler"
  ],
  section: ["section", "dialogTitle", "h5"],
  dialogTitle: ["dialogTitle", "h5"],
  h5: ["h5"],
  dialogClose: ["dialogClose", "svg"],
  svg: ["svg"],
  backHandler: ["backHandler"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  dialog: typeof Dialog;
  dialogContent: typeof DialogContent;
  section: "section";
  dialogTitle: typeof DialogTitle;
  h5: "h5";
  dialogClose: typeof DialogClose;
  svg: "svg";
  backHandler: typeof BackHandler;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModal2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModal2__VariantsArgs;
    args?: PlasmicModal2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModal2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModal2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicModal2__ArgProps,
          internalVariantPropNames: PlasmicModal2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicModal2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "dialog") {
    func.displayName = "PlasmicModal2";
  } else {
    func.displayName = `PlasmicModal2.${nodeName}`;
  }
  return func;
}

export const PlasmicModal2 = Object.assign(
  // Top-level PlasmicModal2 renders the root element
  makeNodeComponent("dialog"),
  {
    // Helper components rendering sub-elements
    dialogContent: makeNodeComponent("dialogContent"),
    section: makeNodeComponent("section"),
    dialogTitle: makeNodeComponent("dialogTitle"),
    h5: makeNodeComponent("h5"),
    dialogClose: makeNodeComponent("dialogClose"),
    svg: makeNodeComponent("svg"),
    backHandler: makeNodeComponent("backHandler"),

    // Metadata about props expected for PlasmicModal2
    internalVariantProps: PlasmicModal2__VariantProps,
    internalArgProps: PlasmicModal2__ArgProps
  }
);

export default PlasmicModal2;
/* prettier-ignore-end */
